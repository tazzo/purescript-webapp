// Generated by purs bundle 0.11.7
var PS = {};
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Semigroupoid = function (compose) {
      this.compose = compose;
  };
  var semigroupoidFn = new Semigroupoid(function (f) {
      return function (g) {
          return function (x) {
              return f(g(x));
          };
      };
  });
  var compose = function (dict) {
      return dict.compose;
  };
  exports["compose"] = compose;
  exports["Semigroupoid"] = Semigroupoid;
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS["Control.Semigroupoid"] = PS["Control.Semigroupoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Category = function (Semigroupoid0, id) {
      this.Semigroupoid0 = Semigroupoid0;
      this.id = id;
  };
  var id = function (dict) {
      return dict.id;
  };
  var categoryFn = new Category(function () {
      return Control_Semigroupoid.semigroupoidFn;
  }, function (x) {
      return x;
  });
  exports["Category"] = Category;
  exports["id"] = id;
  exports["categoryFn"] = categoryFn;
})(PS["Control.Category"] = PS["Control.Category"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Prelude = PS["Prelude"];        
  var IsString = function (fromString) {
      this.fromString = fromString;
  };
  var isStringString = new IsString(Control_Category.id(Control_Category.categoryFn));
  var fromString = function (dict) {
      return dict.fromString;
  };
  exports["fromString"] = fromString;
  exports["IsString"] = IsString;
  exports["isStringString"] = isStringString;
})(PS["CSS.String"] = PS["CSS.String"] || {});
(function(exports) {
    "use strict";

  exports.arrayApply = function (fs) {
    return function (xs) {
      var l = fs.length;
      var k = xs.length;
      var result = new Array(l*k);
      var n = 0;
      for (var i = 0; i < l; i++) {
        var f = fs[i];
        for (var j = 0; j < k; j++) {
          result[n++] = f(xs[j]);
        }
      }
      return result;
    };
  };
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var applyFlipped = function (x) {
      return function (f) {
          return f(x);
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
  exports["applyFlipped"] = applyFlipped;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };                                                 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  var voidLeft = function (dictFunctor) {
      return function (f) {
          return function (x) {
              return map(dictFunctor)(Data_Function["const"](x))(f);
          };
      };
  };
  var voidRight = function (dictFunctor) {
      return function (x) {
          return map(dictFunctor)(Data_Function["const"](x));
      };
  };
  var functorFn = new Functor(Control_Semigroupoid.compose(Control_Semigroupoid.semigroupoidFn));
  var functorArray = new Functor($foreign.arrayMap);
  exports["Functor"] = Functor;
  exports["map"] = map;
  exports["void"] = $$void;
  exports["voidRight"] = voidRight;
  exports["voidLeft"] = voidLeft;
  exports["functorFn"] = functorFn;
  exports["functorArray"] = functorArray;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Apply = function (Functor0, apply) {
      this.Functor0 = Functor0;
      this.apply = apply;
  }; 
  var applyArray = new Apply(function () {
      return Data_Functor.functorArray;
  }, $foreign.arrayApply);
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.id(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
  exports["applyArray"] = applyArray;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (Apply0, pure) {
      this.Apply0 = Apply0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var when = function (dictApplicative) {
      return function (v) {
          return function (v1) {
              if (v) {
                  return v1;
              };
              if (!v) {
                  return pure(dictApplicative)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Control.Applicative line 57, column 1 - line 57, column 63: " + [ v.constructor.name, v1.constructor.name ]);
          };
      };
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  }; 
  var applicativeArray = new Applicative(function () {
      return Control_Apply.applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["Applicative"] = Applicative;
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
  exports["when"] = when;
  exports["applicativeArray"] = applicativeArray;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
    "use strict";

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Bind = function (Apply0, bind) {
      this.Apply0 = Apply0;
      this.bind = bind;
  };
  var Discard = function (discard) {
      this.discard = discard;
  };
  var discard = function (dict) {
      return dict.discard;
  }; 
  var bindArray = new Bind(function () {
      return Control_Apply.applyArray;
  }, $foreign.arrayBind);
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var composeKleisliFlipped = function (dictBind) {
      return function (f) {
          return function (g) {
              return function (a) {
                  return bindFlipped(dictBind)(f)(g(a));
              };
          };
      };
  };
  var discardUnit = new Discard(function (dictBind) {
      return bind(dictBind);
  });
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["Discard"] = Discard;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["composeKleisliFlipped"] = composeKleisliFlipped;
  exports["bindArray"] = bindArray;
  exports["discardUnit"] = discardUnit;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
    "use strict";

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = new Array(step * (end - start) + 1);
      var i = start, n = 0;
      while (i !== end) {
        result[n++] = i;
        i += step;
      }
      result[n] = i;
      return result;
    };
  };                    

  exports.fromFoldableImpl = (function () {
    function Cons(head, tail) {
      this.head = head;
      this.tail = tail;
    }
    var emptyList = {};

    function curryCons(head) {
      return function (tail) {
        return new Cons(head, tail);
      };
    }

    function listToArray(list) {
      var result = [];
      var count = 0;
      var xs = list;
      while (xs !== emptyList) {
        result[count++] = xs.head;
        xs = xs.tail;
      }
      return result;
    }

    return function (foldr) {
      return function (xs) {
        return listToArray(foldr(curryCons)(emptyList)(xs));
      };
    };
  })();

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  exports.concat = function (xss) {
    if (xss.length <= 10000) {
      // This method is faster, but it crashes on big arrays.
      // So we use it when can and fallback to simple variant otherwise.
      return Array.prototype.concat.apply([], xss);
    }

    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  //------------------------------------------------------------------------------
  // Sorting ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.sortImpl = function (f) {
    return function (l) {
      return l.slice().sort(function (x, y) {
        return f(x)(y);
      });
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  exports.drop = function (n) {
    return function (l) {
      return n < 1 ? l : l.slice(n);
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  var semigroupFn = function (dictSemigroup) {
      return new Semigroup(function (f) {
          return function (g) {
              return function (x) {
                  return append(dictSemigroup)(f(x))(g(x));
              };
          };
      });
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupFn"] = semigroupFn;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Functor = PS["Data.Functor"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Alt = function (Functor0, alt) {
      this.Functor0 = Functor0;
      this.alt = alt;
  };
  var altArray = new Alt(function () {
      return Data_Functor.functorArray;
  }, Data_Semigroup.append(Data_Semigroup.semigroupArray));
  var alt = function (dict) {
      return dict.alt;
  };
  exports["Alt"] = Alt;
  exports["alt"] = alt;
  exports["altArray"] = altArray;
})(PS["Control.Alt"] = PS["Control.Alt"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Data_Functor = PS["Data.Functor"];        
  var Plus = function (Alt0, empty) {
      this.Alt0 = Alt0;
      this.empty = empty;
  };
  var plusArray = new Plus(function () {
      return Control_Alt.altArray;
  }, [  ]);
  var empty = function (dict) {
      return dict.empty;
  };
  exports["Plus"] = Plus;
  exports["empty"] = empty;
  exports["plusArray"] = plusArray;
})(PS["Control.Plus"] = PS["Control.Plus"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];        
  var Alternative = function (Applicative0, Plus1) {
      this.Applicative0 = Applicative0;
      this.Plus1 = Plus1;
  };
  var alternativeArray = new Alternative(function () {
      return Control_Applicative.applicativeArray;
  }, function () {
      return Control_Plus.plusArray;
  });
  exports["Alternative"] = Alternative;
  exports["alternativeArray"] = alternativeArray;
})(PS["Control.Alternative"] = PS["Control.Alternative"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (Applicative0, Bind1) {
      this.Applicative0 = Applicative0;
      this.Bind1 = Bind1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (v) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS["Data.Boolean"] = PS["Data.Boolean"] || {});
(function(exports) {
    "use strict";

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  exports.eqArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        if (xs.length !== ys.length) return false;
        for (var i = 0; i < xs.length; i++) {
          if (!f(xs[i])(ys[i])) return false;
        }
        return true;
      };
    };
  };
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Eq"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Eq = function (eq) {
      this.eq = eq;
  };
  var eqVoid = new Eq(function (v) {
      return function (v1) {
          return true;
      };
  });
  var eqString = new Eq($foreign.refEq);
  var eqNumber = new Eq($foreign.refEq);
  var eqInt = new Eq($foreign.refEq); 
  var eqBoolean = new Eq($foreign.refEq);
  var eq = function (dict) {
      return dict.eq;
  };
  var eqArray = function (dictEq) {
      return new Eq($foreign.eqArrayImpl(eq(dictEq)));
  }; 
  var notEq = function (dictEq) {
      return function (x) {
          return function (y) {
              return eq(eqBoolean)(eq(dictEq)(x)(y))(false);
          };
      };
  };
  exports["Eq"] = Eq;
  exports["eq"] = eq;
  exports["notEq"] = notEq;
  exports["eqBoolean"] = eqBoolean;
  exports["eqInt"] = eqInt;
  exports["eqNumber"] = eqNumber;
  exports["eqString"] = eqString;
  exports["eqVoid"] = eqVoid;
  exports["eqArray"] = eqArray;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function(exports) {
    "use strict";

  exports.ordArrayImpl = function (f) {
    return function (xs) {
      return function (ys) {
        var i = 0;
        var xlen = xs.length;
        var ylen = ys.length;
        while (i < xlen && i < ylen) {
          var x = xs[i];
          var y = ys[i];
          var o = f(x)(y);
          if (o !== 0) {
            return o;
          }
          i++;
        }
        if (xlen === ylen) {
          return 0;
        } else if (xlen > ylen) {
          return -1;
        } else {
          return 1;
        }
      };
    };
  };
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];        
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS["Data.Ordering"] = PS["Data.Ordering"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];        
  var unsafeCompare = $foreign.unsafeCompareImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value);
  exports["unsafeCompare"] = unsafeCompare;
})(PS["Data.Ord.Unsafe"] = PS["Data.Ord.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];        
  var Semiring = function (add, mul, one, zero) {
      this.add = add;
      this.mul = mul;
      this.one = one;
      this.zero = zero;
  };
  var zero = function (dict) {
      return dict.zero;
  };                                                                     
  var one = function (dict) {
      return dict.one;
  };
  var mul = function (dict) {
      return dict.mul;
  };
  var add = function (dict) {
      return dict.add;
  };
  exports["Semiring"] = Semiring;
  exports["add"] = add;
  exports["zero"] = zero;
  exports["mul"] = mul;
  exports["one"] = one;
})(PS["Data.Semiring"] = PS["Data.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord_Unsafe = PS["Data.Ord.Unsafe"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Ord = function (Eq0, compare) {
      this.Eq0 = Eq0;
      this.compare = compare;
  };
  var ordVoid = new Ord(function () {
      return Data_Eq.eqVoid;
  }, function (v) {
      return function (v1) {
          return Data_Ordering.EQ.value;
      };
  });
  var ordString = new Ord(function () {
      return Data_Eq.eqString;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordNumber = new Ord(function () {
      return Data_Eq.eqNumber;
  }, Data_Ord_Unsafe.unsafeCompare);
  var ordInt = new Ord(function () {
      return Data_Eq.eqInt;
  }, Data_Ord_Unsafe.unsafeCompare);
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 123, column 3 - line 126, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return x;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 114, column 3 - line 117, column 12: " + [ v.constructor.name ]);
          };
      };
  };
  var ordArray = function (dictOrd) {
      return new Ord(function () {
          return Data_Eq.eqArray(dictOrd.Eq0());
      }, (function () {
          var toDelta = function (x) {
              return function (y) {
                  var v = compare(dictOrd)(x)(y);
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.GT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Ord line 61, column 7 - line 66, column 1: " + [ v.constructor.name ]);
              };
          };
          return function (xs) {
              return function (ys) {
                  return compare(ordInt)(0)($foreign.ordArrayImpl(toDelta)(xs)(ys));
              };
          };
      })());
  }; 
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["Ord"] = Ord;
  exports["compare"] = compare;
  exports["min"] = min;
  exports["max"] = max;
  exports["clamp"] = clamp;
  exports["ordInt"] = ordInt;
  exports["ordNumber"] = ordNumber;
  exports["ordString"] = ordString;
  exports["ordVoid"] = ordVoid;
  exports["ordArray"] = ordArray;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Monoid = function (Semigroup0, mempty) {
      this.Semigroup0 = Semigroup0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");                    
  var monoidArray = new Monoid(function () {
      return Data_Semigroup.semigroupArray;
  }, [  ]);
  var mempty = function (dict) {
      return dict.mempty;
  };
  var monoidFn = function (dictMonoid) {
      return new Monoid(function () {
          return Data_Semigroup.semigroupFn(dictMonoid.Semigroup0());
      }, Data_Function["const"](mempty(dictMonoid)));
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidFn"] = monoidFn;
  exports["monoidString"] = monoidString;
  exports["monoidArray"] = monoidArray;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
  exports["foreachE"] = $foreign.foreachE;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["unsafeCoerceEff"] = $foreign.unsafeCoerceEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.newSTRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readSTRef = function (ref) {
    return function () {
      return ref.value;
    };
  };
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["newSTRef"] = $foreign.newSTRef;
  exports["readSTRef"] = $foreign.readSTRef;
})(PS["Control.Monad.ST"] = PS["Control.Monad.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];        
  var Bifunctor = function (bimap) {
      this.bimap = bimap;
  };
  var bimap = function (dict) {
      return dict.bimap;
  };
  var rmap = function (dictBifunctor) {
      return bimap(dictBifunctor)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["bimap"] = bimap;
  exports["Bifunctor"] = Bifunctor;
  exports["rmap"] = rmap;
})(PS["Data.Bifunctor"] = PS["Data.Bifunctor"] || {});
(function(exports) {
    "use strict";

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Bounded"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];        
  var Bounded = function (Ord0, bottom, top) {
      this.Ord0 = Ord0;
      this.bottom = bottom;
      this.top = top;
  };
  var top = function (dict) {
      return dict.top;
  };                                                 
  var boundedInt = new Bounded(function () {
      return Data_Ord.ordInt;
  }, $foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  exports["Bounded"] = Bounded;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["boundedInt"] = boundedInt;
})(PS["Data.Bounded"] = PS["Data.Bounded"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.boolConj = function (b1) {
    return function (b2) {
      return b1 && b2;
    };
  };

  exports.boolDisj = function (b1) {
    return function (b2) {
      return b1 || b2;
    };
  };

  exports.boolNot = function (b) {
    return !b;
  };
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.HeytingAlgebra"];
  var Data_Unit = PS["Data.Unit"];        
  var HeytingAlgebra = function (conj, disj, ff, implies, not, tt) {
      this.conj = conj;
      this.disj = disj;
      this.ff = ff;
      this.implies = implies;
      this.not = not;
      this.tt = tt;
  };
  var tt = function (dict) {
      return dict.tt;
  };
  var not = function (dict) {
      return dict.not;
  };
  var implies = function (dict) {
      return dict.implies;
  };                 
  var ff = function (dict) {
      return dict.ff;
  };
  var disj = function (dict) {
      return dict.disj;
  };
  var heytingAlgebraBoolean = new HeytingAlgebra($foreign.boolConj, $foreign.boolDisj, false, function (a) {
      return function (b) {
          return disj(heytingAlgebraBoolean)(not(heytingAlgebraBoolean)(a))(b);
      };
  }, $foreign.boolNot, true);
  var conj = function (dict) {
      return dict.conj;
  };
  var heytingAlgebraFunction = function (dictHeytingAlgebra) {
      return new HeytingAlgebra(function (f) {
          return function (g) {
              return function (a) {
                  return conj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (g) {
              return function (a) {
                  return disj(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (v) {
          return ff(dictHeytingAlgebra);
      }, function (f) {
          return function (g) {
              return function (a) {
                  return implies(dictHeytingAlgebra)(f(a))(g(a));
              };
          };
      }, function (f) {
          return function (a) {
              return not(dictHeytingAlgebra)(f(a));
          };
      }, function (v) {
          return tt(dictHeytingAlgebra);
      });
  };
  exports["HeytingAlgebra"] = HeytingAlgebra;
  exports["tt"] = tt;
  exports["ff"] = ff;
  exports["implies"] = implies;
  exports["conj"] = conj;
  exports["disj"] = disj;
  exports["not"] = not;
  exports["heytingAlgebraBoolean"] = heytingAlgebraBoolean;
  exports["heytingAlgebraFunction"] = heytingAlgebraFunction;
})(PS["Data.HeytingAlgebra"] = PS["Data.HeytingAlgebra"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadZero = function (Alternative1, Monad0) {
      this.Alternative1 = Alternative1;
      this.Monad0 = Monad0;
  }; 
  var guard = function (dictMonadZero) {
      return function (v) {
          if (v) {
              return Control_Applicative.pure((dictMonadZero.Alternative1()).Applicative0())(Data_Unit.unit);
          };
          if (!v) {
              return Control_Plus.empty((dictMonadZero.Alternative1()).Plus1());
          };
          throw new Error("Failed pattern match at Control.MonadZero line 54, column 1 - line 54, column 52: " + [ v.constructor.name ]);
      };
  };
  exports["MonadZero"] = MonadZero;
  exports["guard"] = guard;
})(PS["Control.MonadZero"] = PS["Control.MonadZero"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var semigroupMaybe = function (dictSemigroup) {
      return new Data_Semigroup.Semigroup(function (v) {
          return function (v1) {
              if (v instanceof Nothing) {
                  return v1;
              };
              if (v1 instanceof Nothing) {
                  return v;
              };
              if (v instanceof Just && v1 instanceof Just) {
                  return new Just(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Maybe line 176, column 1 - line 176, column 62: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var monoidMaybe = function (dictSemigroup) {
      return new Data_Monoid.Monoid(function () {
          return semigroupMaybe(dictSemigroup);
      }, Nothing.value);
  };
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 219, column 1 - line 219, column 51: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var isNothing = maybe(true)(Data_Function["const"](false));
  var isJust = maybe(false)(Data_Function["const"](true));
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var fromMaybe = function (a) {
      return maybe(a)(Control_Category.id(Control_Category.categoryFn));
  };
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 68, column 1 - line 68, column 35: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Control_Bind.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 127, column 1 - line 127, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Control_Applicative.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  var monadMaybe = new Control_Monad.Monad(function () {
      return applicativeMaybe;
  }, function () {
      return bindMaybe;
  });
  var altMaybe = new Control_Alt.Alt(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nothing) {
              return v1;
          };
          return v;
      };
  });
  var plusMaybe = new Control_Plus.Plus(function () {
      return altMaybe;
  }, Nothing.value);
  var alternativeMaybe = new Control_Alternative.Alternative(function () {
      return applicativeMaybe;
  }, function () {
      return plusMaybe;
  });
  var monadZeroMaybe = new Control_MonadZero.MonadZero(function () {
      return alternativeMaybe;
  }, function () {
      return monadMaybe;
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["fromMaybe"] = fromMaybe;
  exports["isJust"] = isJust;
  exports["isNothing"] = isNothing;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["altMaybe"] = altMaybe;
  exports["plusMaybe"] = plusMaybe;
  exports["alternativeMaybe"] = alternativeMaybe;
  exports["bindMaybe"] = bindMaybe;
  exports["monadMaybe"] = monadMaybe;
  exports["monadZeroMaybe"] = monadZeroMaybe;
  exports["semigroupMaybe"] = semigroupMaybe;
  exports["monoidMaybe"] = monoidMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var Newtype = function (unwrap, wrap) {
      this.unwrap = unwrap;
      this.wrap = wrap;
  };
  var wrap = function (dict) {
      return dict.wrap;
  };
  var unwrap = function (dict) {
      return dict.unwrap;
  };
  var under = function (dictNewtype) {
      return function (dictNewtype1) {
          return function (v) {
              return function (f) {
                  return function ($55) {
                      return unwrap(dictNewtype1)(f(wrap(dictNewtype)($55)));
                  };
              };
          };
      };
  };
  exports["unwrap"] = unwrap;
  exports["wrap"] = wrap;
  exports["Newtype"] = Newtype;
  exports["under"] = under;
})(PS["Data.Newtype"] = PS["Data.Newtype"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var First = function (x) {
      return x;
  };
  var semigroupFirst = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Data_Maybe.Just) {
              return v;
          };
          return v1;
      };
  });                                  
  var newtypeFirst = new Data_Newtype.Newtype(function (n) {
      return n;
  }, First);
  var monoidFirst = new Data_Monoid.Monoid(function () {
      return semigroupFirst;
  }, Data_Maybe.Nothing.value);
  exports["First"] = First;
  exports["newtypeFirst"] = newtypeFirst;
  exports["semigroupFirst"] = semigroupFirst;
  exports["monoidFirst"] = monoidFirst;
})(PS["Data.Maybe.First"] = PS["Data.Maybe.First"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var traverse_ = function (dictApplicative) {
      return function (dictFoldable) {
          return function (f) {
              return foldr(dictFoldable)(function ($195) {
                  return Control_Apply.applySecond(dictApplicative.Apply0())(f($195));
              })(Control_Applicative.pure(dictApplicative)(Data_Unit.unit));
          };
      };
  };
  var for_ = function (dictApplicative) {
      return function (dictFoldable) {
          return Data_Function.flip(traverse_(dictApplicative)(dictFoldable));
      };
  };
  var sequence_ = function (dictApplicative) {
      return function (dictFoldable) {
          return traverse_(dictApplicative)(dictFoldable)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false,
                                  acc: x
                              };
                          };
                          return {
                              init: false,
                              acc: Data_Semigroup.append(dictMonoid.Semigroup0())(v.acc)(Data_Semigroup.append(dictMonoid.Semigroup0())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true,
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldableMaybe = new Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Data_Maybe.Just) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 1 - line 131, column 41: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 1 - line 131, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Data_Maybe.Nothing) {
                  return z;
              };
              if (v1 instanceof Data_Maybe.Just) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Foldable line 131, column 1 - line 131, column 41: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return foldr(dictFoldable)(function (x) {
                  return function (acc) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(f(x))(acc);
                  };
              })(Data_Monoid.mempty(dictMonoid));
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  var fold = function (dictFoldable) {
      return function (dictMonoid) {
          return foldMap(dictFoldable)(dictMonoid)(Control_Category.id(Control_Category.categoryFn));
      };
  };
  exports["Foldable"] = Foldable;
  exports["foldr"] = foldr;
  exports["foldl"] = foldl;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["fold"] = fold;
  exports["traverse_"] = traverse_;
  exports["for_"] = for_;
  exports["sequence_"] = sequence_;
  exports["intercalate"] = intercalate;
  exports["foldableArray"] = foldableArray;
  exports["foldableMaybe"] = foldableMaybe;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Traversable"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Traversable_Accum = PS["Data.Traversable.Accum"];
  var Data_Traversable_Accum_Internal = PS["Data.Traversable.Accum.Internal"];
  var Prelude = PS["Prelude"];        
  var Traversable = function (Foldable1, Functor0, sequence, traverse) {
      this.Foldable1 = Foldable1;
      this.Functor0 = Functor0;
      this.sequence = sequence;
      this.traverse = traverse;
  };
  var traverse = function (dict) {
      return dict.traverse;
  }; 
  var sequence = function (dict) {
      return dict.sequence;
  };
  exports["Traversable"] = Traversable;
  exports["traverse"] = traverse;
  exports["sequence"] = sequence;
})(PS["Data.Traversable"] = PS["Data.Traversable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Left = (function () {
      function Left(value0) {
          this.value0 = value0;
      };
      Left.create = function (value0) {
          return new Left(value0);
      };
      return Left;
  })();
  var Right = (function () {
      function Right(value0) {
          this.value0 = value0;
      };
      Right.create = function (value0) {
          return new Right(value0);
      };
      return Right;
  })();
  var functorEither = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Left) {
              return new Left(v1.value0);
          };
          if (v1 instanceof Right) {
              return new Right(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Either line 36, column 1 - line 36, column 45: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var foldableEither = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (v) {
              if (v instanceof Left) {
                  return Data_Monoid.mempty(dictMonoid);
              };
              if (v instanceof Right) {
                  return f(v.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 184, column 1 - line 184, column 47: " + [ f.constructor.name, v.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(z)(v1.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 184, column 1 - line 184, column 47: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  }, function (v) {
      return function (z) {
          return function (v1) {
              if (v1 instanceof Left) {
                  return z;
              };
              if (v1 instanceof Right) {
                  return v(v1.value0)(z);
              };
              throw new Error("Failed pattern match at Data.Either line 184, column 1 - line 184, column 47: " + [ v.constructor.name, z.constructor.name, v1.constructor.name ]);
          };
      };
  });
  var eqEither = function (dictEq) {
      return function (dictEq1) {
          return new Data_Eq.Eq(function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Eq.eq(dictEq)(x.value0)(y.value0);
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Eq.eq(dictEq1)(x.value0)(y.value0);
                  };
                  return false;
              };
          });
      };
  };
  var ordEither = function (dictOrd) {
      return function (dictOrd1) {
          return new Data_Ord.Ord(function () {
              return eqEither(dictOrd.Eq0())(dictOrd1.Eq0());
          }, function (x) {
              return function (y) {
                  if (x instanceof Left && y instanceof Left) {
                      return Data_Ord.compare(dictOrd)(x.value0)(y.value0);
                  };
                  if (x instanceof Left) {
                      return Data_Ordering.LT.value;
                  };
                  if (y instanceof Left) {
                      return Data_Ordering.GT.value;
                  };
                  if (x instanceof Right && y instanceof Right) {
                      return Data_Ord.compare(dictOrd1)(x.value0)(y.value0);
                  };
                  throw new Error("Failed pattern match at Data.Either line 176, column 8 - line 176, column 64: " + [ x.constructor.name, y.constructor.name ]);
              };
          });
      };
  };
  var either = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return v(v2.value0);
              };
              if (v2 instanceof Right) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Either line 229, column 1 - line 229, column 64: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var bifunctorEither = new Data_Bifunctor.Bifunctor(function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Left) {
                  return new Left(v(v2.value0));
              };
              if (v2 instanceof Right) {
                  return new Right(v1(v2.value0));
              };
              throw new Error("Failed pattern match at Data.Either line 43, column 1 - line 43, column 45: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  });
  var applyEither = new Control_Apply.Apply(function () {
      return functorEither;
  }, function (v) {
      return function (v1) {
          if (v instanceof Left) {
              return new Left(v.value0);
          };
          if (v instanceof Right) {
              return Data_Functor.map(functorEither)(v.value0)(v1);
          };
          throw new Error("Failed pattern match at Data.Either line 79, column 1 - line 79, column 41: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Left"] = Left;
  exports["Right"] = Right;
  exports["either"] = either;
  exports["functorEither"] = functorEither;
  exports["bifunctorEither"] = bifunctorEither;
  exports["applyEither"] = applyEither;
  exports["eqEither"] = eqEither;
  exports["ordEither"] = ordEither;
  exports["foldableEither"] = foldableEither;
})(PS["Data.Either"] = PS["Data.Either"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Identity = function (x) {
      return x;
  };
  var newtypeIdentity = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Identity);
  var functorIdentity = new Data_Functor.Functor(function (f) {
      return function (v) {
          return f(v);
      };
  });
  var applyIdentity = new Control_Apply.Apply(function () {
      return functorIdentity;
  }, function (v) {
      return function (v1) {
          return v(v1);
      };
  });
  var bindIdentity = new Control_Bind.Bind(function () {
      return applyIdentity;
  }, function (v) {
      return function (f) {
          return f(v);
      };
  });
  var applicativeIdentity = new Control_Applicative.Applicative(function () {
      return applyIdentity;
  }, Identity);
  var monadIdentity = new Control_Monad.Monad(function () {
      return applicativeIdentity;
  }, function () {
      return bindIdentity;
  });
  exports["Identity"] = Identity;
  exports["newtypeIdentity"] = newtypeIdentity;
  exports["functorIdentity"] = functorIdentity;
  exports["applyIdentity"] = applyIdentity;
  exports["applicativeIdentity"] = applicativeIdentity;
  exports["bindIdentity"] = bindIdentity;
  exports["monadIdentity"] = monadIdentity;
})(PS["Data.Identity"] = PS["Data.Identity"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Loop = (function () {
      function Loop(value0) {
          this.value0 = value0;
      };
      Loop.create = function (value0) {
          return new Loop(value0);
      };
      return Loop;
  })();
  var Done = (function () {
      function Done(value0) {
          this.value0 = value0;
      };
      Done.create = function (value0) {
          return new Done(value0);
      };
      return Done;
  })();
  var MonadRec = function (Monad0, tailRecM) {
      this.Monad0 = Monad0;
      this.tailRecM = tailRecM;
  };
  var tailRecM = function (dict) {
      return dict.tailRecM;
  };
  var tailRecEff = function (f) {
      return function (a) {
          var fromDone = function (v) {
              var __unused = function (dictPartial1) {
                  return function ($dollar16) {
                      return $dollar16;
                  };
              };
              return __unused()((function () {
                  if (v instanceof Done) {
                      return v.value0;
                  };
                  throw new Error("Failed pattern match at Control.Monad.Rec.Class line 141, column 28 - line 141, column 42: " + [ v.constructor.name ]);
              })());
          };
          var f$prime = function ($52) {
              return Control_Monad_Eff_Unsafe.unsafeCoerceEff(f($52));
          };
          return function __do() {
              var v = Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Control_Monad_ST.newSTRef)(f$prime(a))();
              (function () {
                  while (!(function __do() {
                      var v1 = v.value;
                      if (v1 instanceof Loop) {
                          var v2 = f$prime(v1.value0)();
                          var v3 = v.value = v2;
                          return false;
                      };
                      if (v1 instanceof Done) {
                          return true;
                      };
                      throw new Error("Failed pattern match at Control.Monad.Rec.Class line 130, column 5 - line 135, column 26: " + [ v1.constructor.name ]);
                  })()) {

                  };
                  return {};
              })();
              return Data_Functor.map(Control_Monad_Eff.functorEff)(fromDone)(Control_Monad_ST.readSTRef(v))();
          };
      };
  }; 
  var monadRecEff = new MonadRec(function () {
      return Control_Monad_Eff.monadEff;
  }, tailRecEff);
  exports["Loop"] = Loop;
  exports["Done"] = Done;
  exports["MonadRec"] = MonadRec;
  exports["tailRecM"] = tailRecM;
  exports["monadRecEff"] = monadRecEff;
})(PS["Control.Monad.Rec.Class"] = PS["Control.Monad.Rec.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Prelude = PS["Prelude"];        
  var NonEmpty = (function () {
      function NonEmpty(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NonEmpty.create = function (value0) {
          return function (value1) {
              return new NonEmpty(value0, value1);
          };
      };
      return NonEmpty;
  })();
  var singleton = function (dictPlus) {
      return function (a) {
          return new NonEmpty(a, Control_Plus.empty(dictPlus));
      };
  };
  var oneOf = function (dictAlternative) {
      return function (v) {
          return Control_Alt.alt((dictAlternative.Plus1()).Alt0())(Control_Applicative.pure(dictAlternative.Applicative0())(v.value0))(v.value1);
      };
  };
  var functorNonEmpty = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return new NonEmpty(f(v.value0), Data_Functor.map(dictFunctor)(f)(v.value1));
          };
      });
  };
  var foldl1 = function (dictFoldable) {
      return function (f) {
          return function (v) {
              return Data_Foldable.foldl(dictFoldable)(f)(v.value0)(v.value1);
          };
      };
  };
  var foldableNonEmpty = function (dictFoldable) {
      return new Data_Foldable.Foldable(function (dictMonoid) {
          return function (f) {
              return function (v) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(f(v.value0))(Data_Foldable.foldMap(dictFoldable)(dictMonoid)(f)(v.value1));
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return Data_Foldable.foldl(dictFoldable)(f)(f(b)(v.value0))(v.value1);
              };
          };
      }, function (f) {
          return function (b) {
              return function (v) {
                  return f(v.value0)(Data_Foldable.foldr(dictFoldable)(f)(b)(v.value1));
              };
          };
      });
  };
  exports["NonEmpty"] = NonEmpty;
  exports["singleton"] = singleton;
  exports["foldl1"] = foldl1;
  exports["oneOf"] = oneOf;
  exports["functorNonEmpty"] = functorNonEmpty;
  exports["foldableNonEmpty"] = foldableNonEmpty;
})(PS["Data.NonEmpty"] = PS["Data.NonEmpty"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_Distributive = PS["Data.Distributive"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Type_Equality = PS["Type.Equality"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var uncurry = function (f) {
      return function (v) {
          return f(v.value0)(v.value1);
      };
  };
  var snd = function (v) {
      return v.value1;
  };
  var lookup = function (dictFoldable) {
      return function (dictEq) {
          return function (a) {
              return function ($264) {
                  return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(Data_Foldable.foldMap(dictFoldable)(Data_Maybe_First.monoidFirst)(function (v) {
                      var $146 = Data_Eq.eq(dictEq)(a)(v.value0);
                      if ($146) {
                          return new Data_Maybe.Just(v.value1);
                      };
                      return Data_Maybe.Nothing.value;
                  })($264));
              };
          };
      };
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["uncurry"] = uncurry;
  exports["lookup"] = lookup;
  exports["functorTuple"] = functorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Array"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array_ST = PS["Data.Array.ST"];
  var Data_Array_ST_Iterator = PS["Data.Array.ST.Iterator"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var uncons = $foreign["uncons'"](Data_Function["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x,
              tail: xs
          });
      };
  });
  var sortBy = function (comp) {
      return function (xs) {
          var comp$prime = function (x) {
              return function (y) {
                  var v = comp(x)(y);
                  if (v instanceof Data_Ordering.GT) {
                      return 1;
                  };
                  if (v instanceof Data_Ordering.EQ) {
                      return 0;
                  };
                  if (v instanceof Data_Ordering.LT) {
                      return -1 | 0;
                  };
                  throw new Error("Failed pattern match at Data.Array line 698, column 15 - line 703, column 1: " + [ v.constructor.name ]);
              };
          };
          return $foreign.sortImpl(comp$prime)(xs);
      };
  };
  var sort = function (dictOrd) {
      return function (xs) {
          return sortBy(Data_Ord.compare(dictOrd))(xs);
      };
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = function (xs) {
      return index(xs)(0);
  };
  var fromFoldable = function (dictFoldable) {
      return $foreign.fromFoldableImpl(Data_Foldable.foldr(dictFoldable));
  };
  var concatMap = Data_Function.flip(Control_Bind.bind(Control_Bind.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($94) {
          return Data_Maybe.maybe([  ])(singleton)(f($94));
      });
  };
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["head"] = head;
  exports["uncons"] = uncons;
  exports["index"] = index;
  exports["concatMap"] = concatMap;
  exports["mapMaybe"] = mapMaybe;
  exports["sort"] = sort;
  exports["sortBy"] = sortBy;
  exports["range"] = $foreign.range;
  exports["length"] = $foreign.length;
  exports["cons"] = $foreign.cons;
  exports["drop"] = $foreign.drop;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
    "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };

  exports.fromStringAsImpl = function (just) {
    return function (nothing) {
      return function (radix) {
        var digits;
        if (radix < 11) {
          digits = "[0-" + (radix - 1).toString() + "]";
        } else if (radix === 11) {
          digits = "[0-9a]";
        } else {
          digits = "[0-9a-" + String.fromCharCode(86 + radix) + "]";
        }
        var pattern = new RegExp("^[\\+\\-]?" + digits + "+$", "i");

        return function (s) {
          /* jshint bitwise: false */
          if (pattern.test(s)) {
            var i = parseInt(s, radix);
            return (i | 0) === i ? just(i) : nothing;
          } else {
            return nothing;
          }
        };
      };
    };
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* globals exports */
  "use strict";     

  exports.isNaN = isNaN;

  exports.infinity = Infinity;

  exports.readFloat = parseFloat;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Global"];
  exports["isNaN"] = $foreign["isNaN"];
  exports["infinity"] = $foreign.infinity;
  exports["readFloat"] = $foreign.readFloat;
})(PS["Global"] = PS["Global"] || {});
(function(exports) {
    "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.remainder = function (n) {
    return function (m) {
      return n % m;
    };
  };

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Math"];
  exports["abs"] = $foreign.abs;
  exports["round"] = $foreign.round;
  exports["remainder"] = $foreign.remainder;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Int"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_DivisionRing = PS["Data.DivisionRing"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Field = PS["Data.Field"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Global = PS["Global"];
  var $$Math = PS["Math"];
  var Prelude = PS["Prelude"];
  var hexadecimal = 16;
  var fromStringAs = $foreign.fromStringAsImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var fromString = fromStringAs(10);
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x === Global.infinity) {
          return 0;
      };
      if (x === -Global.infinity) {
          return 0;
      };
      if (x >= $foreign.toNumber(Data_Bounded.top(Data_Bounded.boundedInt))) {
          return Data_Bounded.top(Data_Bounded.boundedInt);
      };
      if (x <= $foreign.toNumber(Data_Bounded.bottom(Data_Bounded.boundedInt))) {
          return Data_Bounded.bottom(Data_Bounded.boundedInt);
      };
      if (Data_Boolean.otherwise) {
          return Data_Maybe.fromMaybe(0)(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 64, column 1 - line 64, column 29: " + [ x.constructor.name ]);
  };
  var round = function ($23) {
      return unsafeClamp($$Math.round($23));
  };
  exports["fromNumber"] = fromNumber;
  exports["round"] = round;
  exports["fromString"] = fromString;
  exports["hexadecimal"] = hexadecimal;
  exports["fromStringAs"] = fromStringAs;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
    "use strict";

  exports._indexOf = function (just) {
    return function (nothing) {
      return function (x) {
        return function (s) {
          var i = s.indexOf(x);
          return i === -1 ? nothing : just(i);
        };
      };
    };
  };

  exports.length = function (s) {
    return s.length;
  };

  exports.take = function (n) {
    return function (s) {
      return s.substr(0, n);
    };
  };

  exports.drop = function (n) {
    return function (s) {
      return s.substring(n);
    };
  };

  exports.split = function (sep) {
    return function (s) {
      return s.split(sep);
    };
  };

  exports.joinWith = function (s) {
    return function (xs) {
      return xs.join(s);
    };
  };
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String_Unsafe = PS["Data.String.Unsafe"];
  var Prelude = PS["Prelude"];                                                                
  var indexOf = $foreign._indexOf(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var contains = function (pat) {
      return function ($48) {
          return Data_Maybe.isJust(indexOf(pat)($48));
      };
  };
  exports["contains"] = contains;
  exports["indexOf"] = indexOf;
  exports["length"] = $foreign.length;
  exports["take"] = $foreign.take;
  exports["drop"] = $foreign.drop;
  exports["split"] = $foreign.split;
  exports["joinWith"] = $foreign.joinWith;
})(PS["Data.String"] = PS["Data.String"] || {});
(function(exports) {
    "use strict";

  exports["regex'"] = function (left) {
    return function (right) {
      return function (s1) {
        return function (s2) {
          try {
            return right(new RegExp(s1, s2));
          } catch (e) {
            return left(e.message);
          }
        };
      };
    };
  };

  exports._match = function (just) {
    return function (nothing) {
      return function (r) {
        return function (s) {
          var m = s.match(r);
          if (m == null) {
            return nothing;
          } else {
            for (var i = 0; i < m.length; i++) {
              m[i] = m[i] == null ? nothing : just(m[i]);
            }
            return just(m);
          }
        };
      };
    };
  };

  exports.replace = function (r) {
    return function (s1) {
      return function (s2) {
        return s2.replace(r, s1);
      };
    };
  };
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];        
  var RegexFlags = (function () {
      function RegexFlags(value0) {
          this.value0 = value0;
      };
      RegexFlags.create = function (value0) {
          return new RegexFlags(value0);
      };
      return RegexFlags;
  })();
  var noFlags = new RegexFlags({
      global: false,
      ignoreCase: false,
      multiline: false,
      sticky: false,
      unicode: false
  });
  exports["RegexFlags"] = RegexFlags;
  exports["noFlags"] = noFlags;
})(PS["Data.String.Regex.Flags"] = PS["Data.String.Regex.Flags"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.String.Regex"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Prelude = PS["Prelude"];                                                    
  var renderFlags = function (v) {
      return (function () {
          if (v.value0.global) {
              return "g";
          };
          return "";
      })() + ((function () {
          if (v.value0.ignoreCase) {
              return "i";
          };
          return "";
      })() + ((function () {
          if (v.value0.multiline) {
              return "m";
          };
          return "";
      })() + ((function () {
          if (v.value0.sticky) {
              return "y";
          };
          return "";
      })() + (function () {
          if (v.value0.unicode) {
              return "u";
          };
          return "";
      })())));
  };
  var regex = function (s) {
      return function (f) {
          return $foreign["regex'"](Data_Either.Left.create)(Data_Either.Right.create)(s)(renderFlags(f));
      };
  };
  var parseFlags = function (s) {
      return new Data_String_Regex_Flags.RegexFlags({
          global: Data_String.contains("g")(s),
          ignoreCase: Data_String.contains("i")(s),
          multiline: Data_String.contains("m")(s),
          sticky: Data_String.contains("y")(s),
          unicode: Data_String.contains("u")(s)
      });
  };
  var match = $foreign._match(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  exports["regex"] = regex;
  exports["renderFlags"] = renderFlags;
  exports["parseFlags"] = parseFlags;
  exports["match"] = match;
  exports["replace"] = $foreign.replace;
})(PS["Data.String.Regex"] = PS["Data.String.Regex"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Int = PS["Data.Int"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var modPos = function (x) {
      return function (y) {
          return $$Math.remainder($$Math.remainder(x)(y) + y)(y);
      };
  };
  var rgba = function (red$prime) {
      return function (green$prime) {
          return function (blue$prime) {
              return function (alpha) {
                  var red = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(red$prime);
                  var r = Data_Int.toNumber(red) / 255.0;
                  var green = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(green$prime);
                  var g = Data_Int.toNumber(green) / 255.0;
                  var blue = Data_Ord.clamp(Data_Ord.ordInt)(0)(255)(blue$prime);
                  var maxChroma = Data_Ord.max(Data_Ord.ordInt)(Data_Ord.max(Data_Ord.ordInt)(red)(green))(blue);
                  var minChroma = Data_Ord.min(Data_Ord.ordInt)(Data_Ord.min(Data_Ord.ordInt)(red)(green))(blue);
                  var chroma = maxChroma - minChroma | 0;
                  var chroma$prime = Data_Int.toNumber(chroma) / 255.0;
                  var lightness = Data_Int.toNumber(maxChroma + minChroma | 0) / (255.0 * 2.0);
                  var saturation = (function () {
                      if (chroma === 0) {
                          return 0.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return chroma$prime / (1.0 - $$Math.abs(2.0 * lightness - 1.0));
                      };
                      throw new Error("Failed pattern match at Color line 157, column 5 - line 158, column 75: " + [  ]);
                  })();
                  var b = Data_Int.toNumber(blue) / 255.0;
                  var hue$prime = function (v) {
                      if (v === 0) {
                          return 0.0;
                      };
                      if (maxChroma === red) {
                          return modPos((g - b) / chroma$prime)(6.0);
                      };
                      if (maxChroma === green) {
                          return (b - r) / chroma$prime + 2.0;
                      };
                      if (Data_Boolean.otherwise) {
                          return (r - g) / chroma$prime + 4.0;
                      };
                      throw new Error("Failed pattern match at Color line 148, column 5 - line 149, column 5: " + [ v.constructor.name ]);
                  };
                  var hue = 60.0 * hue$prime(chroma);
                  return new HSLA(hue, saturation, lightness, alpha);
              };
          };
      };
  };
  var rgb = function (r) {
      return function (g) {
          return function (b) {
              return rgba(r)(g)(b)(1.0);
          };
      };
  };
  var hsla = function (h) {
      return function (s) {
          return function (l) {
              return function (a) {
                  var s$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(s);
                  var l$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(l);
                  var a$prime = Data_Ord.clamp(Data_Ord.ordNumber)(0.0)(1.0)(a);
                  return new HSLA(h, s$prime, l$prime, a$prime);
              };
          };
      };
  };
  var hsl = function (h) {
      return function (s) {
          return function (l) {
              return hsla(h)(s)(l)(1.0);
          };
      };
  };
  var white = hsl(0.0)(0.0)(1.0);
  var fromHexString = function (str) {
      var parseHex = function ($111) {
          return Data_Maybe.fromMaybe(0)(Data_Int.fromStringAs(Data_Int.hexadecimal)($111));
      };
      var isShort = Data_String.length(str) === 4;
      var hush = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create);
      var pair = "(" + ("[0-9a-f]" + ("[0-9a-f]" + ")"));
      var single = "(" + ("[0-9a-f]" + ")");
      var variant = (function () {
          if (isShort) {
              return single + (single + single);
          };
          return pair + (pair + pair);
      })();
      var mPattern = Data_String_Regex.regex("^#(?:" + (variant + ")$"))(Data_String_Regex.parseFlags("i"));
      return Control_Bind.bind(Data_Maybe.bindMaybe)(hush(mPattern))(function (v) {
          return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_String_Regex.match(v)(str))(function (v1) {
              return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(v1)(1))))(function (v2) {
                  return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(v1)(2))))(function (v3) {
                      return Control_Bind.bind(Data_Maybe.bindMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(parseHex)(Control_Bind.join(Data_Maybe.bindMaybe)(Data_Array.index(v1)(3))))(function (v4) {
                          if (isShort) {
                              return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb((16 * v2 | 0) + v2 | 0)((16 * v3 | 0) + v3 | 0)((16 * v4 | 0) + v4 | 0));
                          };
                          return Control_Applicative.pure(Data_Maybe.applicativeMaybe)(rgb(v2)(v3)(v4));
                      });
                  });
              });
          });
      });
  };
  var cssStringHSLA = function (v) {
      var toString = function (n) {
          return Data_Show.show(Data_Show.showNumber)(Data_Int.toNumber(Data_Int.round(100.0 * n)) / 100.0);
      };
      var saturation = toString(v.value1 * 100.0) + "%";
      var lightness = toString(v.value2 * 100.0) + "%";
      var hue = toString(v.value0);
      var alpha = Data_Show.show(Data_Show.showNumber)(v.value3);
      var $69 = v.value3 === 1.0;
      if ($69) {
          return "hsl(" + (hue + (", " + (saturation + (", " + (lightness + ")")))));
      };
      return "hsla(" + (hue + (", " + (saturation + (", " + (lightness + (", " + (alpha + ")")))))));
  };
  exports["rgba"] = rgba;
  exports["rgb"] = rgb;
  exports["hsla"] = hsla;
  exports["hsl"] = hsl;
  exports["fromHexString"] = fromHexString;
  exports["cssStringHSLA"] = cssStringHSLA;
  exports["white"] = white;
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  var rmap = function (dictProfunctor) {
      return function (b2c) {
          return dimap(dictProfunctor)(Control_Category.id(Control_Category.categoryFn))(b2c);
      };
  };
  exports["dimap"] = dimap;
  exports["Profunctor"] = Profunctor;
  exports["rmap"] = rmap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var Strong = function (Profunctor0, first, second) {
      this.Profunctor0 = Profunctor0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["first"] = first;
  exports["second"] = second;
  exports["Strong"] = Strong;
  exports["strongFn"] = strongFn;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_String = PS["CSS.String"];
  var Color = PS["Color"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Prefixed = (function () {
      function Prefixed(value0) {
          this.value0 = value0;
      };
      Prefixed.create = function (value0) {
          return new Prefixed(value0);
      };
      return Prefixed;
  })();
  var Plain = (function () {
      function Plain(value0) {
          this.value0 = value0;
      };
      Plain.create = function (value0) {
          return new Plain(value0);
      };
      return Plain;
  })();
  var Value = function (x) {
      return x;
  };
  var Key = function (x) {
      return x;
  };
  var Val = function (value) {
      this.value = value;
  };
  var value = function (dict) {
      return dict.value;
  };                                                                       
  var semigroupPrefixed = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          if (v instanceof Plain && v1 instanceof Plain) {
              return Plain.create(v.value0 + v1.value0);
          };
          if (v instanceof Plain && v1 instanceof Prefixed) {
              return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                  return v.value0 + v2;
              }))(v1.value0));
          };
          if (v instanceof Prefixed && v1 instanceof Plain) {
              return Prefixed.create(Data_Functor.map(Data_Functor.functorArray)(Data_Profunctor_Strong.second(Data_Profunctor_Strong.strongFn)(function (v2) {
                  return v1.value0 + v2;
              }))(v.value0));
          };
          if (v instanceof Prefixed && v1 instanceof Prefixed) {
              return Prefixed.create(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1.value0));
          };
          throw new Error("Failed pattern match at CSS.Property line 25, column 1 - line 25, column 49: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var semigroupValue = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return Value(Data_Semigroup.append(semigroupPrefixed)(v)(v1));
      };
  });
  var plain = function (v) {
      if (v instanceof Prefixed) {
          return Data_Maybe.fromMaybe("")(Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)("")(v.value0));
      };
      if (v instanceof Plain) {
          return v.value0;
      };
      throw new Error("Failed pattern match at CSS.Property line 34, column 1 - line 34, column 28: " + [ v.constructor.name ]);
  };                                     
  var isStringPrefixed = new CSS_String.IsString(Plain.create);
  var isStringValue = new CSS_String.IsString(function ($145) {
      return Value(CSS_String.fromString(isStringPrefixed)($145));
  });
  var valColor = new Val(function ($147) {
      return CSS_String.fromString(isStringValue)(Color.cssStringHSLA($147));
  });
  var valNumber = new Val(function ($150) {
      return CSS_String.fromString(isStringValue)(Data_Show.show(Data_Show.showNumber)($150));
  });
  var valString = new Val(CSS_String.fromString(isStringValue));
  var valTuple = function (dictVal) {
      return function (dictVal1) {
          return new Val(function (v) {
              return Data_Semigroup.append(semigroupValue)(value(dictVal)(v.value0))(Data_Semigroup.append(semigroupValue)(CSS_String.fromString(isStringValue)(" "))(value(dictVal1)(v.value1)));
          });
      };
  }; 
  var isStringKey = new CSS_String.IsString(function ($151) {
      return Key(CSS_String.fromString(isStringPrefixed)($151));
  });
  var cast = function (v) {
      return v;
  };
  exports["value"] = value;
  exports["Prefixed"] = Prefixed;
  exports["Plain"] = Plain;
  exports["plain"] = plain;
  exports["Key"] = Key;
  exports["cast"] = cast;
  exports["Value"] = Value;
  exports["Val"] = Val;
  exports["isStringPrefixed"] = isStringPrefixed;
  exports["semigroupPrefixed"] = semigroupPrefixed;
  exports["isStringKey"] = isStringKey;
  exports["isStringValue"] = isStringValue;
  exports["semigroupValue"] = semigroupValue;
  exports["valString"] = valString;
  exports["valTuple"] = valTuple;
  exports["valNumber"] = valNumber;
  exports["valColor"] = valColor;
})(PS["CSS.Property"] = PS["CSS.Property"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_Common = PS["CSS.Common"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_String = PS["CSS.String"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var valSize = new CSS_Property.Val(function (v) {
      return v;
  });
  var px = function (i) {
      return Data_Semigroup.append(CSS_Property.semigroupValue)(CSS_Property.value(CSS_Property.valNumber)(i))(CSS_String.fromString(CSS_Property.isStringValue)("px"));
  };
  exports["px"] = px;
  exports["valSize"] = valSize;
})(PS["CSS.Size"] = PS["CSS.Size"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_String = PS["CSS.String"];
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Id = (function () {
      function Id(value0) {
          this.value0 = value0;
      };
      Id.create = function (value0) {
          return new Id(value0);
      };
      return Id;
  })();
  var Class = (function () {
      function Class(value0) {
          this.value0 = value0;
      };
      Class.create = function (value0) {
          return new Class(value0);
      };
      return Class;
  })();
  var Attr = (function () {
      function Attr(value0) {
          this.value0 = value0;
      };
      Attr.create = function (value0) {
          return new Attr(value0);
      };
      return Attr;
  })();
  var AttrVal = (function () {
      function AttrVal(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrVal.create = function (value0) {
          return function (value1) {
              return new AttrVal(value0, value1);
          };
      };
      return AttrVal;
  })();
  var AttrBegins = (function () {
      function AttrBegins(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrBegins.create = function (value0) {
          return function (value1) {
              return new AttrBegins(value0, value1);
          };
      };
      return AttrBegins;
  })();
  var AttrEnds = (function () {
      function AttrEnds(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrEnds.create = function (value0) {
          return function (value1) {
              return new AttrEnds(value0, value1);
          };
      };
      return AttrEnds;
  })();
  var AttrContains = (function () {
      function AttrContains(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrContains.create = function (value0) {
          return function (value1) {
              return new AttrContains(value0, value1);
          };
      };
      return AttrContains;
  })();
  var AttrSpace = (function () {
      function AttrSpace(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrSpace.create = function (value0) {
          return function (value1) {
              return new AttrSpace(value0, value1);
          };
      };
      return AttrSpace;
  })();
  var AttrHyph = (function () {
      function AttrHyph(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      AttrHyph.create = function (value0) {
          return function (value1) {
              return new AttrHyph(value0, value1);
          };
      };
      return AttrHyph;
  })();
  var Pseudo = (function () {
      function Pseudo(value0) {
          this.value0 = value0;
      };
      Pseudo.create = function (value0) {
          return new Pseudo(value0);
      };
      return Pseudo;
  })();
  var PseudoFunc = (function () {
      function PseudoFunc(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PseudoFunc.create = function (value0) {
          return function (value1) {
              return new PseudoFunc(value0, value1);
          };
      };
      return PseudoFunc;
  })();
  var Star = (function () {
      function Star() {

      };
      Star.value = new Star();
      return Star;
  })();
  var Elem = (function () {
      function Elem(value0) {
          this.value0 = value0;
      };
      Elem.create = function (value0) {
          return new Elem(value0);
      };
      return Elem;
  })();
  var PathChild = (function () {
      function PathChild(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      PathChild.create = function (value0) {
          return function (value1) {
              return new PathChild(value0, value1);
          };
      };
      return PathChild;
  })();
  var Deep = (function () {
      function Deep(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Deep.create = function (value0) {
          return function (value1) {
              return new Deep(value0, value1);
          };
      };
      return Deep;
  })();
  var Adjacent = (function () {
      function Adjacent(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Adjacent.create = function (value0) {
          return function (value1) {
              return new Adjacent(value0, value1);
          };
      };
      return Adjacent;
  })();
  var Combined = (function () {
      function Combined(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Combined.create = function (value0) {
          return function (value1) {
              return new Combined(value0, value1);
          };
      };
      return Combined;
  })();
  var Selector = (function () {
      function Selector(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Selector.create = function (value0) {
          return function (value1) {
              return new Selector(value0, value1);
          };
      };
      return Selector;
  })();
  var $$with = function (v) {
      return function (v1) {
          return new Selector(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value0)(v1), v.value1);
      };
  };
  var star = new Selector([  ], Star.value);
  var eqPredicate = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Id && y instanceof Id) {
              return x.value0 === y.value0;
          };
          if (x instanceof Class && y instanceof Class) {
              return x.value0 === y.value0;
          };
          if (x instanceof Attr && y instanceof Attr) {
              return x.value0 === y.value0;
          };
          if (x instanceof AttrVal && y instanceof AttrVal) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrBegins && y instanceof AttrBegins) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrEnds && y instanceof AttrEnds) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrContains && y instanceof AttrContains) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrSpace && y instanceof AttrSpace) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof AttrHyph && y instanceof AttrHyph) {
              return x.value0 === y.value0 && x.value1 === y.value1;
          };
          if (x instanceof Pseudo && y instanceof Pseudo) {
              return x.value0 === y.value0;
          };
          if (x instanceof PseudoFunc && y instanceof PseudoFunc) {
              return x.value0 === y.value0 && Data_Eq.eq(Data_Eq.eqArray(Data_Eq.eqString))(x.value1)(y.value1);
          };
          return false;
      };
  });
  var ordPredicate = new Data_Ord.Ord(function () {
      return eqPredicate;
  }, function (x) {
      return function (y) {
          if (x instanceof Id && y instanceof Id) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof Id) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Id) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Class && y instanceof Class) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof Class) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Class) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Attr && y instanceof Attr) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof Attr) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Attr) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrVal && y instanceof AttrVal) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrVal) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrVal) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrBegins && y instanceof AttrBegins) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrBegins) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrBegins) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrEnds && y instanceof AttrEnds) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrEnds) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrEnds) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrContains && y instanceof AttrContains) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrContains) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrContains) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrSpace && y instanceof AttrSpace) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrSpace) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrSpace) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof AttrHyph && y instanceof AttrHyph) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordString)(x.value1)(y.value1);
          };
          if (x instanceof AttrHyph) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof AttrHyph) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof Pseudo && y instanceof Pseudo) {
              return Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
          };
          if (x instanceof Pseudo) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof Pseudo) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PseudoFunc && y instanceof PseudoFunc) {
              var v = Data_Ord.compare(Data_Ord.ordString)(x.value0)(y.value0);
              if (v instanceof Data_Ordering.LT) {
                  return Data_Ordering.LT.value;
              };
              if (v instanceof Data_Ordering.GT) {
                  return Data_Ordering.GT.value;
              };
              return Data_Ord.compare(Data_Ord.ordArray(Data_Ord.ordString))(x.value1)(y.value1);
          };
          throw new Error("Failed pattern match at CSS.Selector line 24, column 8 - line 24, column 46: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var element = function (e) {
      return new Selector([  ], new Elem(e));
  };
  var deep = function (a) {
      return function (b) {
          return new Selector([  ], new Deep(a, b));
      };
  };
  var child = function (a) {
      return function (b) {
          return new Selector([  ], new PathChild(a, b));
      };
  };
  exports["Id"] = Id;
  exports["Class"] = Class;
  exports["Attr"] = Attr;
  exports["AttrVal"] = AttrVal;
  exports["AttrBegins"] = AttrBegins;
  exports["AttrEnds"] = AttrEnds;
  exports["AttrContains"] = AttrContains;
  exports["AttrSpace"] = AttrSpace;
  exports["AttrHyph"] = AttrHyph;
  exports["Pseudo"] = Pseudo;
  exports["PseudoFunc"] = PseudoFunc;
  exports["Star"] = Star;
  exports["Elem"] = Elem;
  exports["PathChild"] = PathChild;
  exports["Deep"] = Deep;
  exports["Adjacent"] = Adjacent;
  exports["Combined"] = Combined;
  exports["Selector"] = Selector;
  exports["star"] = star;
  exports["element"] = element;
  exports["deep"] = deep;
  exports["child"] = child;
  exports["with"] = $$with;
  exports["eqPredicate"] = eqPredicate;
  exports["ordPredicate"] = ordPredicate;
})(PS["CSS.Selector"] = PS["CSS.Selector"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Function = PS["Data.Function"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var MonadTell = function (Monad0, tell) {
      this.Monad0 = Monad0;
      this.tell = tell;
  };
  var tell = function (dict) {
      return dict.tell;
  };
  exports["tell"] = tell;
  exports["MonadTell"] = MonadTell;
})(PS["Control.Monad.Writer.Class"] = PS["Control.Monad.Writer.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var MonadEff = function (Monad0, liftEff) {
      this.Monad0 = Monad0;
      this.liftEff = liftEff;
  };
  var monadEffEff = new MonadEff(function () {
      return Control_Monad_Eff.monadEff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftEff = function (dict) {
      return dict.liftEff;
  };
  exports["liftEff"] = liftEff;
  exports["MonadEff"] = MonadEff;
  exports["monadEffEff"] = monadEffEff;
})(PS["Control.Monad.Eff.Class"] = PS["Control.Monad.Eff.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadThrow = function (Monad0, throwError) {
      this.Monad0 = Monad0;
      this.throwError = throwError;
  };
  var throwError = function (dict) {
      return dict.throwError;
  };
  exports["throwError"] = throwError;
  exports["MonadThrow"] = MonadThrow;
})(PS["Control.Monad.Error.Class"] = PS["Control.Monad.Error.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MonadState = function (Monad0, state) {
      this.Monad0 = Monad0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var modify = function (dictMonadState) {
      return function (f) {
          return state(dictMonadState)(function (s) {
              return new Data_Tuple.Tuple(Data_Unit.unit, f(s));
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["state"] = state;
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
  exports["modify"] = modify;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Prelude = PS["Prelude"];        
  var MonadTrans = function (lift) {
      this.lift = lift;
  };
  var lift = function (dict) {
      return dict.lift;
  };
  exports["lift"] = lift;
  exports["MonadTrans"] = MonadTrans;
})(PS["Control.Monad.Trans.Class"] = PS["Control.Monad.Trans.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var WriterT = function (x) {
      return x;
  };
  var runWriterT = function (v) {
      return v;
  };
  var mapWriterT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorWriterT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapWriterT(Data_Functor.map(dictFunctor)(function (v) {
              return new Data_Tuple.Tuple(f(v.value0), v.value1);
          }));
      });
  };
  var applyWriterT = function (dictSemigroup) {
      return function (dictApply) {
          return new Control_Apply.Apply(function () {
              return functorWriterT(dictApply.Functor0());
          }, function (v) {
              return function (v1) {
                  var k = function (v3) {
                      return function (v4) {
                          return new Data_Tuple.Tuple(v3.value0(v4.value0), Data_Semigroup.append(dictSemigroup)(v3.value1)(v4.value1));
                      };
                  };
                  return Control_Apply.apply(dictApply)(Data_Functor.map(dictApply.Functor0())(k)(v))(v1);
              };
          });
      };
  };
  var bindWriterT = function (dictSemigroup) {
      return function (dictBind) {
          return new Control_Bind.Bind(function () {
              return applyWriterT(dictSemigroup)(dictBind.Apply0());
          }, function (v) {
              return function (k) {
                  return WriterT(Control_Bind.bind(dictBind)(v)(function (v1) {
                      var v2 = k(v1.value0);
                      return Data_Functor.map((dictBind.Apply0()).Functor0())(function (v3) {
                          return new Data_Tuple.Tuple(v3.value0, Data_Semigroup.append(dictSemigroup)(v1.value1)(v3.value1));
                      })(v2);
                  }));
              };
          });
      };
  };
  var applicativeWriterT = function (dictMonoid) {
      return function (dictApplicative) {
          return new Control_Applicative.Applicative(function () {
              return applyWriterT(dictMonoid.Semigroup0())(dictApplicative.Apply0());
          }, function (a) {
              return WriterT(Control_Applicative.pure(dictApplicative)(new Data_Tuple.Tuple(a, Data_Monoid.mempty(dictMonoid))));
          });
      };
  };
  var monadWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeWriterT(dictMonoid)(dictMonad.Applicative0());
          }, function () {
              return bindWriterT(dictMonoid.Semigroup0())(dictMonad.Bind1());
          });
      };
  };
  var monadTellWriterT = function (dictMonoid) {
      return function (dictMonad) {
          return new Control_Monad_Writer_Class.MonadTell(function () {
              return monadWriterT(dictMonoid)(dictMonad);
          }, function ($124) {
              return WriterT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Tuple.Tuple.create(Data_Unit.unit)($124)));
          });
      };
  };
  exports["WriterT"] = WriterT;
  exports["runWriterT"] = runWriterT;
  exports["mapWriterT"] = mapWriterT;
  exports["functorWriterT"] = functorWriterT;
  exports["applyWriterT"] = applyWriterT;
  exports["applicativeWriterT"] = applicativeWriterT;
  exports["bindWriterT"] = bindWriterT;
  exports["monadWriterT"] = monadWriterT;
  exports["monadTellWriterT"] = monadTellWriterT;
})(PS["Control.Monad.Writer.Trans"] = PS["Control.Monad.Writer.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var runWriter = function ($1) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Writer_Trans.runWriterT($1));
  };
  var execWriter = function (m) {
      return Data_Tuple.snd(runWriter(m));
  };
  exports["runWriter"] = runWriter;
  exports["execWriter"] = execWriter;
})(PS["Control.Monad.Writer"] = PS["Control.Monad.Writer"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_Property = PS["CSS.Property"];
  var CSS_Selector = PS["CSS.Selector"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Writer = PS["Control.Monad.Writer"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Self = (function () {
      function Self(value0) {
          this.value0 = value0;
      };
      Self.create = function (value0) {
          return new Self(value0);
      };
      return Self;
  })();
  var Root = (function () {
      function Root(value0) {
          this.value0 = value0;
      };
      Root.create = function (value0) {
          return new Root(value0);
      };
      return Root;
  })();
  var Pop = (function () {
      function Pop(value0) {
          this.value0 = value0;
      };
      Pop.create = function (value0) {
          return new Pop(value0);
      };
      return Pop;
  })();
  var Child = (function () {
      function Child(value0) {
          this.value0 = value0;
      };
      Child.create = function (value0) {
          return new Child(value0);
      };
      return Child;
  })();
  var Sub = (function () {
      function Sub(value0) {
          this.value0 = value0;
      };
      Sub.create = function (value0) {
          return new Sub(value0);
      };
      return Sub;
  })();
  var Property = (function () {
      function Property(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Property.create = function (value0) {
          return function (value1) {
              return new Property(value0, value1);
          };
      };
      return Property;
  })();
  var Nested = (function () {
      function Nested(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Nested.create = function (value0) {
          return function (value1) {
              return new Nested(value0, value1);
          };
      };
      return Nested;
  })();
  var Query = (function () {
      function Query(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Query.create = function (value0) {
          return function (value1) {
              return new Query(value0, value1);
          };
      };
      return Query;
  })();
  var Face = (function () {
      function Face(value0) {
          this.value0 = value0;
      };
      Face.create = function (value0) {
          return new Face(value0);
      };
      return Face;
  })();
  var Keyframe = (function () {
      function Keyframe(value0) {
          this.value0 = value0;
      };
      Keyframe.create = function (value0) {
          return new Keyframe(value0);
      };
      return Keyframe;
  })();
  var Import = (function () {
      function Import(value0) {
          this.value0 = value0;
      };
      Import.create = function (value0) {
          return new Import(value0);
      };
      return Import;
  })();
  var S = function (x) {
      return x;
  };
  var runS = function (v) {
      return Control_Monad_Writer.execWriter(v);
  };
  var rule = function ($438) {
      return S(Control_Monad_Writer_Class.tell(Control_Monad_Writer_Trans.monadTellWriterT(Data_Monoid.monoidArray)(Data_Identity.monadIdentity))(Data_Array.singleton($438)));
  };
  var select = function (sel) {
      return function (rs) {
          return rule(new Nested(new Sub(sel), runS(rs)));
      };
  };
  var key = function (dictVal) {
      return function (k) {
          return function (v) {
              return rule(new Property(CSS_Property.cast(k), CSS_Property.value(dictVal)(v)));
          };
      };
  }; 
  var functorStyleM = new Data_Functor.Functor(function (f) {
      return function (v) {
          return S(Data_Functor.map(Control_Monad_Writer_Trans.functorWriterT(Data_Identity.functorIdentity))(f)(v));
      };
  });
  var applyStyleM = new Control_Apply.Apply(function () {
      return functorStyleM;
  }, function (v) {
      return function (v1) {
          return S(Control_Apply.apply(Control_Monad_Writer_Trans.applyWriterT(Data_Semigroup.semigroupArray)(Data_Identity.applyIdentity))(v)(v1));
      };
  });
  var bindStyleM = new Control_Bind.Bind(function () {
      return applyStyleM;
  }, function (v) {
      return function (f) {
          return S(Control_Bind.bind(Control_Monad_Writer_Trans.bindWriterT(Data_Semigroup.semigroupArray)(Data_Identity.bindIdentity))(v)(function ($442) {
              return (function (v1) {
                  return v1;
              })(f($442));
          }));
      };
  });
  exports["Self"] = Self;
  exports["Root"] = Root;
  exports["Pop"] = Pop;
  exports["Child"] = Child;
  exports["Sub"] = Sub;
  exports["Property"] = Property;
  exports["Nested"] = Nested;
  exports["Query"] = Query;
  exports["Face"] = Face;
  exports["Keyframe"] = Keyframe;
  exports["Import"] = Import;
  exports["S"] = S;
  exports["runS"] = runS;
  exports["rule"] = rule;
  exports["key"] = key;
  exports["select"] = select;
  exports["functorStyleM"] = functorStyleM;
  exports["applyStyleM"] = applyStyleM;
  exports["bindStyleM"] = bindStyleM;
})(PS["CSS.Stylesheet"] = PS["CSS.Stylesheet"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_Box = PS["CSS.Box"];
  var CSS_Color = PS["CSS.Color"];
  var CSS_Common = PS["CSS.Common"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_Size = PS["CSS.Size"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Side = function (x) {
      return x;
  };
  var BackgroundSize = function (x) {
      return x;
  };
  var BackgroundRepeat = function (x) {
      return x;
  };
  var Background = function (Val0, background) {
      this.Val0 = Val0;
      this.background = background;
  };
  var valSide = new CSS_Property.Val(function (v) {
      return v;
  });
  var valBackgroundSize = new CSS_Property.Val(function (v) {
      return v;
  });
  var valBackgroundRepeat = new CSS_Property.Val(function (v) {
      return v;
  });
  var valBackgroundPosition = new CSS_Property.Val(function (v) {
      return v;
  });
  var valBackgroundImage = new CSS_Property.Val(function (v) {
      return v;
  });
  var url = function (u) {
      return CSS_Property.value(CSS_Property.valString)("url(\"" + (u + "\")"));
  };                                                                           
  var sideRight = Side(CSS_String.fromString(CSS_Property.isStringValue)("right"));
  var sideCenter = Side(CSS_String.fromString(CSS_Property.isStringValue)("center"));
  var sideBottom = Side(CSS_String.fromString(CSS_Property.isStringValue)("bottom"));
  var placed = function (a) {
      return function (b) {
          return CSS_Property.value(CSS_Property.valTuple(valSide)(valSide))(new Data_Tuple.Tuple(a, b));
      };
  };
  var noRepeat = BackgroundRepeat(CSS_String.fromString(CSS_Property.isStringValue)("no-repeat"));
  var cover = BackgroundSize(CSS_String.fromString(CSS_Property.isStringValue)("cover"));                  
  var backgroundSize = CSS_Stylesheet.key(valBackgroundSize)(CSS_String.fromString(CSS_Property.isStringKey)("background-size"));                             
  var backgroundRepeat = CSS_Stylesheet.key(valBackgroundRepeat)(CSS_String.fromString(CSS_Property.isStringKey)("background-repeat"));
  var backgroundPosition = CSS_Stylesheet.key(valBackgroundPosition)(CSS_String.fromString(CSS_Property.isStringKey)("background-position"));
  var backgroundColor = CSS_Stylesheet.key(CSS_Property.valColor)(CSS_String.fromString(CSS_Property.isStringKey)("background-color"));
  var backgroundBackgroundImage = new Background(function () {
      return valBackgroundImage;
  }, CSS_Stylesheet.key(valBackgroundImage)(CSS_String.fromString(CSS_Property.isStringKey)("background")));
  var background = function (dict) {
      return dict.background;
  };
  exports["Background"] = Background;
  exports["background"] = background;
  exports["backgroundColor"] = backgroundColor;
  exports["backgroundPosition"] = backgroundPosition;
  exports["placed"] = placed;
  exports["backgroundSize"] = backgroundSize;
  exports["cover"] = cover;
  exports["backgroundRepeat"] = backgroundRepeat;
  exports["noRepeat"] = noRepeat;
  exports["url"] = url;
  exports["sideRight"] = sideRight;
  exports["sideBottom"] = sideBottom;
  exports["sideCenter"] = sideCenter;
  exports["backgroundBackgroundImage"] = backgroundBackgroundImage;
  exports["valBackgroundPosition"] = valBackgroundPosition;
  exports["valBackgroundSize"] = valBackgroundSize;
  exports["valBackgroundRepeat"] = valBackgroundRepeat;
  exports["valBackgroundImage"] = valBackgroundImage;
  exports["valSide"] = valSide;
})(PS["CSS.Background"] = PS["CSS.Background"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_Common = PS["CSS.Common"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Position = function (x) {
      return x;
  };   
  var Display = function (x) {
      return x;
  };
  var valPosition = new CSS_Property.Val(function (v) {
      return v;
  });
  var valDisplay = new CSS_Property.Val(function (v) {
      return v;
  });                                                                             
  var relative = Position(CSS_String.fromString(CSS_Property.isStringValue)("relative"));
  var position = CSS_Stylesheet.key(valPosition)(CSS_String.fromString(CSS_Property.isStringKey)("position"));
  var inlineBlock = Display(CSS_String.fromString(CSS_Property.isStringValue)("inline-block"));
  var display = CSS_Stylesheet.key(valDisplay)(CSS_String.fromString(CSS_Property.isStringKey)("display"));
  exports["Position"] = Position;
  exports["position"] = position;
  exports["relative"] = relative;
  exports["Display"] = Display;
  exports["inlineBlock"] = inlineBlock;
  exports["display"] = display;
  exports["valPosition"] = valPosition;
  exports["valDisplay"] = valDisplay;
})(PS["CSS.Display"] = PS["CSS.Display"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_Color = PS["CSS.Color"];
  var CSS_Common = PS["CSS.Common"];
  var CSS_Property = PS["CSS.Property"];
  var CSS_Size = PS["CSS.Size"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var color = CSS_Stylesheet.key(CSS_Property.valColor)(CSS_String.fromString(CSS_Property.isStringKey)("color"));
  exports["color"] = color;
})(PS["CSS.Font"] = PS["CSS.Font"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_Property = PS["CSS.Property"];
  var CSS_Size = PS["CSS.Size"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Data_Function = PS["Data.Function"];
  var Data_Tuple_Nested = PS["Data.Tuple.Nested"];        
  var width = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("width"));
  var top = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("top"));               
  var left = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("left"));
  var height = CSS_Stylesheet.key(CSS_Size.valSize)(CSS_String.fromString(CSS_Property.isStringKey)("height"));
  exports["width"] = width;
  exports["height"] = height;
  exports["top"] = top;
  exports["left"] = left;
})(PS["CSS.Geometry"] = PS["CSS.Geometry"] || {});
(function(exports) {
    "use strict";

  exports.warn = function (s) {
    return function () {
      console.warn(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["warn"] = $foreign.warn;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var This = (function () {
      function This(value0) {
          this.value0 = value0;
      };
      This.create = function (value0) {
          return new This(value0);
      };
      return This;
  })();
  var That = (function () {
      function That(value0) {
          this.value0 = value0;
      };
      That.create = function (value0) {
          return new That(value0);
      };
      return That;
  })();
  var Both = (function () {
      function Both(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Both.create = function (value0) {
          return function (value1) {
              return new Both(value0, value1);
          };
      };
      return Both;
  })();
  var theseRight = function (v) {
      if (v instanceof Both) {
          return new Data_Maybe.Just(v.value1);
      };
      if (v instanceof That) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var theseLeft = function (v) {
      if (v instanceof Both) {
          return new Data_Maybe.Just(v.value0);
      };
      if (v instanceof This) {
          return new Data_Maybe.Just(v.value0);
      };
      return Data_Maybe.Nothing.value;
  };
  var semigroupThese = function (dictSemigroup) {
      return function (dictSemigroup1) {
          return new Data_Semigroup.Semigroup(function (v) {
              return function (v1) {
                  if (v instanceof This && v1 instanceof This) {
                      return new This(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0));
                  };
                  if (v instanceof This && v1 instanceof That) {
                      return new Both(v.value0, v1.value0);
                  };
                  if (v instanceof This && v1 instanceof Both) {
                      return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v1.value1);
                  };
                  if (v instanceof That && v1 instanceof This) {
                      return new Both(v1.value0, v.value0);
                  };
                  if (v instanceof That && v1 instanceof That) {
                      return new That(Data_Semigroup.append(dictSemigroup1)(v.value0)(v1.value0));
                  };
                  if (v instanceof That && v1 instanceof Both) {
                      return new Both(v1.value0, Data_Semigroup.append(dictSemigroup1)(v.value0)(v1.value1));
                  };
                  if (v instanceof Both && v1 instanceof This) {
                      return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), v.value1);
                  };
                  if (v instanceof Both && v1 instanceof That) {
                      return new Both(v.value0, Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value0));
                  };
                  if (v instanceof Both && v1 instanceof Both) {
                      return new Both(Data_Semigroup.append(dictSemigroup)(v.value0)(v1.value0), Data_Semigroup.append(dictSemigroup1)(v.value1)(v1.value1));
                  };
                  throw new Error("Failed pattern match at Data.These line 21, column 1 - line 21, column 79: " + [ v.constructor.name, v1.constructor.name ]);
              };
          });
      };
  };
  exports["This"] = This;
  exports["That"] = That;
  exports["Both"] = Both;
  exports["theseLeft"] = theseLeft;
  exports["theseRight"] = theseRight;
  exports["semigroupThese"] = semigroupThese;
})(PS["Data.These"] = PS["Data.These"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_Property = PS["CSS.Property"];
  var CSS_Selector = PS["CSS.Selector"];
  var CSS_String = PS["CSS.String"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_These = PS["Data.These"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Sheet = function (x) {
      return x;
  };
  var Inline = function (x) {
      return x;
  };
  var sepWith = function (s) {
      return function (a) {
          return function (b) {
              return a + (s + b);
          };
      };
  };
  var semigroupInline = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var semigroupFile = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return v + v1;
      };
  });
  var properties = function (xs) {
      var sheetRules = Data_Either.either(function (v) {
          return Data_Monoid.mempty(Data_Monoid.monoidString);
      })(function (v) {
          return Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)([ v.value0, ": ", v.value1 ]);
      });
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)("; ")(Data_Functor.map(Data_Functor.functorArray)(sheetRules)(xs));
  };
  var predicate = function (v) {
      if (v instanceof CSS_Selector.Id) {
          return "#" + v.value0;
      };
      if (v instanceof CSS_Selector.Class) {
          return "." + v.value0;
      };
      if (v instanceof CSS_Selector.Attr) {
          return "[" + (v.value0 + "]");
      };
      if (v instanceof CSS_Selector.AttrVal) {
          return "[" + (v.value0 + ("='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrBegins) {
          return "[" + (v.value0 + ("^='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrEnds) {
          return "[" + (v.value0 + ("$='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrContains) {
          return "[" + (v.value0 + ("*='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrSpace) {
          return "[" + (v.value0 + ("~='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.AttrHyph) {
          return "[" + (v.value0 + ("|='" + (v.value1 + "']")));
      };
      if (v instanceof CSS_Selector.Pseudo) {
          return ":" + v.value0;
      };
      if (v instanceof CSS_Selector.PseudoFunc) {
          return ":" + (v.value0 + ("(" + (Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(",")(v.value1) + ")")));
      };
      throw new Error("Failed pattern match at CSS.Render line 180, column 1 - line 180, column 33: " + [ v.constructor.name ]);
  };
  var selector$prime$prime = function (v) {
      return function (v1) {
          if (v.length === 0 && v1 instanceof CSS_Selector.Star) {
              return [ "*" ];
          };
          if (v1 instanceof CSS_Selector.Star) {
              return [ "" ];
          };
          if (v1 instanceof CSS_Selector.Elem) {
              return [ v1.value0 ];
          };
          if (v1 instanceof CSS_Selector.PathChild) {
              return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" > "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
          };
          if (v1 instanceof CSS_Selector.Deep) {
              return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
          };
          if (v1 instanceof CSS_Selector.Adjacent) {
              return Control_Apply.apply(Control_Apply.applyArray)(Data_Functor.map(Data_Functor.functorArray)(sepWith(" + "))(selector$prime(v1.value0)))(selector$prime(v1.value1));
          };
          if (v1 instanceof CSS_Selector.Combined) {
              return Data_Semigroup.append(Data_Semigroup.semigroupArray)(selector$prime(v1.value0))(selector$prime(v1.value1));
          };
          throw new Error("Failed pattern match at CSS.Render line 146, column 1 - line 146, column 63: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var selector$prime = function (v) {
      return Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return v1 + Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(predicate)(Data_Array.sort(CSS_Selector.ordPredicate)(v.value0));
      })(selector$prime$prime(v.value0)(v.value1));
  };
  var selector = function ($185) {
      return Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(", ")(selector$prime($185));
  };
  var nel = function (v) {
      if (v.length === 0) {
          return Data_Maybe.Nothing.value;
      };
      return Data_Functor.map(Data_Maybe.functorMaybe)(function (v1) {
          return new Data_NonEmpty.NonEmpty(v1.head, v1.tail);
      })(Data_Array.uncons(v));
  };                                               
  var merger = function (v) {
      if (v.value0 instanceof CSS_Stylesheet.Child) {
          return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
              return CSS_Selector.child(merger(xs$prime))(v.value0.value0);
          })(nel(v.value1));
      };
      if (v.value0 instanceof CSS_Stylesheet.Sub) {
          return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
              return CSS_Selector.deep(merger(xs$prime))(v.value0.value0);
          })(nel(v.value1));
      };
      if (v.value0 instanceof CSS_Stylesheet.Root) {
          return Data_Maybe.maybe(v.value0.value0)(function (xs$prime) {
              return CSS_Selector.deep(v.value0.value0)(merger(xs$prime));
          })(nel(v.value1));
      };
      if (v.value0 instanceof CSS_Stylesheet.Pop) {
          return Data_Maybe.maybe(CSS_Selector.element("TODO"))(merger)(nel(Data_Array.drop(v.value0.value0)(Data_Array.cons(v.value0)(v.value1))));
      };
      if (v.value0 instanceof CSS_Stylesheet.Self) {
          return Data_Maybe.maybe(CSS_Selector["with"](CSS_Selector.star)(v.value0.value0))(function (xs$prime) {
              return CSS_Selector["with"](merger(xs$prime))(v.value0.value0);
          })(nel(v.value1));
      };
      throw new Error("Failed pattern match at CSS.Render line 173, column 3 - line 178, column 106: " + [ v.value0.constructor.name ]);
  };
  var mediaType = function (v) {
      return CSS_Property.plain(v);
  };
  var imp = function (t) {
      return Data_Maybe.Just.create(Data_These.That.create(Sheet(CSS_String.fromString(CSS_String.isStringString)("@import url(" + (t + ");\x0a")))));
  };
  var getSheet = function (v) {
      return v;
  };
  var renderedSheet = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function ($186) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(getSheet)(Data_These.theseRight($186));
      });
  };
  var getInline = function (v) {
      return v;
  };
  var renderedInline = function (v) {
      return Control_Bind.bind(Data_Maybe.bindMaybe)(v)(function ($187) {
          return Data_Functor.map(Data_Maybe.functorMaybe)(getInline)(Data_These.theseLeft($187));
      });
  }; 
  var feature = function (v) {
      return Data_Maybe.maybe(v.value0)(function (v1) {
          return "(" + (v.value0 + (": " + (CSS_Property.plain(v1) + ")")));
      })(v.value1);
  };
  var mediaQuery = function (v) {
      return "@media " + (mediaType(v.value1) + Data_NonEmpty.foldl1(Data_Foldable.foldableArray)(Data_Semigroup.append(Data_Semigroup.semigroupString))(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(function ($188) {
          return (function (v1) {
              return " and " + v1;
          })(feature($188));
      })(v.value2)));
  }; 
  var collect$prime = function (v) {
      return function (v1) {
          if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Plain) {
              return [ new Data_Either.Right(new Data_Tuple.Tuple(v.value0, v1.value0)) ];
          };
          if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Plain) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v3) {
                  return Data_Either.Right.create(new Data_Tuple.Tuple(v3.value0 + v3.value1, v1.value0));
              })(v.value0);
          };
          if (v instanceof CSS_Property.Plain && v1 instanceof CSS_Property.Prefixed) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                  return Data_Either.Right.create(new Data_Tuple.Tuple(v.value0, v2.value0 + v2.value1));
              })(v1.value0);
          };
          if (v instanceof CSS_Property.Prefixed && v1 instanceof CSS_Property.Prefixed) {
              return Data_Functor.map(Data_Functor.functorArray)(function (v2) {
                  return Data_Maybe.maybe(new Data_Either.Left(v2.value0 + v2.value1))(function ($189) {
                      return Data_Either.Right.create(Data_Tuple.Tuple.create(v2.value0 + v2.value1)((function (v3) {
                          return v2.value0 + v3;
                      })($189)));
                  })(Data_Tuple.lookup(Data_Foldable.foldableArray)(Data_Eq.eqString)(v2.value0)(v1.value0));
              })(v.value0);
          };
          throw new Error("Failed pattern match at CSS.Render line 161, column 1 - line 161, column 80: " + [ v.constructor.name, v1.constructor.name ]);
      };
  };
  var collect = function (v) {
      return collect$prime(v.value0)(v.value1);
  };
  var rule$prime = function (sel) {
      return function (props) {
          var p = Control_Bind.bind(Control_Bind.bindArray)(props)(collect);
          var q = Data_Functor.map(Data_Maybe.functorMaybe)(function ($190) {
              return Data_These.This.create(Inline(properties(Data_NonEmpty.oneOf(Control_Alternative.alternativeArray)($190))));
          })(nel(p));
          var o = function (sel$prime) {
              return Data_Maybe.Just.create(Data_These.That.create(Sheet(Data_Foldable.intercalate(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(" ")([ selector(merger(sel$prime)), "{", properties(p), "}\x0a" ]))));
          };
          return Data_Maybe.maybe(q)(o)(nel(sel));
      };
  };
  var rules = function (sel) {
      return function (rs) {
          var queries = function (v) {
              if (v instanceof CSS_Stylesheet.Query) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
              };
              return Data_Maybe.Nothing.value;
          };
          var queryRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(Data_Tuple.uncurry(Data_Function.flip(query$prime)(sel)))(Data_Array.mapMaybe(queries)(rs));
          var property = function (v) {
              if (v instanceof CSS_Stylesheet.Property) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
              };
              return Data_Maybe.Nothing.value;
          };
          var topRules = (function () {
              var rs$prime = Data_Array.mapMaybe(property)(rs);
              var $172 = Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean))(Data_Array["null"])(rs$prime);
              if ($172) {
                  return rule$prime(sel)(rs$prime);
              };
              return Data_Maybe.Nothing.value;
          })();
          var nestedRules = function (a) {
              return rules(Data_Array.cons(a)(sel));
          };
          var nested = function (v) {
              if (v instanceof CSS_Stylesheet.Nested) {
                  return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
              };
              return Data_Maybe.Nothing.value;
          };
          var nestedSheets = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(Data_Functor.map(Data_Functor.functorArray)(Data_Tuple.uncurry(nestedRules))(Data_Array.mapMaybe(nested)(rs)));
          var kframes = function (v) {
              if (v instanceof CSS_Stylesheet.Keyframe) {
                  return new Data_Maybe.Just(v.value0);
              };
              return Data_Maybe.Nothing.value;
          };
          var keyframeRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(kframe)(Data_Array.mapMaybe(kframes)(rs));
          var imports = function (v) {
              if (v instanceof CSS_Stylesheet.Import) {
                  return new Data_Maybe.Just(v.value0);
              };
              return Data_Maybe.Nothing.value;
          };
          var importRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(imp)(Data_Array.mapMaybe(imports)(rs));
          var faces = function (v) {
              if (v instanceof CSS_Stylesheet.Face) {
                  return new Data_Maybe.Just(v.value0);
              };
              return Data_Maybe.Nothing.value;
          };
          var faceRules = Data_Foldable.foldMap(Data_Foldable.foldableArray)(Data_Maybe.monoidMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(face)(Data_Array.mapMaybe(faces)(rs));
          return Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(topRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(importRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(keyframeRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(faceRules)(Data_Semigroup.append(Data_Maybe.semigroupMaybe(Data_These.semigroupThese(semigroupInline)(semigroupFile)))(nestedSheets)(queryRules)))));
      };
  };
  var query$prime = function (q) {
      return function (sel) {
          return function (rs) {
              return Data_Maybe.Just.create(Data_These.That.create(Sheet(mediaQuery(q) + (" { " + (Data_Maybe.fromMaybe("")(renderedSheet(rules(sel)(rs))) + " }\x0a")))));
          };
      };
  };
  var kframe = function (v) {
      var renderContent = " " + (v.value0 + (" { " + (Data_Foldable.intercalate(Data_NonEmpty.foldableNonEmpty(Data_Foldable.foldableArray))(Data_Monoid.monoidString)(" ")(Data_Functor.map(Data_NonEmpty.functorNonEmpty(Data_Functor.functorArray))(Data_Tuple.uncurry(frame))(v.value1)) + " }\x0a")));
      var keywords = [ "@keyframes", "@-webkit-keyframes", "@-moz-keyframes", "@-o-keyframes" ];
      var allKeywordsWithContent = Data_Foldable.fold(Data_Foldable.foldableArray)(Data_Monoid.monoidString)(Data_Functor.map(Data_Functor.functorArray)(function (v1) {
          return v1 + renderContent;
      })(keywords));
      return Data_Maybe.Just.create(Data_These.That.create(Sheet(allKeywordsWithContent)));
  };
  var frame = function (p) {
      return function (rs) {
          var x = Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs)));
          return Data_Show.show(Data_Show.showNumber)(p) + ("% " + ("{ " + (x + " }")));
      };
  };
  var face = function (rs) {
      return Data_Maybe.Just.create(Data_These.That.create(Sheet("@font-face { " + (Data_Maybe.fromMaybe("")(renderedInline(rules([  ])(rs))) + " }\x0a"))));
  };
  var render = function ($191) {
      return rules([  ])(CSS_Stylesheet.runS($191));
  };
  exports["Inline"] = Inline;
  exports["getInline"] = getInline;
  exports["Sheet"] = Sheet;
  exports["getSheet"] = getSheet;
  exports["renderedInline"] = renderedInline;
  exports["renderedSheet"] = renderedSheet;
  exports["render"] = render;
  exports["kframe"] = kframe;
  exports["frame"] = frame;
  exports["mediaQuery"] = mediaQuery;
  exports["mediaType"] = mediaType;
  exports["feature"] = feature;
  exports["face"] = face;
  exports["rules"] = rules;
  exports["imp"] = imp;
  exports["selector"] = selector;
  exports["sepWith"] = sepWith;
  exports["collect"] = collect;
  exports["properties"] = properties;
  exports["merger"] = merger;
  exports["predicate"] = predicate;
  exports["nel"] = nel;
  exports["semigroupInline"] = semigroupInline;
  exports["semigroupFile"] = semigroupFile;
})(PS["CSS.Render"] = PS["CSS.Render"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Const = PS["Data.Const"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var ApF = (function () {
      function ApF(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ApF.create = function (value0) {
          return function (value1) {
              return new ApF(value0, value1);
          };
      };
      return ApF;
  })();
  var Pure = (function () {
      function Pure(value0) {
          this.value0 = value0;
      };
      Pure.create = function (value0) {
          return new Pure(value0);
      };
      return Pure;
  })();
  var Ap = (function () {
      function Ap(value0) {
          this.value0 = value0;
      };
      Ap.create = function (value0) {
          return new Ap(value0);
      };
      return Ap;
  })();
  var retractFreeAp = function (dictApplicative) {
      return function (v) {
          if (v instanceof Pure) {
              return Control_Applicative.pure(dictApplicative)(v.value0);
          };
          if (v instanceof Ap) {
              return Data_Exists.runExists(function (v1) {
                  return Control_Apply.apply(dictApplicative.Apply0())(retractFreeAp(dictApplicative)(v1.value1(Data_Unit.unit)))(v1.value0(Data_Unit.unit));
              })(v.value0);
          };
          throw new Error("Failed pattern match at Control.Applicative.Free line 32, column 1 - line 32, column 64: " + [ v.constructor.name ]);
      };
  };
  var ap = function (v) {
      return function (k) {
          return new Ap(Data_Exists.mkExists(new ApF(v, k)));
      };
  };              
  var hoistFreeAp = function (k) {
      return function (v) {
          if (v instanceof Pure) {
              return new Pure(v.value0);
          };
          if (v instanceof Ap) {
              return Data_Exists.runExists(function (v1) {
                  return ap(function (v3) {
                      return k(v1.value0(Data_Unit.unit));
                  })(function (v3) {
                      return hoistFreeAp(k)(v1.value1(Data_Unit.unit));
                  });
              })(v.value0);
          };
          throw new Error("Failed pattern match at Control.Applicative.Free line 44, column 1 - line 44, column 66: " + [ k.constructor.name, v.constructor.name ]);
      };
  };
  exports["retractFreeAp"] = retractFreeAp;
  exports["hoistFreeAp"] = hoistFreeAp;
})(PS["Control.Applicative.Free"] = PS["Control.Applicative.Free"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var ExceptT = function (x) {
      return x;
  };
  var runExceptT = function (v) {
      return v;
  }; 
  var mapExceptT = function (f) {
      return function (v) {
          return f(v);
      };
  };
  var functorExceptT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return mapExceptT(Data_Functor.map(dictFunctor)(Data_Functor.map(Data_Either.functorEither)(f)));
      });
  };
  var except = function (dictApplicative) {
      return function ($96) {
          return ExceptT(Control_Applicative.pure(dictApplicative)($96));
      };
  };
  var monadExceptT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeExceptT(dictMonad);
      }, function () {
          return bindExceptT(dictMonad);
      });
  };
  var bindExceptT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyExceptT(dictMonad);
      }, function (v) {
          return function (k) {
              return Control_Bind.bind(dictMonad.Bind1())(v)(Data_Either.either(function ($97) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Left.create($97));
              })(function (a) {
                  var v1 = k(a);
                  return v1;
              }));
          };
      });
  };
  var applyExceptT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorExceptT(((dictMonad.Bind1()).Apply0()).Functor0());
      }, Control_Monad.ap(monadExceptT(dictMonad)));
  };
  var applicativeExceptT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyExceptT(dictMonad);
      }, function ($98) {
          return ExceptT(Control_Applicative.pure(dictMonad.Applicative0())(Data_Either.Right.create($98)));
      });
  };
  exports["ExceptT"] = ExceptT;
  exports["runExceptT"] = runExceptT;
  exports["mapExceptT"] = mapExceptT;
  exports["except"] = except;
  exports["functorExceptT"] = functorExceptT;
  exports["applyExceptT"] = applyExceptT;
  exports["applicativeExceptT"] = applicativeExceptT;
  exports["bindExceptT"] = bindExceptT;
  exports["monadExceptT"] = monadExceptT;
})(PS["Control.Monad.Except.Trans"] = PS["Control.Monad.Except.Trans"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];                                                           
  var runExcept = function ($0) {
      return Data_Newtype.unwrap(Data_Identity.newtypeIdentity)(Control_Monad_Except_Trans.runExceptT($0));
  };
  exports["runExcept"] = runExcept;
})(PS["Control.Monad.Except"] = PS["Control.Monad.Except"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Bound = (function () {
      function Bound(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bound.create = function (value0) {
          return function (value1) {
              return new Bound(value0, value1);
          };
      };
      return Bound;
  })();
  var FreeT = (function () {
      function FreeT(value0) {
          this.value0 = value0;
      };
      FreeT.create = function (value0) {
          return new FreeT(value0);
      };
      return FreeT;
  })();
  var Bind = (function () {
      function Bind(value0) {
          this.value0 = value0;
      };
      Bind.create = function (value0) {
          return new Bind(value0);
      };
      return Bind;
  })();
  var monadTransFreeT = function (dictFunctor) {
      return new Control_Monad_Trans_Class.MonadTrans(function (dictMonad) {
          return function (ma) {
              return new FreeT(function (v) {
                  return Data_Functor.map(((dictMonad.Bind1()).Apply0()).Functor0())(Data_Either.Left.create)(ma);
              });
          };
      });
  };
  var freeT = FreeT.create;
  var bound = function (m) {
      return function (f) {
          return new Bind(Data_Exists.mkExists(new Bound(m, f)));
      };
  };
  var functorFreeT = function (dictFunctor) {
      return function (dictFunctor1) {
          return new Data_Functor.Functor(function (f) {
              return function (v) {
                  if (v instanceof FreeT) {
                      return new FreeT(function (v1) {
                          return Data_Functor.map(dictFunctor1)(Data_Bifunctor.bimap(Data_Either.bifunctorEither)(f)(Data_Functor.map(dictFunctor)(Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f))))(v.value0(Data_Unit.unit));
                      });
                  };
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function ($104) {
                              return Data_Functor.map(functorFreeT(dictFunctor)(dictFunctor1))(f)(v1.value1($104));
                          });
                      })(v.value0);
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 58, column 1 - line 58, column 71: " + [ f.constructor.name, v.constructor.name ]);
              };
          });
      };
  };
  var monadFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad.Monad(function () {
              return applicativeFreeT(dictFunctor)(dictMonad);
          }, function () {
              return bindFreeT(dictFunctor)(dictMonad);
          });
      };
  };
  var bindFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Bind.Bind(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (v) {
              return function (f) {
                  if (v instanceof Bind) {
                      return Data_Exists.runExists(function (v1) {
                          return bound(v1.value0)(function (x) {
                              return bound(function (v2) {
                                  return v1.value1(x);
                              })(f);
                          });
                      })(v.value0);
                  };
                  return bound(function (v1) {
                      return v;
                  })(f);
              };
          });
      };
  };
  var applyFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Apply.Apply(function () {
              return functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0());
          }, Control_Monad.ap(monadFreeT(dictFunctor)(dictMonad)));
      };
  };
  var applicativeFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Applicative.Applicative(function () {
              return applyFreeT(dictFunctor)(dictMonad);
          }, function (a) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Left(a));
              });
          });
      };
  };
  var liftFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return function (fa) {
              return new FreeT(function (v) {
                  return Control_Applicative.pure(dictMonad.Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor)(Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad)))(fa)));
              });
          };
      };
  };
  var resume = function (dictFunctor) {
      return function (dictMonadRec) {
          var go = function (v) {
              if (v instanceof FreeT) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(v.value0(Data_Unit.unit));
              };
              if (v instanceof Bind) {
                  return Data_Exists.runExists(function (v1) {
                      var v2 = v1.value0(Data_Unit.unit);
                      if (v2 instanceof FreeT) {
                          return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(v2.value0(Data_Unit.unit))(function (v3) {
                              if (v3 instanceof Data_Either.Left) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(v1.value1(v3.value0)));
                              };
                              if (v3 instanceof Data_Either.Right) {
                                  return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(new Data_Either.Right(Data_Functor.map(dictFunctor)(function (h) {
                                      return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(h)(v1.value1);
                                  })(v3.value0))));
                              };
                              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 53, column 20 - line 55, column 67: " + [ v3.constructor.name ]);
                          });
                      };
                      if (v2 instanceof Bind) {
                          return Data_Exists.runExists(function (v3) {
                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Loop(Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value0(Data_Unit.unit))(function (z) {
                                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonadRec.Monad0()))(v3.value1(z))(v1.value1);
                              })));
                          })(v2.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 51, column 5 - line 56, column 98: " + [ v2.constructor.name ]);
                  })(v.value0);
              };
              throw new Error("Failed pattern match at Control.Monad.Free.Trans line 48, column 3 - line 48, column 75: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  var runFreeT = function (dictFunctor) {
      return function (dictMonadRec) {
          return function (interp) {
              var go = function (v) {
                  if (v instanceof Data_Either.Left) {
                      return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Control_Monad_Rec_Class.Done(v.value0));
                  };
                  if (v instanceof Data_Either.Right) {
                      return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Loop.create)(interp(v.value0));
                  };
                  throw new Error("Failed pattern match at Control.Monad.Free.Trans line 127, column 3 - line 127, column 63: " + [ v.constructor.name ]);
              };
              return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(Control_Bind.composeKleisliFlipped((dictMonadRec.Monad0()).Bind1())(go)(resume(dictFunctor)(dictMonadRec)));
          };
      };
  };
  var monadRecFreeT = function (dictFunctor) {
      return function (dictMonad) {
          return new Control_Monad_Rec_Class.MonadRec(function () {
              return monadFreeT(dictFunctor)(dictMonad);
          }, function (f) {
              var go = function (s) {
                  return Control_Bind.bind(bindFreeT(dictFunctor)(dictMonad))(f(s))(function (v) {
                      if (v instanceof Control_Monad_Rec_Class.Loop) {
                          return go(v.value0);
                      };
                      if (v instanceof Control_Monad_Rec_Class.Done) {
                          return Control_Applicative.pure(applicativeFreeT(dictFunctor)(dictMonad))(v.value0);
                      };
                      throw new Error("Failed pattern match at Control.Monad.Free.Trans line 81, column 15 - line 83, column 25: " + [ v.constructor.name ]);
                  });
              };
              return go;
          });
      };
  };
  exports["freeT"] = freeT;
  exports["liftFreeT"] = liftFreeT;
  exports["resume"] = resume;
  exports["runFreeT"] = runFreeT;
  exports["functorFreeT"] = functorFreeT;
  exports["applyFreeT"] = applyFreeT;
  exports["applicativeFreeT"] = applicativeFreeT;
  exports["bindFreeT"] = bindFreeT;
  exports["monadFreeT"] = monadFreeT;
  exports["monadTransFreeT"] = monadTransFreeT;
  exports["monadRecFreeT"] = monadRecFreeT;
})(PS["Control.Monad.Free.Trans"] = PS["Control.Monad.Free.Trans"] || {});
(function(exports) {
    "use strict";

  exports.newRef = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.readRef = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports["modifyRef'"] = function (ref) {
    return function (f) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.writeRef = function (ref) {
    return function (val) {
      return function () {
        ref.value = val;
        return {};
      };
    };
  };
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var modifyRef = function (ref) {
      return function (f) {
          return $foreign["modifyRef'"](ref)(function (s) {
              return {
                  state: f(s),
                  value: Data_Unit.unit
              };
          });
      };
  };
  exports["modifyRef"] = modifyRef;
  exports["newRef"] = $foreign.newRef;
  exports["readRef"] = $foreign.readRef;
  exports["modifyRef'"] = $foreign["modifyRef'"];
  exports["writeRef"] = $foreign.writeRef;
})(PS["Control.Monad.Eff.Ref"] = PS["Control.Monad.Eff.Ref"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Compose = PS["Data.Functor.Compose"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Parallel = function (Applicative1, Monad0, parallel, sequential) {
      this.Applicative1 = Applicative1;
      this.Monad0 = Monad0;
      this.parallel = parallel;
      this.sequential = sequential;
  };                                                           
  var sequential = function (dict) {
      return dict.sequential;
  };
  var parallel = function (dict) {
      return dict.parallel;
  };
  exports["Parallel"] = Parallel;
  exports["parallel"] = parallel;
  exports["sequential"] = sequential;
})(PS["Control.Parallel.Class"] = PS["Control.Parallel.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Emit = (function () {
      function Emit(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Emit.create = function (value0) {
          return function (value1) {
              return new Emit(value0, value1);
          };
      };
      return Emit;
  })();
  var runProcess = function (dictMonadRec) {
      return Control_Monad_Free_Trans.runFreeT(Data_Identity.functorIdentity)(dictMonadRec)(function ($186) {
          return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(Data_Newtype.unwrap(Data_Identity.newtypeIdentity)($186));
      });
  };
  var profunctorAwait = new Data_Profunctor.Profunctor(function (f) {
      return function (g) {
          return function (v) {
              return Data_Profunctor.dimap(Data_Profunctor.profunctorFn)(f)(g)(v);
          };
      };
  });
  var loop = function (dictFunctor) {
      return function (dictMonad) {
          return function (me) {
              return Control_Monad_Rec_Class.tailRecM(Control_Monad_Free_Trans.monadRecFreeT(dictFunctor)(dictMonad))(function (v) {
                  return Data_Functor.map(Control_Monad_Free_Trans.functorFreeT(dictFunctor)(((dictMonad.Bind1()).Apply0()).Functor0()))(Data_Maybe.maybe(new Control_Monad_Rec_Class.Loop(Data_Unit.unit))(Control_Monad_Rec_Class.Done.create))(me);
              })(Data_Unit.unit);
          };
      };
  };
  var fuseWithL = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (zap) {
                      return function (fs) {
                          return function (gs) {
                              var go = function (v) {
                                  return Control_Monad_Except_Trans.runExceptT(Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0)))(function (v1) {
                                      return Control_Bind.bind(Control_Monad_Except_Trans.bindExceptT(dictMonadRec.Monad0()))(Control_Monad_Except_Trans.ExceptT(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))(function (v2) {
                                          return Control_Applicative.pure(Control_Monad_Except_Trans.applicativeExceptT(dictMonadRec.Monad0()))(Data_Functor.map(dictFunctor2)(function (t) {
                                              return Control_Monad_Free_Trans.freeT(function (v3) {
                                                  return go(t);
                                              });
                                          })(zap(Data_Tuple.Tuple.create)(v1)(v2)));
                                      });
                                  }));
                              };
                              return Control_Monad_Free_Trans.freeT(function (v) {
                                  return go(new Data_Tuple.Tuple(fs, gs));
                              });
                          };
                      };
                  };
              };
          };
      };
  };
  var fuseWith = function (dictFunctor) {
      return function (dictFunctor1) {
          return function (dictFunctor2) {
              return function (dictMonadRec) {
                  return function (dictParallel) {
                      return function (zap) {
                          return function (fs) {
                              return function (gs) {
                                  var go = function (v) {
                                      return Control_Bind.bind((dictMonadRec.Monad0()).Bind1())(Control_Parallel_Class.sequential(dictParallel)(Control_Apply.apply((dictParallel.Applicative1()).Apply0())(Data_Functor.map(((dictParallel.Applicative1()).Apply0()).Functor0())(Control_Apply.lift2(Data_Either.applyEither)(zap(Data_Tuple.Tuple.create)))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor)(dictMonadRec)(v.value0))))(Control_Parallel_Class.parallel(dictParallel)(Control_Monad_Free_Trans.resume(dictFunctor1)(dictMonadRec)(v.value1)))))(function (v1) {
                                          if (v1 instanceof Data_Either.Left) {
                                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Left(v1.value0));
                                          };
                                          if (v1 instanceof Data_Either.Right) {
                                              return Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(new Data_Either.Right(Data_Functor.map(dictFunctor2)(function (t) {
                                                  return Control_Monad_Free_Trans.freeT(function (v2) {
                                                      return go(t);
                                                  });
                                              })(v1.value0)));
                                          };
                                          throw new Error("Failed pattern match at Control.Coroutine line 80, column 5 - line 82, column 63: " + [ v1.constructor.name ]);
                                      });
                                  };
                                  return Control_Monad_Free_Trans.freeT(function (v) {
                                      return go(new Data_Tuple.Tuple(fs, gs));
                                  });
                              };
                          };
                      };
                  };
              };
          };
      };
  };
  var functorAwait = new Data_Functor.Functor(Data_Profunctor.rmap(profunctorAwait));
  var bifunctorEmit = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return new Emit(f(v.value0), g(v.value1));
          };
      };
  });
  var functorEmit = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorEmit));
  var connect = function (dictMonadRec) {
      return function (dictParallel) {
          return fuseWith(functorEmit)(functorAwait)(Data_Identity.functorIdentity)(dictMonadRec)(dictParallel)(function (f) {
              return function (v) {
                  return function (v1) {
                      return f(v.value1)(v1(v.value0));
                  };
              };
          });
      };
  };
  var emit = function (dictMonad) {
      return function (o) {
          return Control_Monad_Free_Trans.liftFreeT(functorEmit)(dictMonad)(new Emit(o, Data_Unit.unit));
      };
  };
  var producer = function (dictMonad) {
      return function (recv) {
          return loop(functorEmit)(dictMonad)(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(functorEmit)(dictMonad))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(functorEmit))(dictMonad)(recv))(function (v) {
              if (v instanceof Data_Either.Left) {
                  return Data_Functor.voidLeft(Control_Monad_Free_Trans.functorFreeT(functorEmit)(((dictMonad.Bind1()).Apply0()).Functor0()))(emit(dictMonad)(v.value0))(Data_Maybe.Nothing.value);
              };
              if (v instanceof Data_Either.Right) {
                  return Control_Applicative.pure(Control_Monad_Free_Trans.applicativeFreeT(functorEmit)(dictMonad))(new Data_Maybe.Just(v.value0));
              };
              throw new Error("Failed pattern match at Control.Coroutine line 126, column 3 - line 128, column 29: " + [ v.constructor.name ]);
          }));
      };
  };
  var pullFrom = function (dictMonadRec) {
      return fuseWithL(functorAwait)(functorEmit)(Data_Identity.functorIdentity)(dictMonadRec)(function (f) {
          return function (v) {
              return function (v1) {
                  return Control_Applicative.pure(Data_Identity.applicativeIdentity)(f(v(v1.value0))(v1.value1));
              };
          };
      });
  };
  var $$await = function (dictMonad) {
      return Control_Monad_Free_Trans.liftFreeT(functorAwait)(dictMonad)(Control_Category.id(Control_Category.categoryFn));
  };
  exports["loop"] = loop;
  exports["runProcess"] = runProcess;
  exports["fuseWith"] = fuseWith;
  exports["fuseWithL"] = fuseWithL;
  exports["Emit"] = Emit;
  exports["emit"] = emit;
  exports["producer"] = producer;
  exports["await"] = $$await;
  exports["connect"] = connect;
  exports["pullFrom"] = pullFrom;
  exports["bifunctorEmit"] = bifunctorEmit;
  exports["functorEmit"] = functorEmit;
  exports["profunctorAwait"] = profunctorAwait;
  exports["functorAwait"] = functorAwait;
})(PS["Control.Coroutine"] = PS["Control.Coroutine"] || {});
(function(exports) {
  /* globals setTimeout, clearTimeout, setImmediate, clearImmediate */
  "use strict";

  exports._cancelWith = function (nonCanceler, aff, canceler1) {
    return function (success, error) {
      var canceler2 = aff(success, error);

      return function (e) {
        return function (success, error) {
          var cancellations = 0;
          var result = false;
          var errored = false;

          var s = function (bool) {
            cancellations = cancellations + 1;
            result = result || bool;

            if (cancellations === 2 && !errored) {
              success(result);
            }
          };

          var f = function (err) {
            if (!errored) {
              errored = true;
              error(err);
            }
          };

          canceler2(e)(s, f);
          canceler1(e)(s, f);

          return nonCanceler;
        };
      };
    };
  };

  exports._delay = function (nonCanceler, millis) {
    var set = setTimeout;
    var clear = clearTimeout;
    if (millis <= 0 && typeof setImmediate === "function") {
      set = setImmediate;
      clear = clearImmediate;
    }
    return function (success) {
      var timedOut = false;
      var timer = set(function () {
        timedOut = true;
        success();
      }, millis);

      return function () {
        return function (s) {
          if (timedOut) {
            s(false);
          } else {
            clear(timer);
            s(true);
          }
          return nonCanceler;
        };
      };
    };
  };

  exports._forkAff = function (nonCanceler, aff) {
    var voidF = function () {};

    return function (success) {
      var canceler = aff(voidF, voidF);
      success(canceler);
      return nonCanceler;
    };
  };

  exports._forkAll = function (nonCanceler, foldl, affs) {
    var voidF = function () {};

    return function (success) {
      var cancelers = foldl(function (acc) {
        return function (aff) {
          acc.push(aff(voidF, voidF));
          return acc;
        };
      })([])(affs);

      var canceler = function (e) {
        return function (success, error) {
          var cancellations = 0;
          var result        = false;
          var errored       = false;

          var s = function (bool) {
            cancellations = cancellations + 1;
            result        = result || bool;

            if (cancellations === cancelers.length && !errored) {
              success(result);
            }
          };

          var f = function (err) {
            if (!errored) {
              errored = true;
              error(err);
            }
          };

          for (var i = 0; i < cancelers.length; i++) {
            cancelers[i](e)(s, f);
          }

          return nonCanceler;
        };
      };

      success(canceler);
      return nonCanceler;
    };
  };

  exports._makeAff = function (cb) {
    return function (success, error) {
      try {
        return cb(function (e) {
          return function () {
            error(e);
          };
        })(function (v) {
          return function () {
            success(v);
          };
        })();
      } catch (err) {
        error(err);
      }
    };
  };

  exports._pure = function (nonCanceler, v) {
    return function (success) {
      success(v);
      return nonCanceler;
    };
  };

  exports._throwError = function (nonCanceler, e) {
    return function (success, error) {
      error(e);
      return nonCanceler;
    };
  };

  exports._fmap = function (f, aff) {
    return function (success, error) {
      return aff(function (v) {
        success(f(v));
      }, error);
    };
  };

  exports._bind = function (alwaysCanceler, aff, f) {
    return function (success, error) {
      var canceler1, canceler2;

      var isCanceled    = false;
      var requestCancel = false;

      var onCanceler = function () {};

      canceler1 = aff(function (v) {
        if (requestCancel) {
          isCanceled = true;

          return alwaysCanceler;
        } else {
          canceler2 = f(v)(success, error);

          onCanceler(canceler2);

          return canceler2;
        }
      }, error);

      return function (e) {
        return function (s, f) {
          requestCancel = true;

          if (canceler2 !== undefined) {
            return canceler2(e)(s, f);
          } else {
            return canceler1(e)(function (bool) {
              if (bool || isCanceled) {
                s(true);
              } else {
                onCanceler = function (canceler) {
                  canceler(e)(s, f);
                };
              }
            }, f);
          }
        };
      };
    };
  };

  exports._attempt = function (Left, Right, aff) {
    return function (success) {
      return aff(function (v) {
        success(Right(v));
      }, function (e) {
        success(Left(e));
      });
    };
  };

  exports._runAff = function (errorT, successT, aff) {
    // If errorT or successT throw, and an Aff is comprised only of synchronous
    // effects, then it's possible for makeAff/liftEff to accidentally catch
    // it, which may end up rerunning the Aff depending on error recovery
    // behavior. To mitigate this, we observe synchronicity using mutation. If
    // an Aff is observed to be synchronous, we let the stack reset and run the
    // handlers outside of the normal callback flow.
    return function () {
      var status = 0;
      var result, success;

      var canceler = aff(function (v) {
        if (status === 2) {
          successT(v)();
        } else {
          status = 1;
          result = v;
          success = true;
        }
      }, function (e) {
        if (status === 2) {
          errorT(e)();
        } else {
          status = 1;
          result = e;
          success = false;
        }
      });

      if (status === 1) {
        if (success) {
          successT(result)();
        } else {
          errorT(result)();
        }
      } else {
        status = 2;
      }

      return canceler;
    };
  };

  exports._liftEff = function (nonCanceler, e) {
    return function (success, error) {
      var result;
      try {
        result = e();
      } catch (err) {
        error(err);
        return nonCanceler;
      }

      success(result);
      return nonCanceler;
    };
  };

  exports._tailRecM = function (isLeft, f, a) {
    return function (success, error) {
      return function go (acc) {
        var result, status, canceler;

        // Observes synchronous effects using a flag.
        //   status = 0 (unresolved status)
        //   status = 1 (synchronous effect)
        //   status = 2 (asynchronous effect)

        var csuccess = function (v) {
          // If the status is still unresolved, we have observed a
          // synchronous effect. Otherwise, the status will be `2`.
          if (status === 0) {
            // Store the result for further synchronous processing.
            result = v;
            status = 1;
          } else {
            // When we have observed an asynchronous effect, we use normal
            // recursion. This is safe because we will be on a new stack.
            if (isLeft(v)) {
              go(v.value0);
            } else {
              success(v.value0);
            }
          }
        };

        while (true) {
          status = 0;
          canceler = f(acc)(csuccess, error);

          // If the status has already resolved to `1` by our Aff handler, then
          // we have observed a synchronous effect. Otherwise it will still be
          // `0`.
          if (status === 1) {
            // When we have observed a synchronous effect, we merely swap out the
            // accumulator and continue the loop, preserving stack.
            if (isLeft(result)) {
              acc = result.value0;
              continue;
            } else {
              success(result.value0);
            }
          } else {
            // If the status has not resolved yet, then we have observed an
            // asynchronous effect.
            status = 2;
          }
          return canceler;
        }

      }(a);
    };
  };
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
    "use strict";

  exports._makeVar = function (nonCanceler) {
    return function (success) {
      success({
        consumers: [],
        producers: [],
        error: undefined
      });
      return nonCanceler;
    };
  };

  exports._takeVar = function (nonCanceler, avar) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else if (avar.producers.length > 0) {
        avar.producers.shift()(success, error);
      } else {
        avar.consumers.push({ peek: false, success: success, error: error });
      }

      return nonCanceler;
    };
  };

  exports._peekVar = function (nonCanceler, avar) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else if (avar.producers.length > 0) {
        avar.producers[0](success, error);
      } else {
        avar.consumers.push({ peek: true, success: success, error: error });
      }
      return nonCanceler;
    };
  };

  exports._putVar = function (nonCanceler, avar, a) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else {
        var shouldQueue = true;
        var consumers = [];
        var consumer;

        while (true) {
          consumer = avar.consumers.shift();
          if (consumer) {
            consumers.push(consumer);
            if (consumer.peek) {
              continue;
            } else {
              shouldQueue = false;
            }
          }
          break;
        }

        if (shouldQueue) {
          avar.producers.push(function (success) {
            success(a);
            return nonCanceler;
          });
        }

        for (var i = 0; i < consumers.length; i++) {
          consumers[i].success(a);
        }

        success({});
      }

      return nonCanceler;
    };
  };

  exports._killVar = function (nonCanceler, avar, e) {
    return function (success, error) {
      if (avar.error !== undefined) {
        error(avar.error);
      } else {
        avar.error = e;
        while (avar.consumers.length) {
          avar.consumers.shift().error(e);
        }
        success({});
      }

      return nonCanceler;
    };
  };
})(PS["Control.Monad.Aff.Internal"] = PS["Control.Monad.Aff.Internal"] || {});
(function(exports) {
    "use strict";

  exports.error = function (msg) {
    return new Error(msg);
  };

  exports.throwException = function (e) {
    return function () {
      throw e;
    };
  };
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Exception"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];
  var $$throw = function ($1) {
      return $foreign.throwException($foreign.error($1));
  };
  exports["throw"] = $$throw;
  exports["error"] = $foreign.error;
  exports["throwException"] = $foreign.throwException;
})(PS["Control.Monad.Eff.Exception"] = PS["Control.Monad.Eff.Exception"] || {});
(function(exports) {
    "use strict";

  exports.runFn4 = function (fn) {
    return function (a) {
      return function (b) {
        return function (c) {
          return function (d) {
            return fn(a, b, c, d);
          };
        };
      };
    };
  };
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Function.Uncurried"];
  var Data_Unit = PS["Data.Unit"];
  exports["runFn4"] = $foreign.runFn4;
})(PS["Data.Function.Uncurried"] = PS["Data.Function.Uncurried"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  exports["_makeVar"] = $foreign._makeVar;
  exports["_takeVar"] = $foreign._takeVar;
  exports["_peekVar"] = $foreign._peekVar;
  exports["_putVar"] = $foreign._putVar;
  exports["_killVar"] = $foreign._killVar;
})(PS["Control.Monad.Aff.Internal"] = PS["Control.Monad.Aff.Internal"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Control.Monad.Aff"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ParAff = function (x) {
      return x;
  };
  var runAff = function (ex) {
      return function (f) {
          return function (aff) {
              return $foreign._runAff(ex, f, aff);
          };
      };
  };         
  var makeAff$prime = function (h) {
      return $foreign._makeAff(h);
  };
  var functorAff = new Data_Functor.Functor(function (f) {
      return function (fa) {
          return $foreign._fmap(f, fa);
      };
  });
  var functorParAff = functorAff;
  var fromAVBox = Unsafe_Coerce.unsafeCoerce;
  var cancel = function (v) {
      return v;
  };   
  var attempt = function (aff) {
      return $foreign._attempt(Data_Either.Left.create, Data_Either.Right.create, aff);
  };
  var applyAff = new Control_Apply.Apply(function () {
      return functorAff;
  }, function (ff) {
      return function (fa) {
          return $foreign._bind(alwaysCanceler, ff, function (f) {
              return Data_Functor.map(functorAff)(f)(fa);
          });
      };
  });
  var applicativeAff = new Control_Applicative.Applicative(function () {
      return applyAff;
  }, function (v) {
      return $foreign._pure(nonCanceler, v);
  });
  var nonCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(false));
  var alwaysCanceler = Data_Function["const"](Control_Applicative.pure(applicativeAff)(true));
  var cancelWith = function (aff) {
      return function (c) {
          return $foreign._cancelWith(nonCanceler, aff, c);
      };
  };
  var delay = function (v) {
      return $foreign._delay(nonCanceler, v);
  };
  var forkAff = function (aff) {
      return $foreign._forkAff(nonCanceler, aff);
  };
  var forkAll = function (dictFoldable) {
      return function (affs) {
          return $foreign._forkAll(nonCanceler, Data_Foldable.foldl(dictFoldable), affs);
      };
  };
  var killVar = function (q) {
      return function (e) {
          return fromAVBox(Control_Monad_Aff_Internal._killVar(nonCanceler, q, e));
      };
  };
  var makeAff = function (h) {
      return makeAff$prime(function (e) {
          return function (a) {
              return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Function["const"](nonCanceler))(h(e)(a));
          };
      });
  };
  var makeVar = fromAVBox(Control_Monad_Aff_Internal._makeVar(nonCanceler));
  var putVar = function (q) {
      return function (a) {
          return fromAVBox(Control_Monad_Aff_Internal._putVar(nonCanceler, q, a));
      };
  };
  var takeVar = function (q) {
      return fromAVBox(Control_Monad_Aff_Internal._takeVar(nonCanceler, q));
  };
  var semigroupCanceler = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return function (e) {
              return Control_Apply.apply(applyAff)(Data_Functor.map(functorAff)(Data_HeytingAlgebra.disj(Data_HeytingAlgebra.heytingAlgebraBoolean))(v(e)))(v1(e));
          };
      };
  });                                                                        
  var bindAff = new Control_Bind.Bind(function () {
      return applyAff;
  }, function (fa) {
      return function (f) {
          return $foreign._bind(alwaysCanceler, fa, f);
      };
  });
  var applyParAff = new Control_Apply.Apply(function () {
      return functorParAff;
  }, function (v) {
      return function (v1) {
          var putOrKill = function (v2) {
              return Data_Either.either(killVar(v2))(putVar(v2));
          };
          return Control_Bind.bind(bindAff)(makeVar)(function (v2) {
              return Control_Bind.bind(bindAff)(makeVar)(function (v3) {
                  return Control_Bind.bind(bindAff)(forkAff(Control_Bind.bindFlipped(bindAff)(putOrKill(v2))(attempt(v))))(function (v4) {
                      return Control_Bind.bind(bindAff)(forkAff(Control_Bind.bindFlipped(bindAff)(putOrKill(v3))(attempt(v1))))(function (v5) {
                          return cancelWith(Control_Apply.apply(applyAff)(takeVar(v2))(takeVar(v3)))(Data_Semigroup.append(semigroupCanceler)(v4)(v5));
                      });
                  });
              });
          });
      };
  });
  var applicativeParAff = new Control_Applicative.Applicative(function () {
      return applyParAff;
  }, function ($56) {
      return ParAff(Control_Applicative.pure(applicativeAff)($56));
  });
  var monadAff = new Control_Monad.Monad(function () {
      return applicativeAff;
  }, function () {
      return bindAff;
  });
  var monadEffAff = new Control_Monad_Eff_Class.MonadEff(function () {
      return monadAff;
  }, function (eff) {
      return $foreign._liftEff(nonCanceler, eff);
  });
  var monadRecAff = new Control_Monad_Rec_Class.MonadRec(function () {
      return monadAff;
  }, function (f) {
      return function (a) {
          var isLoop = function (v) {
              if (v instanceof Control_Monad_Rec_Class.Loop) {
                  return true;
              };
              return false;
          };
          return $foreign._tailRecM(isLoop, f, a);
      };
  });
  var monadThrowAff = new Control_Monad_Error_Class.MonadThrow(function () {
      return monadAff;
  }, function (e) {
      return $foreign._throwError(nonCanceler, e);
  });
  var parallelParAff = new Control_Parallel_Class.Parallel(function () {
      return applicativeParAff;
  }, function () {
      return monadAff;
  }, ParAff, function (v) {
      return v;
  });
  exports["attempt"] = attempt;
  exports["cancel"] = cancel;
  exports["cancelWith"] = cancelWith;
  exports["forkAff"] = forkAff;
  exports["forkAll"] = forkAll;
  exports["delay"] = delay;
  exports["makeAff"] = makeAff;
  exports["nonCanceler"] = nonCanceler;
  exports["runAff"] = runAff;
  exports["ParAff"] = ParAff;
  exports["functorAff"] = functorAff;
  exports["applyAff"] = applyAff;
  exports["applicativeAff"] = applicativeAff;
  exports["bindAff"] = bindAff;
  exports["monadAff"] = monadAff;
  exports["monadEffAff"] = monadEffAff;
  exports["monadThrowAff"] = monadThrowAff;
  exports["monadRecAff"] = monadRecAff;
  exports["semigroupCanceler"] = semigroupCanceler;
  exports["functorParAff"] = functorParAff;
  exports["applyParAff"] = applyParAff;
  exports["applicativeParAff"] = applicativeParAff;
  exports["parallelParAff"] = parallelParAff;
})(PS["Control.Monad.Aff"] = PS["Control.Monad.Aff"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Internal = PS["Control.Monad.Aff.Internal"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var fromAVBox = Unsafe_Coerce.unsafeCoerce;
  var killVar = function (q) {
      return function (e) {
          return fromAVBox(Control_Monad_Aff_Internal._killVar(Control_Monad_Aff.nonCanceler, q, e));
      };
  };
  var makeVar = fromAVBox(Control_Monad_Aff_Internal._makeVar(Control_Monad_Aff.nonCanceler));
  var peekVar = function (q) {
      return fromAVBox(Control_Monad_Aff_Internal._peekVar(Control_Monad_Aff.nonCanceler, q));
  };
  var putVar = function (q) {
      return function (a) {
          return fromAVBox(Control_Monad_Aff_Internal._putVar(Control_Monad_Aff.nonCanceler, q, a));
      };
  };
  var takeVar = function (q) {
      return fromAVBox(Control_Monad_Aff_Internal._takeVar(Control_Monad_Aff.nonCanceler, q));
  };
  exports["makeVar"] = makeVar;
  exports["takeVar"] = takeVar;
  exports["peekVar"] = peekVar;
  exports["putVar"] = putVar;
  exports["killVar"] = killVar;
})(PS["Control.Monad.Aff.AVar"] = PS["Control.Monad.Aff.AVar"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Cont_Trans = PS["Control.Monad.Cont.Trans"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Monad_List_Trans = PS["Control.Monad.List.Trans"];
  var Control_Monad_Maybe_Trans = PS["Control.Monad.Maybe.Trans"];
  var Control_Monad_RWS_Trans = PS["Control.Monad.RWS.Trans"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Trans = PS["Control.Monad.Writer.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Monoid = PS["Data.Monoid"];
  var Prelude = PS["Prelude"];        
  var MonadAff = function (MonadEff0, liftAff) {
      this.MonadEff0 = MonadEff0;
      this.liftAff = liftAff;
  };
  var monadAffAff = new MonadAff(function () {
      return Control_Monad_Aff.monadEffAff;
  }, Control_Category.id(Control_Category.categoryFn));
  var liftAff = function (dict) {
      return dict.liftAff;
  };
  exports["liftAff"] = liftAff;
  exports["MonadAff"] = MonadAff;
  exports["monadAffAff"] = monadAffAff;
})(PS["Control.Monad.Aff.Class"] = PS["Control.Monad.Aff.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var unsafeCoerceAff = Unsafe_Coerce.unsafeCoerce;
  exports["unsafeCoerceAff"] = unsafeCoerceAff;
})(PS["Control.Monad.Aff.Unsafe"] = PS["Control.Monad.Aff.Unsafe"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Reader_Trans = PS["Control.Monad.Reader.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];        
  var MonadFork = function (Monad0, fork) {
      this.Monad0 = Monad0;
      this.fork = fork;
  };
  var monadForkAff = new MonadFork(function () {
      return Control_Monad_Aff.monadAff;
  }, function ($3) {
      return Data_Functor.map(Control_Monad_Aff.functorAff)(Control_Monad_Aff.cancel)(Control_Monad_Aff.forkAff($3));
  });
  var fork = function (dict) {
      return dict.fork;
  };
  exports["fork"] = fork;
  exports["MonadFork"] = MonadFork;
  exports["monadForkAff"] = monadForkAff;
})(PS["Control.Monad.Fork.Class"] = PS["Control.Monad.Fork.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semigroup_Foldable = PS["Data.Semigroup.Foldable"];
  var Data_Semigroup_Traversable = PS["Data.Semigroup.Traversable"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var NonEmptyList = function (x) {
      return x;
  };
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($158) {
                  return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f($158));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function ($copy_b) {
          return function ($copy_v) {
              var $tco_var_b = $copy_b;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(b, v) {
                  if (v instanceof Nil) {
                      $tco_done = true;
                      return b;
                  };
                  if (v instanceof Cons) {
                      $tco_var_b = f(b)(v.value0);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 81, column 12 - line 83, column 30: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_b, $copy_v);
              };
              return $tco_result;
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          var rev = Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value);
          return function ($159) {
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev($159));
          };
      };
  });
  var functorList = new Data_Functor.Functor(function (f) {
      return Data_Foldable.foldr(foldableList)(function (x) {
          return function (acc) {
              return new Cons(f(x), acc);
          };
      })(Nil.value);
  });
  var functorNonEmptyList = Data_NonEmpty.functorNonEmpty(functorList);
  var semigroupList = new Data_Semigroup.Semigroup(function (xs) {
      return function (ys) {
          return Data_Foldable.foldr(foldableList)(Cons.create)(ys)(xs);
      };
  });
  var traversableList = new Data_Traversable.Traversable(function () {
      return foldableList;
  }, function () {
      return functorList;
  }, function (dictApplicative) {
      return Data_Traversable.traverse(traversableList)(dictApplicative)(Control_Category.id(Control_Category.categoryFn));
  }, function (dictApplicative) {
      return function (f) {
          return function ($162) {
              return Data_Functor.map((dictApplicative.Apply0()).Functor0())(Data_Foldable.foldl(foldableList)(Data_Function.flip(Cons.create))(Nil.value))(Data_Foldable.foldl(foldableList)(function (acc) {
                  return function ($163) {
                      return Control_Apply.lift2(dictApplicative.Apply0())(Data_Function.flip(Cons.create))(acc)(f($163));
                  };
              })(Control_Applicative.pure(dictApplicative)(Nil.value))($162));
          };
      };
  });
  var applyList = new Control_Apply.Apply(function () {
      return functorList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(Data_Functor.map(functorList)(v.value0)(v1))(Control_Apply.apply(applyList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 120, column 1 - line 120, column 33: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyNonEmptyList = new Control_Apply.Apply(function () {
      return functorNonEmptyList;
  }, function (v) {
      return function (v1) {
          return new Data_NonEmpty.NonEmpty(v.value0(v1.value0), Data_Semigroup.append(semigroupList)(Control_Apply.apply(applyList)(v.value1)(new Cons(v1.value0, Nil.value)))(Control_Apply.apply(applyList)(new Cons(v.value0, v.value1))(v1.value1)));
      };
  });
  var bindList = new Control_Bind.Bind(function () {
      return applyList;
  }, function (v) {
      return function (v1) {
          if (v instanceof Nil) {
              return Nil.value;
          };
          if (v instanceof Cons) {
              return Data_Semigroup.append(semigroupList)(v1(v.value0))(Control_Bind.bind(bindList)(v.value1)(v1));
          };
          throw new Error("Failed pattern match at Data.List.Types line 127, column 1 - line 127, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeList = new Control_Applicative.Applicative(function () {
      return applyList;
  }, function (a) {
      return new Cons(a, Nil.value);
  });                                              
  var altList = new Control_Alt.Alt(function () {
      return functorList;
  }, Data_Semigroup.append(semigroupList));
  var plusList = new Control_Plus.Plus(function () {
      return altList;
  }, Nil.value);
  var applicativeNonEmptyList = new Control_Applicative.Applicative(function () {
      return applyNonEmptyList;
  }, function ($168) {
      return NonEmptyList(Data_NonEmpty.singleton(plusList)($168));
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["NonEmptyList"] = NonEmptyList;
  exports["semigroupList"] = semigroupList;
  exports["functorList"] = functorList;
  exports["foldableList"] = foldableList;
  exports["traversableList"] = traversableList;
  exports["applyList"] = applyList;
  exports["applicativeList"] = applicativeList;
  exports["bindList"] = bindList;
  exports["altList"] = altList;
  exports["plusList"] = plusList;
  exports["functorNonEmptyList"] = functorNonEmptyList;
  exports["applyNonEmptyList"] = applyNonEmptyList;
  exports["applicativeNonEmptyList"] = applicativeNonEmptyList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var singleton = function (a) {
      return new Data_List_Types.Cons(a, Data_List_Types.Nil.value);
  };
  var reverse = (function () {
      var go = function ($copy_acc) {
          return function ($copy_v) {
              var $tco_var_acc = $copy_acc;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(acc, v) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return acc;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      $tco_var_acc = new Data_List_Types.Cons(v.value0, acc);
                      $copy_v = v.value1;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.List line 368, column 3 - line 368, column 19: " + [ acc.constructor.name, v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_acc, $copy_v);
              };
              return $tco_result;
          };
      };
      return go(Data_List_Types.Nil.value);
  })();
  var $$null = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
  exports["singleton"] = singleton;
  exports["null"] = $$null;
  exports["reverse"] = reverse;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Tuple = PS["Data.Tuple"];        
  var CatQueue = (function () {
      function CatQueue(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatQueue.create = function (value0) {
          return function (value1) {
              return new CatQueue(value0, value1);
          };
      };
      return CatQueue;
  })();
  var uncons = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
              $tco_done = true;
              return Data_Maybe.Nothing.value;
          };
          if (v.value0 instanceof Data_List_Types.Nil) {
              $copy_v = new CatQueue(Data_List.reverse(v.value1), Data_List_Types.Nil.value);
              return;
          };
          if (v.value0 instanceof Data_List_Types.Cons) {
              $tco_done = true;
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0.value0, new CatQueue(v.value0.value1, v.value1)));
          };
          throw new Error("Failed pattern match at Data.CatQueue line 50, column 1 - line 50, column 63: " + [ v.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var snoc = function (v) {
      return function (a) {
          return new CatQueue(v.value0, new Data_List_Types.Cons(a, v.value1));
      };
  };
  var $$null = function (v) {
      if (v.value0 instanceof Data_List_Types.Nil && v.value1 instanceof Data_List_Types.Nil) {
          return true;
      };
      return false;
  };
  var empty = new CatQueue(Data_List_Types.Nil.value, Data_List_Types.Nil.value);
  exports["CatQueue"] = CatQueue;
  exports["empty"] = empty;
  exports["null"] = $$null;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
})(PS["Data.CatQueue"] = PS["Data.CatQueue"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_CatQueue = PS["Data.CatQueue"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_NaturalTransformation = PS["Data.NaturalTransformation"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];        
  var CatNil = (function () {
      function CatNil() {

      };
      CatNil.value = new CatNil();
      return CatNil;
  })();
  var CatCons = (function () {
      function CatCons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CatCons.create = function (value0) {
          return function (value1) {
              return new CatCons(value0, value1);
          };
      };
      return CatCons;
  })();
  var link = function (v) {
      return function (cat) {
          if (v instanceof CatNil) {
              return cat;
          };
          if (v instanceof CatCons) {
              return new CatCons(v.value0, Data_CatQueue.snoc(v.value1)(cat));
          };
          throw new Error("Failed pattern match at Data.CatList line 110, column 1 - line 110, column 54: " + [ v.constructor.name, cat.constructor.name ]);
      };
  };
  var foldr = function (k) {
      return function (b) {
          return function (q) {
              var foldl = function ($copy_v) {
                  return function ($copy_c) {
                      return function ($copy_v1) {
                          var $tco_var_v = $copy_v;
                          var $tco_var_c = $copy_c;
                          var $tco_done = false;
                          var $tco_result;
                          function $tco_loop(v, c, v1) {
                              if (v1 instanceof Data_List_Types.Nil) {
                                  $tco_done = true;
                                  return c;
                              };
                              if (v1 instanceof Data_List_Types.Cons) {
                                  $tco_var_v = v;
                                  $tco_var_c = v(c)(v1.value0);
                                  $copy_v1 = v1.value1;
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.CatList line 125, column 3 - line 125, column 59: " + [ v.constructor.name, c.constructor.name, v1.constructor.name ]);
                          };
                          while (!$tco_done) {
                              $tco_result = $tco_loop($tco_var_v, $tco_var_c, $copy_v1);
                          };
                          return $tco_result;
                      };
                  };
              };
              var go = function ($copy_xs) {
                  return function ($copy_ys) {
                      var $tco_var_xs = $copy_xs;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(xs, ys) {
                          var v = Data_CatQueue.uncons(xs);
                          if (v instanceof Data_Maybe.Nothing) {
                              $tco_done = true;
                              return foldl(function (x) {
                                  return function (i) {
                                      return i(x);
                                  };
                              })(b)(ys);
                          };
                          if (v instanceof Data_Maybe.Just) {
                              $tco_var_xs = v.value0.value1;
                              $copy_ys = new Data_List_Types.Cons(k(v.value0.value0), ys);
                              return;
                          };
                          throw new Error("Failed pattern match at Data.CatList line 121, column 14 - line 123, column 67: " + [ v.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_xs, $copy_ys);
                      };
                      return $tco_result;
                  };
              };
              return go(q)(Data_List_Types.Nil.value);
          };
      };
  };
  var uncons = function (v) {
      if (v instanceof CatNil) {
          return Data_Maybe.Nothing.value;
      };
      if (v instanceof CatCons) {
          return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, (function () {
              var $41 = Data_CatQueue["null"](v.value1);
              if ($41) {
                  return CatNil.value;
              };
              return foldr(link)(CatNil.value)(v.value1);
          })()));
      };
      throw new Error("Failed pattern match at Data.CatList line 101, column 1 - line 101, column 61: " + [ v.constructor.name ]);
  }; 
  var empty = CatNil.value;
  var append = function (v) {
      return function (v1) {
          if (v1 instanceof CatNil) {
              return v;
          };
          if (v instanceof CatNil) {
              return v1;
          };
          return link(v)(v1);
      };
  }; 
  var semigroupCatList = new Data_Semigroup.Semigroup(append);
  var snoc = function (cat) {
      return function (a) {
          return append(cat)(new CatCons(a, Data_CatQueue.empty));
      };
  };
  exports["CatNil"] = CatNil;
  exports["CatCons"] = CatCons;
  exports["empty"] = empty;
  exports["append"] = append;
  exports["snoc"] = snoc;
  exports["uncons"] = uncons;
  exports["semigroupCatList"] = semigroupCatList;
})(PS["Data.CatList"] = PS["Data.CatList"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_CatList = PS["Data.CatList"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Free = (function () {
      function Free(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Free.create = function (value0) {
          return function (value1) {
              return new Free(value0, value1);
          };
      };
      return Free;
  })();
  var Return = (function () {
      function Return(value0) {
          this.value0 = value0;
      };
      Return.create = function (value0) {
          return new Return(value0);
      };
      return Return;
  })();
  var Bind = (function () {
      function Bind(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Bind.create = function (value0) {
          return function (value1) {
              return new Bind(value0, value1);
          };
      };
      return Bind;
  })();
  var toView = function ($copy_v) {
      var $tco_done = false;
      var $tco_result;
      function $tco_loop(v) {
          var runExpF = function (v2) {
              return v2;
          };
          var concatF = function (v2) {
              return function (r) {
                  return new Free(v2.value0, Data_Semigroup.append(Data_CatList.semigroupCatList)(v2.value1)(r));
              };
          };
          if (v.value0 instanceof Return) {
              var v2 = Data_CatList.uncons(v.value1);
              if (v2 instanceof Data_Maybe.Nothing) {
                  $tco_done = true;
                  return new Return(v.value0.value0);
              };
              if (v2 instanceof Data_Maybe.Just) {
                  $copy_v = concatF(runExpF(v2.value0.value0)(v.value0.value0))(v2.value0.value1);
                  return;
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 215, column 7 - line 219, column 64: " + [ v2.constructor.name ]);
          };
          if (v.value0 instanceof Bind) {
              $tco_done = true;
              return new Bind(v.value0.value0, function (a) {
                  return concatF(v.value0.value1(a))(v.value1);
              });
          };
          throw new Error("Failed pattern match at Control.Monad.Free line 213, column 3 - line 221, column 56: " + [ v.value0.constructor.name ]);
      };
      while (!$tco_done) {
          $tco_result = $tco_loop($copy_v);
      };
      return $tco_result;
  };
  var fromView = function (f) {
      return new Free(f, Data_CatList.empty);
  };
  var freeMonad = new Control_Monad.Monad(function () {
      return freeApplicative;
  }, function () {
      return freeBind;
  });
  var freeFunctor = new Data_Functor.Functor(function (k) {
      return function (f) {
          return Control_Bind.bindFlipped(freeBind)(function ($118) {
              return Control_Applicative.pure(freeApplicative)(k($118));
          })(f);
      };
  });
  var freeBind = new Control_Bind.Bind(function () {
      return freeApply;
  }, function (v) {
      return function (k) {
          return new Free(v.value0, Data_CatList.snoc(v.value1)(k));
      };
  });
  var freeApply = new Control_Apply.Apply(function () {
      return freeFunctor;
  }, Control_Monad.ap(freeMonad));
  var freeApplicative = new Control_Applicative.Applicative(function () {
      return freeApply;
  }, function ($119) {
      return fromView(Return.create($119));
  });
  var liftF = function (f) {
      return fromView(new Bind(f, function ($120) {
          return Control_Applicative.pure(freeApplicative)($120);
      }));
  };
  var foldFree = function (dictMonadRec) {
      return function (k) {
          var go = function (f) {
              var v = toView(f);
              if (v instanceof Return) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(Control_Monad_Rec_Class.Done.create)(Control_Applicative.pure((dictMonadRec.Monad0()).Applicative0())(v.value0));
              };
              if (v instanceof Bind) {
                  return Data_Functor.map((((dictMonadRec.Monad0()).Bind1()).Apply0()).Functor0())(function ($127) {
                      return Control_Monad_Rec_Class.Loop.create(v.value1($127));
                  })(k(v.value0));
              };
              throw new Error("Failed pattern match at Control.Monad.Free line 146, column 10 - line 148, column 37: " + [ v.constructor.name ]);
          };
          return Control_Monad_Rec_Class.tailRecM(dictMonadRec)(go);
      };
  };
  exports["liftF"] = liftF;
  exports["foldFree"] = foldFree;
  exports["freeFunctor"] = freeFunctor;
  exports["freeBind"] = freeBind;
  exports["freeApplicative"] = freeApplicative;
  exports["freeApply"] = freeApply;
  exports["freeMonad"] = freeMonad;
})(PS["Control.Monad.Free"] = PS["Control.Monad.Free"] || {});
(function(exports) {
    "use strict";

  exports.eventListener = function (fn) {
    return function (event) {
      return fn(event)();
    };
  };

  exports.addEventListener = function (type) {
    return function (listener) {
      return function (useCapture) {
        return function (target) {
          return function () {
            target.addEventListener(type, listener, useCapture);
            return {};
          };
        };
      };
    };
  };
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Event.EventTarget"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var DOM = PS["DOM"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Prelude = PS["Prelude"];
  exports["eventListener"] = $foreign.eventListener;
  exports["addEventListener"] = $foreign.addEventListener;
})(PS["DOM.Event.EventTarget"] = PS["DOM.Event.EventTarget"] || {});
(function(exports) {
  /* global window */
  "use strict";

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports._readHTMLElement = function (failure) {
    return function (success) {
      return function (value) {
        var tag = Object.prototype.toString.call(value);
        if (tag.indexOf("[object HTML") === 0 && tag.indexOf("Element]") === tag.length - 8) {
          return success(value);
        } else {
          return failure(tag);
        }
      };
    };
  };
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
    "use strict";

  exports.toForeign = function (value) {
    return value;
  };

  exports.typeOf = function (value) {
    return typeof value;
  };
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Foreign"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Int = PS["Data.Int"];
  var Data_List_NonEmpty = PS["Data.List.NonEmpty"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_String = PS["Data.String"];
  var Prelude = PS["Prelude"];
  var TypeMismatch = (function () {
      function TypeMismatch(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      TypeMismatch.create = function (value0) {
          return function (value1) {
              return new TypeMismatch(value0, value1);
          };
      };
      return TypeMismatch;
  })();
  exports["TypeMismatch"] = TypeMismatch;
  exports["toForeign"] = $foreign.toForeign;
  exports["typeOf"] = $foreign.typeOf;
})(PS["Data.Foreign"] = PS["Data.Foreign"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Util_FFI = PS["DOM.Util.FFI"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];                           
  var elementToNode = Unsafe_Coerce.unsafeCoerce;
  exports["elementToNode"] = elementToNode;
})(PS["DOM.Node.Types"] = PS["DOM.Node.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML.Types"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Identity = PS["Data.Identity"];
  var Data_List_Types = PS["Data.List.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var windowToEventTarget = Unsafe_Coerce.unsafeCoerce;                        
  var readHTMLElement = $foreign._readHTMLElement(function ($0) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Left.create(Control_Applicative.pure(Data_List_Types.applicativeNonEmptyList)(Data_Foreign.TypeMismatch.create("HTMLElement")($0))));
  })(function ($1) {
      return Control_Monad_Except_Trans.except(Data_Identity.applicativeIdentity)(Data_Either.Right.create($1));
  });                                                                    
  var htmlElementToNode = Unsafe_Coerce.unsafeCoerce;   
  var htmlDocumentToParentNode = Unsafe_Coerce.unsafeCoerce; 
  var htmlDocumentToDocument = Unsafe_Coerce.unsafeCoerce;
  exports["windowToEventTarget"] = windowToEventTarget;
  exports["htmlDocumentToDocument"] = htmlDocumentToDocument;
  exports["htmlDocumentToParentNode"] = htmlDocumentToParentNode;
  exports["htmlElementToNode"] = htmlElementToNode;
  exports["readHTMLElement"] = readHTMLElement;
})(PS["DOM.HTML.Types"] = PS["DOM.HTML.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var load = "load";        
  var click = "click";
  exports["click"] = click;
  exports["load"] = load;
})(PS["DOM.HTML.Event.EventTypes"] = PS["DOM.HTML.Event.EventTypes"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var ButtonButton = (function () {
      function ButtonButton() {

      };
      ButtonButton.value = new ButtonButton();
      return ButtonButton;
  })();
  var ButtonSubmit = (function () {
      function ButtonSubmit() {

      };
      ButtonSubmit.value = new ButtonSubmit();
      return ButtonSubmit;
  })();
  var ButtonReset = (function () {
      function ButtonReset() {

      };
      ButtonReset.value = new ButtonReset();
      return ButtonReset;
  })();
  var renderButtonType = function (v) {
      if (v instanceof ButtonButton) {
          return "button";
      };
      if (v instanceof ButtonSubmit) {
          return "submit";
      };
      if (v instanceof ButtonReset) {
          return "reset";
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.ButtonType line 9, column 20 - line 12, column 18: " + [ v.constructor.name ]);
  };
  exports["ButtonButton"] = ButtonButton;
  exports["ButtonSubmit"] = ButtonSubmit;
  exports["ButtonReset"] = ButtonReset;
  exports["renderButtonType"] = renderButtonType;
})(PS["DOM.HTML.Indexed.ButtonType"] = PS["DOM.HTML.Indexed.ButtonType"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var InputButton = (function () {
      function InputButton() {

      };
      InputButton.value = new InputButton();
      return InputButton;
  })();
  var InputCheckbox = (function () {
      function InputCheckbox() {

      };
      InputCheckbox.value = new InputCheckbox();
      return InputCheckbox;
  })();
  var InputColor = (function () {
      function InputColor() {

      };
      InputColor.value = new InputColor();
      return InputColor;
  })();
  var InputDate = (function () {
      function InputDate() {

      };
      InputDate.value = new InputDate();
      return InputDate;
  })();
  var InputDatetime = (function () {
      function InputDatetime() {

      };
      InputDatetime.value = new InputDatetime();
      return InputDatetime;
  })();
  var InputDatetimeLocal = (function () {
      function InputDatetimeLocal() {

      };
      InputDatetimeLocal.value = new InputDatetimeLocal();
      return InputDatetimeLocal;
  })();
  var InputEmail = (function () {
      function InputEmail() {

      };
      InputEmail.value = new InputEmail();
      return InputEmail;
  })();
  var InputFile = (function () {
      function InputFile() {

      };
      InputFile.value = new InputFile();
      return InputFile;
  })();
  var InputHidden = (function () {
      function InputHidden() {

      };
      InputHidden.value = new InputHidden();
      return InputHidden;
  })();
  var InputImage = (function () {
      function InputImage() {

      };
      InputImage.value = new InputImage();
      return InputImage;
  })();
  var InputMonth = (function () {
      function InputMonth() {

      };
      InputMonth.value = new InputMonth();
      return InputMonth;
  })();
  var InputNumber = (function () {
      function InputNumber() {

      };
      InputNumber.value = new InputNumber();
      return InputNumber;
  })();
  var InputPassword = (function () {
      function InputPassword() {

      };
      InputPassword.value = new InputPassword();
      return InputPassword;
  })();
  var InputRadio = (function () {
      function InputRadio() {

      };
      InputRadio.value = new InputRadio();
      return InputRadio;
  })();
  var InputRange = (function () {
      function InputRange() {

      };
      InputRange.value = new InputRange();
      return InputRange;
  })();
  var InputReset = (function () {
      function InputReset() {

      };
      InputReset.value = new InputReset();
      return InputReset;
  })();
  var InputSearch = (function () {
      function InputSearch() {

      };
      InputSearch.value = new InputSearch();
      return InputSearch;
  })();
  var InputSubmit = (function () {
      function InputSubmit() {

      };
      InputSubmit.value = new InputSubmit();
      return InputSubmit;
  })();
  var InputTel = (function () {
      function InputTel() {

      };
      InputTel.value = new InputTel();
      return InputTel;
  })();
  var InputText = (function () {
      function InputText() {

      };
      InputText.value = new InputText();
      return InputText;
  })();
  var InputTime = (function () {
      function InputTime() {

      };
      InputTime.value = new InputTime();
      return InputTime;
  })();
  var InputUrl = (function () {
      function InputUrl() {

      };
      InputUrl.value = new InputUrl();
      return InputUrl;
  })();
  var InputWeek = (function () {
      function InputWeek() {

      };
      InputWeek.value = new InputWeek();
      return InputWeek;
  })();
  var renderInputType = function (v) {
      if (v instanceof InputButton) {
          return "button";
      };
      if (v instanceof InputCheckbox) {
          return "checkbox";
      };
      if (v instanceof InputColor) {
          return "color";
      };
      if (v instanceof InputDate) {
          return "date";
      };
      if (v instanceof InputDatetime) {
          return "datetime";
      };
      if (v instanceof InputDatetimeLocal) {
          return "datetime-local";
      };
      if (v instanceof InputEmail) {
          return "email";
      };
      if (v instanceof InputFile) {
          return "file";
      };
      if (v instanceof InputHidden) {
          return "hidden";
      };
      if (v instanceof InputImage) {
          return "image";
      };
      if (v instanceof InputMonth) {
          return "month";
      };
      if (v instanceof InputNumber) {
          return "number";
      };
      if (v instanceof InputPassword) {
          return "password";
      };
      if (v instanceof InputRadio) {
          return "radio";
      };
      if (v instanceof InputRange) {
          return "range";
      };
      if (v instanceof InputReset) {
          return "reset";
      };
      if (v instanceof InputSearch) {
          return "search";
      };
      if (v instanceof InputSubmit) {
          return "submit";
      };
      if (v instanceof InputTel) {
          return "tel";
      };
      if (v instanceof InputText) {
          return "text";
      };
      if (v instanceof InputTime) {
          return "time";
      };
      if (v instanceof InputUrl) {
          return "url";
      };
      if (v instanceof InputWeek) {
          return "week";
      };
      throw new Error("Failed pattern match at DOM.HTML.Indexed.InputType line 29, column 19 - line 52, column 16: " + [ v.constructor.name ]);
  };
  exports["InputButton"] = InputButton;
  exports["InputCheckbox"] = InputCheckbox;
  exports["InputColor"] = InputColor;
  exports["InputDate"] = InputDate;
  exports["InputDatetime"] = InputDatetime;
  exports["InputDatetimeLocal"] = InputDatetimeLocal;
  exports["InputEmail"] = InputEmail;
  exports["InputFile"] = InputFile;
  exports["InputHidden"] = InputHidden;
  exports["InputImage"] = InputImage;
  exports["InputMonth"] = InputMonth;
  exports["InputNumber"] = InputNumber;
  exports["InputPassword"] = InputPassword;
  exports["InputRadio"] = InputRadio;
  exports["InputRange"] = InputRange;
  exports["InputReset"] = InputReset;
  exports["InputSearch"] = InputSearch;
  exports["InputSubmit"] = InputSubmit;
  exports["InputTel"] = InputTel;
  exports["InputText"] = InputText;
  exports["InputTime"] = InputTime;
  exports["InputUrl"] = InputUrl;
  exports["InputWeek"] = InputWeek;
  exports["renderInputType"] = renderInputType;
})(PS["DOM.HTML.Indexed.InputType"] = PS["DOM.HTML.Indexed.InputType"] || {});
(function(exports) {
    "use strict";

  exports.document = function (window) {
    return function () {
      return window.document;
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  exports["null"] = null;

  exports.nullable = function (a, r, f) {
    return a == null ? r : f(a);
  };

  exports.notNull = function (x) {
    return x;
  };
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.Nullable"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var toNullable = Data_Maybe.maybe($foreign["null"])($foreign.notNull);
  var toMaybe = function (n) {
      return $foreign.nullable(n, Data_Maybe.Nothing.value, Data_Maybe.Just.create);
  };
  exports["toMaybe"] = toMaybe;
  exports["toNullable"] = toNullable;
})(PS["Data.Nullable"] = PS["Data.Nullable"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_WebStorage_Types = PS["DOM.WebStorage.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  exports["document"] = $foreign.document;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  var getEffProp = function (name) {
    return function (node) {
      return function () {
        return node[name];
      };
    };
  };                                                   

  exports._parentNode = getEffProp("parentNode");          

  exports._nextSibling = getEffProp("nextSibling");

  exports.insertBefore = function (node1) {
    return function (node2) {
      return function (parent) {
        return function () {
          return parent.insertBefore(node1, node2);
        };
      };
    };
  };

  exports.appendChild = function (node) {
    return function (parent) {
      return function () {
        return parent.appendChild(node);
      };
    };
  };

  exports.removeChild = function (node) {
    return function (parent) {
      return function () {
        return parent.removeChild(node);
      };
    };
  };
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Node.Node"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_NodeType = PS["DOM.Node.NodeType"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Enum = PS["Data.Enum"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var parentNode = function ($2) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._parentNode($2));
  };
  var nextSibling = function ($6) {
      return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._nextSibling($6));
  };
  exports["parentNode"] = parentNode;
  exports["nextSibling"] = nextSibling;
  exports["insertBefore"] = $foreign.insertBefore;
  exports["appendChild"] = $foreign.appendChild;
  exports["removeChild"] = $foreign.removeChild;
})(PS["DOM.Node.Node"] = PS["DOM.Node.Node"] || {});
(function(exports) {
    "use strict";                                             

  exports._querySelector = function (selector) {
    return function (node) {
      return function () {
        return node.querySelector(selector);
      };
    };
  };
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["DOM.Node.ParentNode"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var querySelector = function (qs) {
      return function ($3) {
          return Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Nullable.toMaybe)($foreign._querySelector(qs)($3));
      };
  };
  exports["querySelector"] = querySelector;
})(PS["DOM.Node.ParentNode"] = PS["DOM.Node.ParentNode"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var unCoyoneda = function (f) {
      return function (v) {
          return Data_Exists.runExists(function (v1) {
              return f(v1.value0)(v1.value1);
          })(v);
      };
  };
  exports["unCoyoneda"] = unCoyoneda;
})(PS["Data.Coyoneda"] = PS["Data.Coyoneda"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Void = PS["Data.Void"];
  var in3 = function (v) {
      return new Data_Either.Right(new Data_Either.Right(new Data_Either.Left(v)));
  };
  var in2 = function (v) {
      return new Data_Either.Right(new Data_Either.Left(v));
  };
  var in1 = Data_Either.Left.create;
  var at3 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && y.value0.value0 instanceof Data_Either.Left)) {
                  return f(y.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at2 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && y.value0 instanceof Data_Either.Left) {
                  return f(y.value0.value0);
              };
              return b;
          };
      };
  };
  var at1 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return f(y.value0);
              };
              return b;
          };
      };
  };
  exports["in1"] = in1;
  exports["in2"] = in2;
  exports["in3"] = in3;
  exports["at1"] = at1;
  exports["at2"] = at2;
  exports["at3"] = at3;
})(PS["Data.Either.Nested"] = PS["Data.Either.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];
  var right = function (ga) {
      return new Data_Either.Right(ga);
  };            
  var left = function (fa) {
      return new Data_Either.Left(fa);
  };
  exports["left"] = left;
  exports["right"] = right;
})(PS["Data.Functor.Coproduct"] = PS["Data.Functor.Coproduct"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor_Coproduct = PS["Data.Functor.Coproduct"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];
  var in3 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v)));
  };
  var in2 = function (v) {
      return Data_Functor_Coproduct.right(Data_Functor_Coproduct.left(v));
  };
  var in1 = Data_Functor_Coproduct.left;
  var at3 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && (y.value0 instanceof Data_Either.Right && y.value0.value0 instanceof Data_Either.Left)) {
                  return f(y.value0.value0.value0);
              };
              return b;
          };
      };
  };
  var at2 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Right && y.value0 instanceof Data_Either.Left) {
                  return f(y.value0.value0);
              };
              return b;
          };
      };
  };
  var at1 = function (b) {
      return function (f) {
          return function (y) {
              if (y instanceof Data_Either.Left) {
                  return f(y.value0);
              };
              return b;
          };
      };
  };
  exports["in1"] = in1;
  exports["in2"] = in2;
  exports["in3"] = in3;
  exports["at1"] = at1;
  exports["at2"] = at2;
  exports["at3"] = at3;
})(PS["Data.Functor.Coproduct.Nested"] = PS["Data.Functor.Coproduct.Nested"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Prelude = PS["Prelude"];        
  var Choice = function (Profunctor0, left, right) {
      this.Profunctor0 = Profunctor0;
      this.left = left;
      this.right = right;
  };
  var right = function (dict) {
      return dict.right;
  };
  var left = function (dict) {
      return dict.left;
  };
  exports["left"] = left;
  exports["right"] = right;
  exports["Choice"] = Choice;
})(PS["Data.Profunctor.Choice"] = PS["Data.Profunctor.Choice"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Lens_Internal_Wander = PS["Data.Lens.Internal.Wander"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Cochoice = PS["Data.Profunctor.Cochoice"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var Forget = function (x) {
      return x;
  };
  var profunctorForget = new Data_Profunctor.Profunctor(function (f) {
      return function (v) {
          return function (v1) {
              return function ($27) {
                  return v1(f($27));
              };
          };
      };
  });
  var newtypeForget = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Forget);
  var choiceForget = function (dictMonoid) {
      return new Data_Profunctor_Choice.Choice(function () {
          return profunctorForget;
      }, function (v) {
          return Data_Either.either(v)(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)));
      }, function (v) {
          return Data_Either.either(Data_Monoid.mempty(Data_Monoid.monoidFn(dictMonoid)))(v);
      });
  };
  exports["Forget"] = Forget;
  exports["newtypeForget"] = newtypeForget;
  exports["profunctorForget"] = profunctorForget;
  exports["choiceForget"] = choiceForget;
})(PS["Data.Lens.Internal.Forget"] = PS["Data.Lens.Internal.Forget"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Indexed = PS["Data.Lens.Internal.Indexed"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var foldMapOf = Data_Newtype.under(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.newtypeForget)(Data_Lens_Internal_Forget.Forget);
  var preview = function (p) {
      return function ($64) {
          return Data_Newtype.unwrap(Data_Maybe_First.newtypeFirst)(foldMapOf(p)(function ($65) {
              return Data_Maybe_First.First(Data_Maybe.Just.create($65));
          })($64));
      };
  };
  exports["preview"] = preview;
  exports["foldMapOf"] = foldMapOf;
})(PS["Data.Lens.Fold"] = PS["Data.Lens.Fold"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Data_Profunctor_Closed = PS["Data.Profunctor.Closed"];
  var Data_Profunctor_Costrong = PS["Data.Profunctor.Costrong"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];        
  var Tagged = function (x) {
      return x;
  };
  var taggedProfunctor = new Data_Profunctor.Profunctor(function (v) {
      return function (g) {
          return function (v1) {
              return g(v1);
          };
      };
  });
  var taggedChoice = new Data_Profunctor_Choice.Choice(function () {
      return taggedProfunctor;
  }, function (v) {
      return new Data_Either.Left(v);
  }, function (v) {
      return new Data_Either.Right(v);
  });
  var newtypeTagged = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Tagged);
  exports["Tagged"] = Tagged;
  exports["newtypeTagged"] = newtypeTagged;
  exports["taggedProfunctor"] = taggedProfunctor;
  exports["taggedChoice"] = taggedChoice;
})(PS["Data.Lens.Internal.Tagged"] = PS["Data.Lens.Internal.Tagged"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Lens_Internal_Market = PS["Data.Lens.Internal.Market"];
  var Data_Lens_Internal_Tagged = PS["Data.Lens.Internal.Tagged"];
  var Data_Lens_Types = PS["Data.Lens.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Profunctor_Choice = PS["Data.Profunctor.Choice"];
  var Prelude = PS["Prelude"];
  var review = Data_Newtype.under(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.newtypeTagged)(Data_Lens_Internal_Tagged.Tagged);
  var prism = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return function (pab) {
                  return Data_Profunctor.dimap(dictChoice.Profunctor0())(fro)(Data_Either.either(Control_Category.id(Control_Category.categoryFn))(Control_Category.id(Control_Category.categoryFn)))(Data_Profunctor_Choice.right(dictChoice)(Data_Profunctor.rmap(dictChoice.Profunctor0())(to)(pab)));
              };
          };
      };
  };
  var prism$prime = function (to) {
      return function (fro) {
          return function (dictChoice) {
              return prism(to)(function (s) {
                  return Data_Maybe.maybe(new Data_Either.Left(s))(Data_Either.Right.create)(fro(s));
              })(dictChoice);
          };
      };
  };
  exports["prism"] = prism;
  exports["prism'"] = prism$prime;
  exports["review"] = review;
})(PS["Data.Lens.Prism"] = PS["Data.Lens.Prism"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_List = PS["Data.List"];
  var Data_List_Lazy = PS["Data.List.Lazy"];
  var Data_List_Lazy_Types = PS["Data.List.Lazy.Types"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Prelude = PS["Prelude"];        
  var Leaf = (function () {
      function Leaf() {

      };
      Leaf.value = new Leaf();
      return Leaf;
  })();
  var Two = (function () {
      function Two(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      Two.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new Two(value0, value1, value2, value3);
                  };
              };
          };
      };
      return Two;
  })();
  var Three = (function () {
      function Three(value0, value1, value2, value3, value4, value5, value6) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
          this.value6 = value6;
      };
      Three.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return function (value6) {
                                  return new Three(value0, value1, value2, value3, value4, value5, value6);
                              };
                          };
                      };
                  };
              };
          };
      };
      return Three;
  })();
  var TwoLeft = (function () {
      function TwoLeft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoLeft(value0, value1, value2);
              };
          };
      };
      return TwoLeft;
  })();
  var TwoRight = (function () {
      function TwoRight(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      TwoRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new TwoRight(value0, value1, value2);
              };
          };
      };
      return TwoRight;
  })();
  var ThreeLeft = (function () {
      function ThreeLeft(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeLeft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeLeft(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeLeft;
  })();
  var ThreeMiddle = (function () {
      function ThreeMiddle(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeMiddle.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeMiddle(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeMiddle;
  })();
  var ThreeRight = (function () {
      function ThreeRight(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ThreeRight.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ThreeRight(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ThreeRight;
  })();
  var KickUp = (function () {
      function KickUp(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      KickUp.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new KickUp(value0, value1, value2, value3);
                  };
              };
          };
      };
      return KickUp;
  })();
  var values = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(values(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value2))(Data_Semigroup.append(Data_List_Types.semigroupList)(values(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value5))(values(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 590, column 1 - line 590, column 40: " + [ v.constructor.name ]);
  };
  var lookup = function (dictOrd) {
      return function (k) {
          var comp = Data_Ord.compare(dictOrd);
          var go = function ($copy_v) {
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(v) {
                  if (v instanceof Leaf) {
                      $tco_done = true;
                      return Data_Maybe.Nothing.value;
                  };
                  if (v instanceof Two) {
                      var v2 = comp(k)(v.value1);
                      if (v2 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      if (v2 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  if (v instanceof Three) {
                      var v3 = comp(k)(v.value1);
                      if (v3 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value2);
                      };
                      var v4 = comp(k)(v.value4);
                      if (v4 instanceof Data_Ordering.EQ) {
                          $tco_done = true;
                          return new Data_Maybe.Just(v.value5);
                      };
                      if (v3 instanceof Data_Ordering.LT) {
                          $copy_v = v.value0;
                          return;
                      };
                      if (v4 instanceof Data_Ordering.GT) {
                          $copy_v = v.value6;
                          return;
                      };
                      $copy_v = v.value3;
                      return;
                  };
                  throw new Error("Failed pattern match at Data.Map line 195, column 5 - line 195, column 22: " + [ v.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($copy_v);
              };
              return $tco_result;
          };
          return go;
      };
  };
  var member = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.isJust(lookup(dictOrd)(k)(m));
          };
      };
  };
  var keys = function (v) {
      if (v instanceof Leaf) {
          return Data_List_Types.Nil.value;
      };
      if (v instanceof Two) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(keys(v.value3)));
      };
      if (v instanceof Three) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value0))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value1))(Data_Semigroup.append(Data_List_Types.semigroupList)(keys(v.value3))(Data_Semigroup.append(Data_List_Types.semigroupList)(Control_Applicative.pure(Data_List_Types.applicativeList)(v.value4))(keys(v.value6)))));
      };
      throw new Error("Failed pattern match at Data.Map line 584, column 1 - line 584, column 38: " + [ v.constructor.name ]);
  };
  var functorMap = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Leaf) {
              return Leaf.value;
          };
          if (v1 instanceof Two) {
              return new Two(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3));
          };
          if (v1 instanceof Three) {
              return new Three(Data_Functor.map(functorMap)(v)(v1.value0), v1.value1, v(v1.value2), Data_Functor.map(functorMap)(v)(v1.value3), v1.value4, v(v1.value5), Data_Functor.map(functorMap)(v)(v1.value6));
          };
          throw new Error("Failed pattern match at Data.Map line 91, column 1 - line 91, column 39: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var fromZipper = function ($copy_dictOrd) {
      return function ($copy_v) {
          return function ($copy_tree) {
              var $tco_var_dictOrd = $copy_dictOrd;
              var $tco_var_v = $copy_v;
              var $tco_done = false;
              var $tco_result;
              function $tco_loop(dictOrd, v, tree) {
                  if (v instanceof Data_List_Types.Nil) {
                      $tco_done = true;
                      return tree;
                  };
                  if (v instanceof Data_List_Types.Cons) {
                      if (v.value0 instanceof TwoLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(tree, v.value0.value0, v.value0.value1, v.value0.value2);
                          return;
                      };
                      if (v.value0 instanceof TwoRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Two(v.value0.value0, v.value0.value1, v.value0.value2, tree);
                          return;
                      };
                      if (v.value0 instanceof ThreeLeft) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(tree, v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeMiddle) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, tree, v.value0.value3, v.value0.value4, v.value0.value5);
                          return;
                      };
                      if (v.value0 instanceof ThreeRight) {
                          $tco_var_dictOrd = dictOrd;
                          $tco_var_v = v.value1;
                          $copy_tree = new Three(v.value0.value0, v.value0.value1, v.value0.value2, v.value0.value3, v.value0.value4, v.value0.value5, tree);
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map line 413, column 3 - line 418, column 88: " + [ v.value0.constructor.name ]);
                  };
                  throw new Error("Failed pattern match at Data.Map line 410, column 1 - line 410, column 80: " + [ v.constructor.name, tree.constructor.name ]);
              };
              while (!$tco_done) {
                  $tco_result = $tco_loop($tco_var_dictOrd, $tco_var_v, $copy_tree);
              };
              return $tco_result;
          };
      };
  };
  var insert = function (dictOrd) {
      return function (k) {
          return function (v) {
              var up = function ($copy_v1) {
                  return function ($copy_v2) {
                      var $tco_var_v1 = $copy_v1;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(v1, v2) {
                          if (v1 instanceof Data_List_Types.Nil) {
                              $tco_done = true;
                              return new Two(v2.value0, v2.value1, v2.value2, v2.value3);
                          };
                          if (v1 instanceof Data_List_Types.Cons) {
                              if (v1.value0 instanceof TwoLeft) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v2.value0, v2.value1, v2.value2, v2.value3, v1.value0.value0, v1.value0.value1, v1.value0.value2));
                              };
                              if (v1.value0 instanceof TwoRight) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(v1.value1)(new Three(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0, v2.value1, v2.value2, v2.value3));
                              };
                              if (v1.value0 instanceof ThreeLeft) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v2.value0, v2.value1, v2.value2, v2.value3), v1.value0.value0, v1.value0.value1, new Two(v1.value0.value2, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeMiddle) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v2.value0), v2.value1, v2.value2, new Two(v2.value3, v1.value0.value3, v1.value0.value4, v1.value0.value5));
                                  return;
                              };
                              if (v1.value0 instanceof ThreeRight) {
                                  $tco_var_v1 = v1.value1;
                                  $copy_v2 = new KickUp(new Two(v1.value0.value0, v1.value0.value1, v1.value0.value2, v1.value0.value3), v1.value0.value4, v1.value0.value5, new Two(v2.value0, v2.value1, v2.value2, v2.value3));
                                  return;
                              };
                              throw new Error("Failed pattern match at Data.Map line 449, column 5 - line 454, column 108: " + [ v1.value0.constructor.name, v2.constructor.name ]);
                          };
                          throw new Error("Failed pattern match at Data.Map line 446, column 3 - line 446, column 56: " + [ v1.constructor.name, v2.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_v1, $copy_v2);
                      };
                      return $tco_result;
                  };
              };
              var comp = Data_Ord.compare(dictOrd);
              var down = function ($copy_ctx) {
                  return function ($copy_v1) {
                      var $tco_var_ctx = $copy_ctx;
                      var $tco_done = false;
                      var $tco_result;
                      function $tco_loop(ctx, v1) {
                          if (v1 instanceof Leaf) {
                              $tco_done = true;
                              return up(ctx)(new KickUp(Leaf.value, k, v, Leaf.value));
                          };
                          if (v1 instanceof Two) {
                              var v2 = comp(k)(v1.value1);
                              if (v2 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Two(v1.value0, k, v, v1.value3));
                              };
                              if (v2 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(v1.value1, v1.value2, v1.value3), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(v1.value0, v1.value1, v1.value2), ctx);
                              $copy_v1 = v1.value3;
                              return;
                          };
                          if (v1 instanceof Three) {
                              var v3 = comp(k)(v1.value1);
                              if (v3 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, k, v, v1.value3, v1.value4, v1.value5, v1.value6));
                              };
                              var v4 = comp(k)(v1.value4);
                              if (v4 instanceof Data_Ordering.EQ) {
                                  $tco_done = true;
                                  return fromZipper(dictOrd)(ctx)(new Three(v1.value0, v1.value1, v1.value2, v1.value3, k, v, v1.value6));
                              };
                              if (v3 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(v1.value1, v1.value2, v1.value3, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value0;
                                  return;
                              };
                              if (v3 instanceof Data_Ordering.GT && v4 instanceof Data_Ordering.LT) {
                                  $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(v1.value0, v1.value1, v1.value2, v1.value4, v1.value5, v1.value6), ctx);
                                  $copy_v1 = v1.value3;
                                  return;
                              };
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(v1.value0, v1.value1, v1.value2, v1.value3, v1.value4, v1.value5), ctx);
                              $copy_v1 = v1.value6;
                              return;
                          };
                          throw new Error("Failed pattern match at Data.Map line 429, column 3 - line 429, column 55: " + [ ctx.constructor.name, v1.constructor.name ]);
                      };
                      while (!$tco_done) {
                          $tco_result = $tco_loop($tco_var_ctx, $copy_v1);
                      };
                      return $tco_result;
                  };
              };
              return down(Data_List_Types.Nil.value);
          };
      };
  };
  var pop = function (dictOrd) {
      return function (k) {
          var up = function (ctxs) {
              return function (tree) {
                  if (ctxs instanceof Data_List_Types.Nil) {
                      return tree;
                  };
                  if (ctxs instanceof Data_List_Types.Cons) {
                      var __unused = function (dictPartial1) {
                          return function ($dollar57) {
                              return $dollar57;
                          };
                      };
                      return __unused()((function () {
                          if (ctxs.value0 instanceof TwoLeft && (ctxs.value0.value2 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoRight && (ctxs.value0.value0 instanceof Leaf && tree instanceof Leaf)) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Two) {
                              return up(ctxs.value1)(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Two) {
                              return up(ctxs.value1)(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree));
                          };
                          if (ctxs.value0 instanceof TwoLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6)));
                          };
                          if (ctxs.value0 instanceof TwoRight && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && (ctxs.value0.value2 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value0, ctxs.value0.value1, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value5 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value3, ctxs.value0.value4, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeRight && (ctxs.value0.value0 instanceof Leaf && (ctxs.value0.value3 instanceof Leaf && tree instanceof Leaf))) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(Leaf.value, ctxs.value0.value1, ctxs.value0.value2, Leaf.value, ctxs.value0.value4, ctxs.value0.value5, Leaf.value));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0, ctxs.value0.value2.value1, ctxs.value0.value2.value2, ctxs.value0.value2.value3), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(new Three(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0, ctxs.value0.value5.value1, ctxs.value0.value5.value2, ctxs.value0.value5.value3)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Two) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Two(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Three(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          if (ctxs.value0 instanceof ThreeLeft && ctxs.value0.value2 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(tree, ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2.value0), ctxs.value0.value2.value1, ctxs.value0.value2.value2, new Two(ctxs.value0.value2.value3, ctxs.value0.value2.value4, ctxs.value0.value2.value5, ctxs.value0.value2.value6), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value0 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(new Two(ctxs.value0.value0.value0, ctxs.value0.value0.value1, ctxs.value0.value0.value2, ctxs.value0.value0.value3), ctxs.value0.value0.value4, ctxs.value0.value0.value5, new Two(ctxs.value0.value0.value6, ctxs.value0.value1, ctxs.value0.value2, tree), ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5));
                          };
                          if (ctxs.value0 instanceof ThreeMiddle && ctxs.value0.value5 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(tree, ctxs.value0.value3, ctxs.value0.value4, ctxs.value0.value5.value0), ctxs.value0.value5.value1, ctxs.value0.value5.value2, new Two(ctxs.value0.value5.value3, ctxs.value0.value5.value4, ctxs.value0.value5.value5, ctxs.value0.value5.value6)));
                          };
                          if (ctxs.value0 instanceof ThreeRight && ctxs.value0.value3 instanceof Three) {
                              return fromZipper(dictOrd)(ctxs.value1)(new Three(ctxs.value0.value0, ctxs.value0.value1, ctxs.value0.value2, new Two(ctxs.value0.value3.value0, ctxs.value0.value3.value1, ctxs.value0.value3.value2, ctxs.value0.value3.value3), ctxs.value0.value3.value4, ctxs.value0.value3.value5, new Two(ctxs.value0.value3.value6, ctxs.value0.value4, ctxs.value0.value5, tree)));
                          };
                          throw new Error("Failed pattern match at Data.Map line 499, column 9 - line 516, column 136: " + [ ctxs.value0.constructor.name, tree.constructor.name ]);
                      })());
                  };
                  throw new Error("Failed pattern match at Data.Map line 496, column 5 - line 516, column 136: " + [ ctxs.constructor.name ]);
              };
          };
          var removeMaxNode = function (ctx) {
              return function (m) {
                  var __unused = function (dictPartial1) {
                      return function ($dollar59) {
                          return $dollar59;
                      };
                  };
                  return __unused()((function () {
                      if (m instanceof Two && (m.value0 instanceof Leaf && m.value3 instanceof Leaf)) {
                          return up(ctx)(Leaf.value);
                      };
                      if (m instanceof Two) {
                          return removeMaxNode(new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx))(m.value3);
                      };
                      if (m instanceof Three && (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf))) {
                          return up(new Data_List_Types.Cons(new TwoRight(Leaf.value, m.value1, m.value2), ctx))(Leaf.value);
                      };
                      if (m instanceof Three) {
                          return removeMaxNode(new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx))(m.value6);
                      };
                      throw new Error("Failed pattern match at Data.Map line 528, column 5 - line 532, column 107: " + [ m.constructor.name ]);
                  })());
              };
          };
          var maxNode = function (m) {
              var __unused = function (dictPartial1) {
                  return function ($dollar61) {
                      return $dollar61;
                  };
              };
              return __unused()((function () {
                  if (m instanceof Two && m.value3 instanceof Leaf) {
                      return {
                          key: m.value1,
                          value: m.value2
                      };
                  };
                  if (m instanceof Two) {
                      return maxNode(m.value3);
                  };
                  if (m instanceof Three && m.value6 instanceof Leaf) {
                      return {
                          key: m.value4,
                          value: m.value5
                      };
                  };
                  if (m instanceof Three) {
                      return maxNode(m.value6);
                  };
                  throw new Error("Failed pattern match at Data.Map line 519, column 33 - line 523, column 45: " + [ m.constructor.name ]);
              })());
          };
          var comp = Data_Ord.compare(dictOrd);
          var down = function ($copy_ctx) {
              return function ($copy_m) {
                  var $tco_var_ctx = $copy_ctx;
                  var $tco_done = false;
                  var $tco_result;
                  function $tco_loop(ctx, m) {
                      if (m instanceof Leaf) {
                          $tco_done = true;
                          return Data_Maybe.Nothing.value;
                      };
                      if (m instanceof Two) {
                          var v = comp(k)(m.value1);
                          if (m.value3 instanceof Leaf && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, up(ctx)(Leaf.value)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new TwoLeft(max.key, max.value, m.value3), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new TwoLeft(m.value1, m.value2, m.value3), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new TwoRight(m.value0, m.value1, m.value2), ctx);
                          $copy_m = m.value3;
                          return;
                      };
                      if (m instanceof Three) {
                          var leaves = (function () {
                              if (m.value0 instanceof Leaf && (m.value3 instanceof Leaf && m.value6 instanceof Leaf)) {
                                  return true;
                              };
                              return false;
                          })();
                          var v = comp(k)(m.value4);
                          var v3 = comp(k)(m.value1);
                          if (leaves && v3 instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value4, m.value5, Leaf.value))));
                          };
                          if (leaves && v instanceof Data_Ordering.EQ) {
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, fromZipper(dictOrd)(ctx)(new Two(Leaf.value, m.value1, m.value2, Leaf.value))));
                          };
                          if (v3 instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value0);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value2, removeMaxNode(new Data_List_Types.Cons(new ThreeLeft(max.key, max.value, m.value3, m.value4, m.value5, m.value6), ctx))(m.value0)));
                          };
                          if (v instanceof Data_Ordering.EQ) {
                              var max = maxNode(m.value3);
                              $tco_done = true;
                              return new Data_Maybe.Just(new Data_Tuple.Tuple(m.value5, removeMaxNode(new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, max.key, max.value, m.value6), ctx))(m.value3)));
                          };
                          if (v3 instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeLeft(m.value1, m.value2, m.value3, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value0;
                              return;
                          };
                          if (v3 instanceof Data_Ordering.GT && v instanceof Data_Ordering.LT) {
                              $tco_var_ctx = new Data_List_Types.Cons(new ThreeMiddle(m.value0, m.value1, m.value2, m.value4, m.value5, m.value6), ctx);
                              $copy_m = m.value3;
                              return;
                          };
                          $tco_var_ctx = new Data_List_Types.Cons(new ThreeRight(m.value0, m.value1, m.value2, m.value3, m.value4, m.value5), ctx);
                          $copy_m = m.value6;
                          return;
                      };
                      throw new Error("Failed pattern match at Data.Map line 469, column 34 - line 492, column 80: " + [ m.constructor.name ]);
                  };
                  while (!$tco_done) {
                      $tco_result = $tco_loop($tco_var_ctx, $copy_m);
                  };
                  return $tco_result;
              };
          };
          return down(Data_List_Types.Nil.value);
      };
  };
  var foldableMap = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return function (m) {
              return Data_Foldable.foldMap(Data_List_Types.foldableList)(dictMonoid)(f)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldl(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  }, function (f) {
      return function (z) {
          return function (m) {
              return Data_Foldable.foldr(Data_List_Types.foldableList)(f)(z)(values(m));
          };
      };
  });
  var empty = Leaf.value;
  var fromFoldable = function (dictOrd) {
      return function (dictFoldable) {
          return Data_Foldable.foldl(dictFoldable)(function (m) {
              return function (v) {
                  return insert(dictOrd)(v.value0)(v.value1)(m);
              };
          })(empty);
      };
  };
  var $$delete = function (dictOrd) {
      return function (k) {
          return function (m) {
              return Data_Maybe.maybe(m)(Data_Tuple.snd)(pop(dictOrd)(k)(m));
          };
      };
  };
  exports["empty"] = empty;
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["delete"] = $$delete;
  exports["pop"] = pop;
  exports["member"] = member;
  exports["keys"] = keys;
  exports["values"] = values;
  exports["functorMap"] = functorMap;
  exports["foldableMap"] = foldableMap;
})(PS["Data.Map"] = PS["Data.Map"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var MediaType = function (x) {
      return x;
  }; 
  var newtypeMediaType = new Data_Newtype.Newtype(function (n) {
      return n;
  }, MediaType);
  exports["MediaType"] = MediaType;
  exports["newtypeMediaType"] = newtypeMediaType;
})(PS["Data.MediaType"] = PS["Data.MediaType"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Free = function (x) {
      return x;
  };
  var semiringFree = new Data_Semiring.Semiring(function (v) {
      return function (v1) {
          return Data_Semigroup.append(Data_List_Types.semigroupList)(v)(v1);
      };
  }, function (v) {
      return function (v1) {
          return Control_Bind.bind(Data_List_Types.bindList)(v)(function (v2) {
              return Control_Bind.bind(Data_List_Types.bindList)(v1)(function (v3) {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)(Data_Semigroup.append(Data_List_Types.semigroupList)(v2)(v3));
              });
          });
      };
  }, Data_List.singleton(Data_List_Types.Nil.value), Data_List_Types.Nil.value);
  var newtypeFree = new Data_Newtype.Newtype(function (n) {
      return n;
  }, Free);
  var free = function (a) {
      return Data_List.singleton(Data_List.singleton(a));
  };
  exports["Free"] = Free;
  exports["free"] = free;
  exports["newtypeFree"] = newtypeFree;
  exports["semiringFree"] = semiringFree;
})(PS["Data.Semiring.Free"] = PS["Data.Semiring.Free"] || {});
(function(exports) {
    "use strict";

  exports._copyEff = function (m) {
    return function () {
      var r = {};
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r[k] = m[k];
        }
      }
      return r;
    };
  };

  exports.empty = {};

  exports.runST = function (f) {
    return f;
  };

  exports._foldM = function (bind) {
    return function (f) {
      return function (mz) {
        return function (m) {
          var acc = mz;
          function g(k) {
            return function (z) {
              return f(z)(k)(m[k]);
            };
          }
          for (var k in m) {
            if (hasOwnProperty.call(m, k)) {
              acc = bind(acc)(g(k));
            }
          }
          return acc;
        };
      };
    };
  };

  exports._lookup = function (no, yes, k, m) {
    return k in m ? yes(m[k]) : no;
  };

  function toArrayWithKey(f) {
    return function (m) {
      var r = [];
      for (var k in m) {
        if (hasOwnProperty.call(m, k)) {
          r.push(f(k)(m[k]));
        }
      }
      return r;
    };
  }
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
    "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (m) {
    return function (k) {
      return function (v) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };

  exports["delete"] = function (m) {
    return function (k) {
      return function () {
        delete m[k];
        return m;
      };
    };
  };
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap.ST"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Data_Maybe = PS["Data.Maybe"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
  exports["delete"] = $foreign["delete"];
})(PS["Data.StrMap.ST"] = PS["Data.StrMap.ST"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Data.StrMap"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_ST = PS["Control.Monad.ST"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_FoldableWithIndex = PS["Data.FoldableWithIndex"];
  var Data_Function = PS["Data.Function"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_FunctorWithIndex = PS["Data.FunctorWithIndex"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_TraversableWithIndex = PS["Data.TraversableWithIndex"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Prelude = PS["Prelude"];                                   
  var thawST = $foreign._copyEff;
  var pureST = function (f) {
      return Control_Monad_Eff.runPure($foreign.runST(f));
  };
  var mutate = function (f) {
      return function (m) {
          return pureST(function __do() {
              var v = thawST(m)();
              var v1 = f(v)();
              return v;
          });
      };
  };
  var lookup = Data_Function_Uncurried.runFn4($foreign._lookup)(Data_Maybe.Nothing.value)(Data_Maybe.Just.create);
  var insert = function (k) {
      return function (v) {
          return mutate(function (s) {
              return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(s)(k)(v));
          });
      };
  };
  var fromFoldable = function (dictFoldable) {
      return function (l) {
          return pureST(function __do() {
              var v = Data_StrMap_ST["new"]();
              Control_Monad_Eff.foreachE(Data_Array.fromFoldable(dictFoldable)(l))(function (v1) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST.poke(v)(v1.value0)(v1.value1));
              })();
              return v;
          });
      };
  };
  var fold = $foreign._foldM(Data_Function.applyFlipped);
  var foldMap = function (dictMonoid) {
      return function (f) {
          return fold(function (acc) {
              return function (k) {
                  return function (v) {
                      return Data_Semigroup.append(dictMonoid.Semigroup0())(acc)(f(k)(v));
                  };
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }; 
  var $$delete = function (k) {
      return mutate(function (s) {
          return Data_Functor["void"](Control_Monad_Eff.functorEff)(Data_StrMap_ST["delete"](s)(k));
      });
  };
  var alter = function (f) {
      return function (k) {
          return function (m) {
              var v = f(lookup(k)(m));
              if (v instanceof Data_Maybe.Nothing) {
                  return $$delete(k)(m);
              };
              if (v instanceof Data_Maybe.Just) {
                  return insert(k)(v.value0)(m);
              };
              throw new Error("Failed pattern match at Data.StrMap line 213, column 15 - line 215, column 25: " + [ v.constructor.name ]);
          };
      };
  };
  exports["insert"] = insert;
  exports["lookup"] = lookup;
  exports["fromFoldable"] = fromFoldable;
  exports["alter"] = alter;
  exports["fold"] = fold;
  exports["foldMap"] = foldMap;
  exports["thawST"] = thawST;
  exports["pureST"] = pureST;
  exports["empty"] = $foreign.empty;
})(PS["Data.StrMap"] = PS["Data.StrMap"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Traversable = PS["Data.Traversable"];
  var Prelude = PS["Prelude"];        
  var Valid = (function () {
      function Valid(value0) {
          this.value0 = value0;
      };
      Valid.create = function (value0) {
          return new Valid(value0);
      };
      return Valid;
  })();
  var Invalid = (function () {
      function Invalid(value0) {
          this.value0 = value0;
      };
      Invalid.create = function (value0) {
          return new Invalid(value0);
      };
      return Invalid;
  })();
  var unV = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Invalid) {
                  return v(v2.value0);
              };
              if (v2 instanceof Valid) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Validation.Semiring line 45, column 1 - line 45, column 77: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };
  var invalid = Invalid.create;
  var functorV = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Invalid) {
              return new Invalid(v1.value0);
          };
          if (v1 instanceof Valid) {
              return new Valid(v(v1.value0));
          };
          throw new Error("Failed pattern match at Data.Validation.Semiring line 66, column 1 - line 66, column 37: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applyV = function (dictSemiring) {
      return new Control_Apply.Apply(function () {
          return functorV;
      }, function (v) {
          return function (v1) {
              if (v instanceof Invalid && v1 instanceof Invalid) {
                  return new Invalid(Data_Semiring.mul(dictSemiring)(v.value0)(v1.value0));
              };
              if (v instanceof Invalid) {
                  return new Invalid(v.value0);
              };
              if (v1 instanceof Invalid) {
                  return new Invalid(v1.value0);
              };
              if (v instanceof Valid && v1 instanceof Valid) {
                  return new Valid(v.value0(v1.value0));
              };
              throw new Error("Failed pattern match at Data.Validation.Semiring line 74, column 1 - line 74, column 51: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  var applicativeV = function (dictSemiring) {
      return new Control_Applicative.Applicative(function () {
          return applyV(dictSemiring);
      }, Valid.create);
  };
  var altV = function (dictSemiring) {
      return new Control_Alt.Alt(function () {
          return functorV;
      }, function (v) {
          return function (v1) {
              if (v instanceof Invalid && v1 instanceof Invalid) {
                  return new Invalid(Data_Semiring.add(dictSemiring)(v.value0)(v1.value0));
              };
              if (v instanceof Invalid) {
                  return v1;
              };
              if (v instanceof Valid) {
                  return new Valid(v.value0);
              };
              throw new Error("Failed pattern match at Data.Validation.Semiring line 89, column 1 - line 89, column 47: " + [ v.constructor.name, v1.constructor.name ]);
          };
      });
  };
  exports["unV"] = unV;
  exports["invalid"] = invalid;
  exports["functorV"] = functorV;
  exports["applyV"] = applyV;
  exports["applicativeV"] = applicativeV;
  exports["altV"] = altV;
})(PS["Data.Validation.Semiring"] = PS["Data.Validation.Semiring"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];        
  var OrdBox = (function () {
      function OrdBox(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      OrdBox.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new OrdBox(value0, value1, value2);
              };
          };
      };
      return OrdBox;
  })();
  var unOrdBox = function (v) {
      return v.value2;
  };
  var mkOrdBox = function (dictOrd) {
      return OrdBox.create(Data_Eq.eq(dictOrd.Eq0()))(Data_Ord.compare(dictOrd));
  };
  var eqOrdBox = new Data_Eq.Eq(function (v) {
      return function (v1) {
          return v.value0(v.value2)(v1.value2);
      };
  });
  var ordOrdBox = new Data_Ord.Ord(function () {
      return eqOrdBox;
  }, function (v) {
      return function (v1) {
          return v.value1(v.value2)(v1.value2);
      };
  });
  exports["mkOrdBox"] = mkOrdBox;
  exports["unOrdBox"] = unOrdBox;
  exports["eqOrdBox"] = eqOrdBox;
  exports["ordOrdBox"] = ordOrdBox;
})(PS["Halogen.Data.OrdBox"] = PS["Halogen.Data.OrdBox"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Prelude = PS["Prelude"];
  var RefUpdate = (function () {
      function RefUpdate(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      RefUpdate.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new RefUpdate(value0, value1, value2);
              };
          };
      };
      return RefUpdate;
  })();
  var Query = (function () {
      function Query(value0) {
          this.value0 = value0;
      };
      Query.create = function (value0) {
          return new Query(value0);
      };
      return Query;
  })();                             
  var bifunctorInputF = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              if (v instanceof RefUpdate) {
                  return new RefUpdate(v.value0, v.value1, f(v.value2));
              };
              if (v instanceof Query) {
                  return new Query(g(v.value0));
              };
              throw new Error("Failed pattern match at Halogen.Query.InputF line 21, column 15 - line 23, column 27: " + [ v.constructor.name ]);
          };
      };
  });
  var functorInputF = new Data_Functor.Functor(Data_Bifunctor.rmap(bifunctorInputF));
  exports["RefUpdate"] = RefUpdate;
  exports["Query"] = Query;
  exports["bifunctorInputF"] = bifunctorInputF;
  exports["functorInputF"] = functorInputF;
})(PS["Halogen.Query.InputF"] = PS["Halogen.Query.InputF"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];
  var Prelude = PS["Prelude"];        
  var Step = (function () {
      function Step(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Step.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Step(value0, value1, value2);
              };
          };
      };
      return Step;
  })();
  var step = function (v) {
      return v.value1;
  };
  var halt = function (v) {
      return v.value2;
  };
  var extract = function (v) {
      return v.value0;
  };
  exports["Step"] = Step;
  exports["extract"] = extract;
  exports["step"] = step;
  exports["halt"] = halt;
})(PS["Halogen.VDom.Machine"] = PS["Halogen.VDom.Machine"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var ElemSpec = (function () {
      function ElemSpec(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      ElemSpec.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new ElemSpec(value0, value1, value2);
              };
          };
      };
      return ElemSpec;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Elem = (function () {
      function Elem(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Elem.create = function (value0) {
          return function (value1) {
              return new Elem(value0, value1);
          };
      };
      return Elem;
  })();
  var Keyed = (function () {
      function Keyed(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Keyed.create = function (value0) {
          return function (value1) {
              return new Keyed(value0, value1);
          };
      };
      return Keyed;
  })();
  var Widget = (function () {
      function Widget(value0) {
          this.value0 = value0;
      };
      Widget.create = function (value0) {
          return new Widget(value0);
      };
      return Widget;
  })();
  var Grafted = (function () {
      function Grafted(value0) {
          this.value0 = value0;
      };
      Grafted.create = function (value0) {
          return new Grafted(value0);
      };
      return Grafted;
  })();
  var Graft = (function () {
      function Graft(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Graft.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Graft(value0, value1, value2);
              };
          };
      };
      return Graft;
  })();
  var unGraft = function (f) {
      return function ($124) {
          return f($124);
      };
  };           
  var graft = Unsafe_Coerce.unsafeCoerce;
  var functorElemSpec = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new ElemSpec(v.value0, v.value1, f(v.value2));
      };
  });                                
  var eqElemName = Data_Eq.eqString;
  var bifunctorGraft = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return unGraft(function (v) {
              return graft(new Graft(function ($126) {
                  return f(v.value0($126));
              }, function ($127) {
                  return g(v.value1($127));
              }, v.value2));
          });
      };
  });
  var bifunctorVDom = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              if (v instanceof Text) {
                  return new Text(v.value0);
              };
              if (v instanceof Grafted) {
                  return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(f)(g)(v.value0));
              };
              return new Grafted(graft(new Graft(f, g, v)));
          };
      };
  });
  var runGraft = unGraft(function (v) {
      var go = function (v2) {
          if (v2 instanceof Text) {
              return new Text(v2.value0);
          };
          if (v2 instanceof Elem) {
              return new Elem(Data_Functor.map(functorElemSpec)(v.value0)(v2.value0), Data_Functor.map(Data_Functor.functorArray)(go)(v2.value1));
          };
          if (v2 instanceof Keyed) {
              return new Keyed(Data_Functor.map(functorElemSpec)(v.value0)(v2.value0), Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Data_Tuple.functorTuple)(go))(v2.value1));
          };
          if (v2 instanceof Widget) {
              return new Widget(v.value1(v2.value0));
          };
          if (v2 instanceof Grafted) {
              return new Grafted(Data_Bifunctor.bimap(bifunctorGraft)(v.value0)(v.value1)(v2.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.Types line 75, column 7 - line 75, column 27: " + [ v2.constructor.name ]);
      };
      return go(v.value2);
  });
  exports["Text"] = Text;
  exports["Elem"] = Elem;
  exports["Keyed"] = Keyed;
  exports["Widget"] = Widget;
  exports["Grafted"] = Grafted;
  exports["Graft"] = Graft;
  exports["graft"] = graft;
  exports["unGraft"] = unGraft;
  exports["runGraft"] = runGraft;
  exports["ElemSpec"] = ElemSpec;
  exports["bifunctorVDom"] = bifunctorVDom;
  exports["bifunctorGraft"] = bifunctorGraft;
  exports["functorElemSpec"] = functorElemSpec;
  exports["eqElemName"] = eqElemName;
})(PS["Halogen.VDom.Types"] = PS["Halogen.VDom.Types"] || {});
(function(exports) {
    "use strict";

  exports.unsafeGetAny = function (key, obj) {
    return obj[key];
  };

  exports.unsafeHasAny = function (key, obj) {
    return obj.hasOwnProperty(key);
  };

  exports.unsafeSetAny = function (key, val, obj) {
    return function () {
      obj[key] = val;
    };
  };

  exports.forE = function (a, f) {
    return function () {
      var b = [];
      for (var i = 0; i < a.length; i++) {
        b.push(f(i, a[i])());
      }
      return b;
    };
  };

  exports.forInE = function (o, f) {
    return function () {
      var ks = Object.keys(o);
      for (var i = 0; i < ks.length; i++) {
        var k = ks[i];
        f(k, o[k])();
      }
    };
  };

  exports.diffWithIxE = function (a1, a2, f1, f2, f3) {
    return function () {
      var a3 = [];
      var l1 = a1.length;
      var l2 = a2.length;
      var i  = 0;
      while (1) {
        if (i < l1) {
          if (i < l2) {
            a3.push(f1(i, a1[i], a2[i])());
          } else {
            f2(i, a1[i])();
          }
        } else if (i < l2) {
          a3.push(f3(i, a2[i])());
        } else {
          break;
        }
        i++;
      }
      return a3;
    };
  };

  exports.strMapWithIxE = function (as, fk, f) {
    return function () {
      var o = {};
      for (var i = 0; i < as.length; i++) {
        var a = as[i];
        var k = fk(a);
        o[k] = f(k, i, a)();
      }
      return o;
    };
  };

  exports.diffWithKeyAndIxE = function (o1, as, fk, f1, f2, f3) {
    return function () {
      var o2 = {};
      for (var i = 0; i < as.length; i++) {
        var a = as[i];
        var k = fk(a);
        if (o1.hasOwnProperty(k)) {
          o2[k] = f1(k, i, o1[k], a)();
        } else {
          o2[k] = f3(k, i, a)();
        }
      }
      for (var k in o1) {
        if (k in o2) {
          continue;
        }
        f2(k, o1[k])();
      }
      return o2;
    };
  };

  exports.refEq = function (a, b) {
    return a === b;
  };

  exports.createTextNode = function (s, doc) {
    return function () {
      return doc.createTextNode(s);
    };
  };

  exports.setTextContent = function (s, n) {
    return function () {
      n.textContent = s;
    };
  };

  exports.createElement = function (ns, name, doc) {
    return function () {
      if (ns != null) {
        return doc.createElementNS(ns, name);
      } else {
        return doc.createElement(name)
      }
    };
  };

  exports.insertChildIx = function (i, a, b) {
    return function () {
      var n = b.childNodes.item(i) || null;
      if (n !== a) {
        b.insertBefore(a, n);
      }
    };
  };

  exports.removeChild = function (a, b) {
    return function () {
      if (b && a.parentNode === b) {
        b.removeChild(a);
      }
    };
  };

  exports.unsafeParent = function (a) {
    return a.parentNode;
  };

  exports.setAttribute = function (ns, attr, val, el) {
    return function () {
      if (ns != null) {
        el.setAttributeNS(ns, attr, val);
      } else {
        el.setAttribute(attr, val);
      }
    };
  };

  exports.removeAttribute = function (ns, attr, el) {
    return function () {
      if (ns != null) {
        el.removeAttributeNS(ns, attr);
      } else {
        el.removeAttribute(attr);
      }
    };
  };

  exports.addEventListener = function (ev, listener, el) {
    return function () {
      el.addEventListener(ev, listener, false);
    };
  };

  exports.removeEventListener = function (ev, listener, el) {
    return function () {
      el.removeEventListener(ev, listener, false);
    };
  };

  exports.jsUndefined = void 0;
})(PS["Halogen.VDom.Util"] = PS["Halogen.VDom.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Halogen.VDom.Util"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_StrMap_ST = PS["Data.StrMap.ST"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var unsafeLookup = $foreign.unsafeGetAny;
  var unsafeFreeze = Unsafe_Coerce.unsafeCoerce;
  var pokeMutMap = $foreign.unsafeSetAny;
  var newMutMap = Data_StrMap_ST["new"];
  var effUnit = Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
  var effPure = Control_Applicative.pure(Control_Monad_Eff.applicativeEff);
  exports["effPure"] = effPure;
  exports["effUnit"] = effUnit;
  exports["newMutMap"] = newMutMap;
  exports["pokeMutMap"] = pokeMutMap;
  exports["unsafeFreeze"] = unsafeFreeze;
  exports["unsafeLookup"] = unsafeLookup;
  exports["unsafeGetAny"] = $foreign.unsafeGetAny;
  exports["unsafeHasAny"] = $foreign.unsafeHasAny;
  exports["unsafeSetAny"] = $foreign.unsafeSetAny;
  exports["forE"] = $foreign.forE;
  exports["forInE"] = $foreign.forInE;
  exports["diffWithIxE"] = $foreign.diffWithIxE;
  exports["diffWithKeyAndIxE"] = $foreign.diffWithKeyAndIxE;
  exports["strMapWithIxE"] = $foreign.strMapWithIxE;
  exports["refEq"] = $foreign.refEq;
  exports["createTextNode"] = $foreign.createTextNode;
  exports["setTextContent"] = $foreign.setTextContent;
  exports["createElement"] = $foreign.createElement;
  exports["insertChildIx"] = $foreign.insertChildIx;
  exports["removeChild"] = $foreign.removeChild;
  exports["unsafeParent"] = $foreign.unsafeParent;
  exports["setAttribute"] = $foreign.setAttribute;
  exports["removeAttribute"] = $foreign.removeAttribute;
  exports["addEventListener"] = $foreign.addEventListener;
  exports["removeEventListener"] = $foreign.removeEventListener;
  exports["jsUndefined"] = $foreign.jsUndefined;
})(PS["Halogen.VDom.Util"] = PS["Halogen.VDom.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_VDom = PS["Halogen.VDom"];
  var Halogen_VDom_Machine = PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Halogen_VDom_Util = PS["Halogen.VDom.Util"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var Created = (function () {
      function Created(value0) {
          this.value0 = value0;
      };
      Created.create = function (value0) {
          return new Created(value0);
      };
      return Created;
  })();
  var Removed = (function () {
      function Removed(value0) {
          this.value0 = value0;
      };
      Removed.create = function (value0) {
          return new Removed(value0);
      };
      return Removed;
  })();
  var Attribute = (function () {
      function Attribute(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Attribute.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Attribute(value0, value1, value2);
              };
          };
      };
      return Attribute;
  })();
  var Property = (function () {
      function Property(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Property.create = function (value0) {
          return function (value1) {
              return new Property(value0, value1);
          };
      };
      return Property;
  })();
  var Handler = (function () {
      function Handler(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Handler.create = function (value0) {
          return function (value1) {
              return new Handler(value0, value1);
          };
      };
      return Handler;
  })();
  var Ref = (function () {
      function Ref(value0) {
          this.value0 = value0;
      };
      Ref.create = function (value0) {
          return new Ref(value0);
      };
      return Ref;
  })();
  var unsafeGetProperty = Halogen_VDom_Util.unsafeGetAny;
  var setProperty = Halogen_VDom_Util.unsafeSetAny;
  var removeProperty = function (key, el) {
      var v = Data_Foreign.typeOf(Halogen_VDom_Util.unsafeGetAny(key, el));
      if (v === "string") {
          return Halogen_VDom_Util.unsafeSetAny(key, "", el);
      };
      if (key === "rowSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      if (key === "colSpan") {
          return Halogen_VDom_Util.unsafeSetAny(key, 1, el);
      };
      return Halogen_VDom_Util.unsafeSetAny(key, Halogen_VDom_Util.jsUndefined, el);
  };
  var propToStrKey = function (v) {
      if (v instanceof Attribute && v.value0 instanceof Data_Maybe.Just) {
          return "attr/" + (v.value0.value0 + (":" + v.value1));
      };
      if (v instanceof Attribute) {
          return "attr/:" + v.value1;
      };
      if (v instanceof Property) {
          return "prop/" + v.value0;
      };
      if (v instanceof Handler) {
          return "handler/" + v.value0;
      };
      if (v instanceof Ref) {
          return "ref";
      };
      throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop line 179, column 16 - line 186, column 1: " + [ v.constructor.name ]);
  };
  var propFromString = Unsafe_Coerce.unsafeCoerce;
  var propFromBoolean = Unsafe_Coerce.unsafeCoerce;
  var functorProp = new Data_Functor.Functor(function (f) {
      return function (v) {
          if (v instanceof Handler) {
              return new Handler(v.value0, Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value1));
          };
          if (v instanceof Ref) {
              return new Ref(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(f))(v.value0));
          };
          return v;
      };
  });
  var buildProp = function (emit) {
      return function (el) {
          var removeProp = function (prevEvents) {
              return function (v, v1) {
                  if (v1 instanceof Attribute) {
                      return Halogen_VDom_Util.removeAttribute(Data_Nullable.toNullable(v1.value0), v1.value1, el);
                  };
                  if (v1 instanceof Property) {
                      return removeProperty(v1.value0, el);
                  };
                  if (v1 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v1.value0, prevEvents);
                      return Halogen_VDom_Util.removeEventListener(v1.value0, Data_Tuple.fst(handler), el);
                  };
                  if (v1 instanceof Ref) {
                      return Halogen_VDom_Util.effUnit;
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop line 166, column 5 - line 176, column 21: " + [ v1.constructor.name ]);
              };
          };
          var mbEmit = Data_Maybe.maybe(Halogen_VDom_Util.effUnit)(emit);
          var done = function (ps) {
              var v = Data_StrMap.lookup("ref")(ps);
              if (v instanceof Data_Maybe.Just && v.value0 instanceof Ref) {
                  return mbEmit(v.value0.value0(new Removed(el)));
              };
              return Halogen_VDom_Util.effUnit;
          };
          var diffProp = function (prevEvents, events) {
              return function (v, v1, v11, v2) {
                  if (v11 instanceof Attribute && v2 instanceof Attribute) {
                      var v3 = v11.value2 !== v2.value2;
                      if (v3) {
                          return function __do() {
                              Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el)();
                              return v2;
                          };
                      };
                      return Halogen_VDom_Util.effPure(v2);
                  };
                  if (v11 instanceof Property && v2 instanceof Property) {
                      var v4 = Halogen_VDom_Util.refEq(v11.value1, v2.value1);
                      if (v4) {
                          return Halogen_VDom_Util.effPure(v2);
                      };
                      if (v2.value0 === "value") {
                          var elVal = unsafeGetProperty("value", el);
                          var v5 = !Halogen_VDom_Util.refEq(elVal, v2.value1);
                          if (v5) {
                              return function __do() {
                                  setProperty(v2.value0, v2.value1, el)();
                                  return v2;
                              };
                          };
                          return Halogen_VDom_Util.effPure(v2);
                      };
                      return function __do() {
                          setProperty(v2.value0, v2.value1, el)();
                          return v2;
                      };
                  };
                  if (v11 instanceof Handler && v2 instanceof Handler) {
                      var handler = Halogen_VDom_Util.unsafeLookup(v2.value0, prevEvents);
                      return function __do() {
                          Control_Monad_Eff_Ref.writeRef(Data_Tuple.snd(handler))(v2.value1)();
                          Halogen_VDom_Util.pokeMutMap(v2.value0, handler, events)();
                          return v2;
                      };
                  };
                  return Halogen_VDom_Util.effPure(v2);
              };
          };
          var applyProp = function (events) {
              return function (v, v1, v2) {
                  if (v2 instanceof Attribute) {
                      return function __do() {
                          Halogen_VDom_Util.setAttribute(Data_Nullable.toNullable(v2.value0), v2.value1, v2.value2, el)();
                          return v2;
                      };
                  };
                  if (v2 instanceof Property) {
                      return function __do() {
                          setProperty(v2.value0, v2.value1, el)();
                          return v2;
                      };
                  };
                  if (v2 instanceof Handler) {
                      var v3 = Halogen_VDom_Util.unsafeGetAny(v2.value0, events);
                      if (Halogen_VDom_Util.unsafeHasAny(v2.value0, events)) {
                          return function __do() {
                              Control_Monad_Eff_Ref.writeRef(Data_Tuple.snd(v3))(v2.value1)();
                              return v2;
                          };
                      };
                      return function __do() {
                          var v4 = Control_Monad_Eff_Ref.newRef(v2.value1)();
                          var listener = DOM_Event_EventTarget.eventListener(function (ev) {
                              return function __do() {
                                  var v5 = Control_Monad_Eff_Ref.readRef(v4)();
                                  return mbEmit(v5(ev))();
                              };
                          });
                          Halogen_VDom_Util.pokeMutMap(v2.value0, new Data_Tuple.Tuple(listener, v4), events)();
                          Halogen_VDom_Util.addEventListener(v2.value0, listener, el)();
                          return v2;
                      };
                  };
                  if (v2 instanceof Ref) {
                      return function __do() {
                          mbEmit(v2.value0(new Created(el)))();
                          return v2;
                      };
                  };
                  throw new Error("Failed pattern match at Halogen.VDom.DOM.Prop line 107, column 5 - line 130, column 15: " + [ v2.constructor.name ]);
              };
          };
          var patch = function (prevEvents, ps1) {
              return function (ps2) {
                  return function __do() {
                      var v = Halogen_VDom_Util.newMutMap();
                      var onThis = removeProp(prevEvents);
                      var onThese = diffProp(prevEvents, v);
                      var onThat = applyProp(v);
                      var v1 = Halogen_VDom_Util.diffWithKeyAndIxE(ps1, ps2, propToStrKey, onThese, onThis, onThat)();
                      return new Halogen_VDom_Machine.Step(Data_Unit.unit, patch(Halogen_VDom_Util.unsafeFreeze(v), v1), done(v1));
                  };
              };
          };
          var render = function (ps1) {
              return function __do() {
                  var v = Halogen_VDom_Util.newMutMap();
                  var v1 = Halogen_VDom_Util.strMapWithIxE(ps1, propToStrKey, applyProp(v))();
                  return new Halogen_VDom_Machine.Step(Data_Unit.unit, patch(Halogen_VDom_Util.unsafeFreeze(v), v1), done(v1));
              };
          };
          return render;
      };
  };
  exports["Attribute"] = Attribute;
  exports["Property"] = Property;
  exports["Handler"] = Handler;
  exports["Ref"] = Ref;
  exports["Created"] = Created;
  exports["Removed"] = Removed;
  exports["propFromString"] = propFromString;
  exports["propFromBoolean"] = propFromBoolean;
  exports["buildProp"] = buildProp;
  exports["functorProp"] = functorProp;
})(PS["Halogen.VDom.DOM.Prop"] = PS["Halogen.VDom.DOM.Prop"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_Indexed_ButtonType = PS["DOM.HTML.Indexed.ButtonType"];
  var DOM_HTML_Indexed_CrossOriginValue = PS["DOM.HTML.Indexed.CrossOriginValue"];
  var DOM_HTML_Indexed_DirValue = PS["DOM.HTML.Indexed.DirValue"];
  var DOM_HTML_Indexed_FormMethod = PS["DOM.HTML.Indexed.FormMethod"];
  var DOM_HTML_Indexed_InputType = PS["DOM.HTML.Indexed.InputType"];
  var DOM_HTML_Indexed_KindValue = PS["DOM.HTML.Indexed.KindValue"];
  var DOM_HTML_Indexed_MenuType = PS["DOM.HTML.Indexed.MenuType"];
  var DOM_HTML_Indexed_MenuitemType = PS["DOM.HTML.Indexed.MenuitemType"];
  var DOM_HTML_Indexed_OnOff = PS["DOM.HTML.Indexed.OnOff"];
  var DOM_HTML_Indexed_OrderedListType = PS["DOM.HTML.Indexed.OrderedListType"];
  var DOM_HTML_Indexed_PreloadValue = PS["DOM.HTML.Indexed.PreloadValue"];
  var DOM_HTML_Indexed_ScopeValue = PS["DOM.HTML.Indexed.ScopeValue"];
  var DOM_HTML_Indexed_StepValue = PS["DOM.HTML.Indexed.StepValue"];
  var DOM_HTML_Indexed_WrapValue = PS["DOM.HTML.Indexed.WrapValue"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Halogen_VDom = PS["Halogen.VDom"];
  var Halogen_VDom_DOM_Prop = PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var HTML = function (x) {
      return x;
  };
  var ClassName = function (x) {
      return x;
  };
  var IsProp = function (toPropValue) {
      this.toPropValue = toPropValue;
  }; 
  var toPropValue = function (dict) {
      return dict.toPropValue;
  };
  var text = function ($54) {
      return HTML(Halogen_VDom_Types.Text.create($54));
  };
  var stringIsProp = new IsProp(Halogen_VDom_DOM_Prop.propFromString);
  var slot = function ($56) {
      return HTML(Halogen_VDom_Types.Widget.create($56));
  }; 
  var ref = function (f) {
      return Halogen_VDom_DOM_Prop.Ref.create(function ($58) {
          return f((function (v) {
              if (v instanceof Halogen_VDom_DOM_Prop.Created) {
                  return new Data_Maybe.Just(v.value0);
              };
              if (v instanceof Halogen_VDom_DOM_Prop.Removed) {
                  return Data_Maybe.Nothing.value;
              };
              throw new Error("Failed pattern match at Halogen.HTML.Core line 104, column 21 - line 106, column 23: " + [ v.constructor.name ]);
          })($58));
      });
  };
  var prop = function (dictIsProp) {
      return function (v) {
          return function ($59) {
              return Halogen_VDom_DOM_Prop.Property.create(v)(toPropValue(dictIsProp)($59));
          };
      };
  };       
  var newtypeClassName = new Data_Newtype.Newtype(function (n) {
      return n;
  }, ClassName);
  var mediaTypeIsProp = new IsProp(function ($65) {
      return Halogen_VDom_DOM_Prop.propFromString(Data_Newtype.unwrap(Data_MediaType.newtypeMediaType)($65));
  });                                                           
  var inputTypeIsProp = new IsProp(function ($67) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_InputType.renderInputType($67));
  });
  var handler = Halogen_VDom_DOM_Prop.Handler.create;
  var element = function (ns) {
      return function (name) {
          return function (props) {
              return function (children) {
                  return new Halogen_VDom_Types.Elem(new Halogen_VDom_Types.ElemSpec(ns, name, props), children);
              };
          };
      };
  }; 
  var buttonTypeIsProp = new IsProp(function ($71) {
      return Halogen_VDom_DOM_Prop.propFromString(DOM_HTML_Indexed_ButtonType.renderButtonType($71));
  });
  var booleanIsProp = new IsProp(Halogen_VDom_DOM_Prop.propFromBoolean);
  var bifunctorHTML = new Data_Bifunctor.Bifunctor(function (f) {
      return function (g) {
          return function (v) {
              return Data_Bifunctor.bimap(Halogen_VDom_Types.bifunctorVDom)(Data_Functor.map(Data_Functor.functorArray)(Data_Functor.map(Halogen_VDom_DOM_Prop.functorProp)(Data_Functor.map(Halogen_Query_InputF.functorInputF)(g))))(f)(v);
          };
      };
  });                                                                            
  var attr = function (ns) {
      return function (v) {
          return Halogen_VDom_DOM_Prop.Attribute.create(ns)(v);
      };
  };
  exports["HTML"] = HTML;
  exports["slot"] = slot;
  exports["text"] = text;
  exports["element"] = element;
  exports["prop"] = prop;
  exports["attr"] = attr;
  exports["handler"] = handler;
  exports["ref"] = ref;
  exports["IsProp"] = IsProp;
  exports["toPropValue"] = toPropValue;
  exports["ClassName"] = ClassName;
  exports["bifunctorHTML"] = bifunctorHTML;
  exports["stringIsProp"] = stringIsProp;
  exports["booleanIsProp"] = booleanIsProp;
  exports["mediaTypeIsProp"] = mediaTypeIsProp;
  exports["buttonTypeIsProp"] = buttonTypeIsProp;
  exports["inputTypeIsProp"] = inputTypeIsProp;
  exports["newtypeClassName"] = newtypeClassName;
})(PS["Halogen.HTML.Core"] = PS["Halogen.HTML.Core"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];        
  var Listening = (function () {
      function Listening() {

      };
      Listening.value = new Listening();
      return Listening;
  })();
  var Done = (function () {
      function Done() {

      };
      Done.value = new Done();
      return Done;
  })();
  var unEventSource = function (v) {
      return v;
  };
  var eqSubscribeStatus = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Listening && y instanceof Listening) {
              return true;
          };
          if (x instanceof Done && y instanceof Done) {
              return true;
          };
          return false;
      };
  });
  exports["Listening"] = Listening;
  exports["Done"] = Done;
  exports["unEventSource"] = unEventSource;
  exports["eqSubscribeStatus"] = eqSubscribeStatus;
})(PS["Halogen.Query.EventSource"] = PS["Halogen.Query.EventSource"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var unFork = Unsafe_Coerce.unsafeCoerce;
  exports["unFork"] = unFork;
})(PS["Halogen.Query.ForkF"] = PS["Halogen.Query.ForkF"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Applicative_Free = PS["Control.Applicative.Free"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Fork = PS["Control.Monad.Fork"];
  var Control_Monad_Fork_Class = PS["Control.Monad.Fork.Class"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Coyoneda = PS["Data.Coyoneda"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_ForkF = PS["Halogen.Query.ForkF"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var HalogenM = function (x) {
      return x;
  };
  var State = (function () {
      function State(value0) {
          this.value0 = value0;
      };
      State.create = function (value0) {
          return new State(value0);
      };
      return State;
  })();
  var Subscribe = (function () {
      function Subscribe(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Subscribe.create = function (value0) {
          return function (value1) {
              return new Subscribe(value0, value1);
          };
      };
      return Subscribe;
  })();
  var Lift = (function () {
      function Lift(value0) {
          this.value0 = value0;
      };
      Lift.create = function (value0) {
          return new Lift(value0);
      };
      return Lift;
  })();
  var Halt = (function () {
      function Halt(value0) {
          this.value0 = value0;
      };
      Halt.create = function (value0) {
          return new Halt(value0);
      };
      return Halt;
  })();
  var GetSlots = (function () {
      function GetSlots(value0) {
          this.value0 = value0;
      };
      GetSlots.create = function (value0) {
          return new GetSlots(value0);
      };
      return GetSlots;
  })();
  var CheckSlot = (function () {
      function CheckSlot(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      CheckSlot.create = function (value0) {
          return function (value1) {
              return new CheckSlot(value0, value1);
          };
      };
      return CheckSlot;
  })();
  var ChildQuery = (function () {
      function ChildQuery(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ChildQuery.create = function (value0) {
          return function (value1) {
              return new ChildQuery(value0, value1);
          };
      };
      return ChildQuery;
  })();
  var Raise = (function () {
      function Raise(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Raise.create = function (value0) {
          return function (value1) {
              return new Raise(value0, value1);
          };
      };
      return Raise;
  })();
  var Par = (function () {
      function Par(value0) {
          this.value0 = value0;
      };
      Par.create = function (value0) {
          return new Par(value0);
      };
      return Par;
  })();
  var Fork = (function () {
      function Fork(value0) {
          this.value0 = value0;
      };
      Fork.create = function (value0) {
          return new Fork(value0);
      };
      return Fork;
  })();
  var GetRef = (function () {
      function GetRef(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GetRef.create = function (value0) {
          return function (value1) {
              return new GetRef(value0, value1);
          };
      };
      return GetRef;
  })();
  var raise = function (o) {
      return HalogenM(Control_Monad_Free.liftF(new Raise(o, Data_Unit.unit)));
  };                                                                                                                
  var getRef = function (p) {
      return HalogenM(Control_Monad_Free.liftF(new GetRef(p, Control_Category.id(Control_Category.categoryFn))));
  };
  var functorHalogenM = new Data_Functor.Functor(function (f) {
      return function (v) {
          return Data_Functor.map(Control_Monad_Free.freeFunctor)(f)(v);
      };
  });
  var applyHalogenM = new Control_Apply.Apply(function () {
      return functorHalogenM;
  }, function (v) {
      return function (v1) {
          return Control_Apply.apply(Control_Monad_Free.freeApply)(v)(v1);
      };
  });
  var bindHalogenM = new Control_Bind.Bind(function () {
      return applyHalogenM;
  }, function (v) {
      return function (f) {
          return Control_Bind.bind(Control_Monad_Free.freeBind)(v)(function (x) {
              var v1 = f(x);
              return v1;
          });
      };
  });                                                       
  var applicativeHalogenM = new Control_Applicative.Applicative(function () {
      return applyHalogenM;
  }, function (a) {
      return Control_Applicative.pure(Control_Monad_Free.freeApplicative)(a);
  });
  var monadHalogenM = new Control_Monad.Monad(function () {
      return applicativeHalogenM;
  }, function () {
      return bindHalogenM;
  });
  var monadEffHalogenM = function (dictMonadEff) {
      return new Control_Monad_Eff_Class.MonadEff(function () {
          return monadHalogenM;
      }, function (eff) {
          return HalogenM(Control_Monad_Free.liftF(Lift.create(Control_Monad_Eff_Class.liftEff(dictMonadEff)(eff))));
      });
  };
  var monadAffHalogenM = function (dictMonadAff) {
      return new Control_Monad_Aff_Class.MonadAff(function () {
          return monadEffHalogenM(dictMonadAff.MonadEff0());
      }, function (aff) {
          return HalogenM(Control_Monad_Free.liftF(Lift.create(Control_Monad_Aff_Class.liftAff(dictMonadAff)(aff))));
      });
  };
  var monadStateHalogenM = new Control_Monad_State_Class.MonadState(function () {
      return monadHalogenM;
  }, function ($180) {
      return HalogenM(Control_Monad_Free.liftF(State.create($180)));
  });
  exports["State"] = State;
  exports["Subscribe"] = Subscribe;
  exports["Lift"] = Lift;
  exports["Halt"] = Halt;
  exports["GetSlots"] = GetSlots;
  exports["CheckSlot"] = CheckSlot;
  exports["ChildQuery"] = ChildQuery;
  exports["Raise"] = Raise;
  exports["Par"] = Par;
  exports["Fork"] = Fork;
  exports["GetRef"] = GetRef;
  exports["HalogenM"] = HalogenM;
  exports["getRef"] = getRef;
  exports["raise"] = raise;
  exports["functorHalogenM"] = functorHalogenM;
  exports["applyHalogenM"] = applyHalogenM;
  exports["applicativeHalogenM"] = applicativeHalogenM;
  exports["bindHalogenM"] = bindHalogenM;
  exports["monadHalogenM"] = monadHalogenM;
  exports["monadEffHalogenM"] = monadEffHalogenM;
  exports["monadAffHalogenM"] = monadAffHalogenM;
  exports["monadStateHalogenM"] = monadStateHalogenM;
})(PS["Halogen.Query.HalogenM"] = PS["Halogen.Query.HalogenM"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Const = PS["Data.Const"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var ComponentSlot = (function () {
      function ComponentSlot(value0, value1, value2, value3, value4, value5) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
          this.value4 = value4;
          this.value5 = value5;
      };
      ComponentSlot.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return function (value4) {
                          return function (value5) {
                              return new ComponentSlot(value0, value1, value2, value3, value4, value5);
                          };
                      };
                  };
              };
          };
      };
      return ComponentSlot;
  })();
  var unComponentSlot = function (f) {
      return function (cs) {
          return f(cs.value0)(cs.value1)(cs.value2)(cs.value3)(cs.value4)(cs.value5);
      };
  };
  var unComponent = Unsafe_Coerce.unsafeCoerce;
  var mkComponentSlot = ComponentSlot.create;
  var mkComponent = Unsafe_Coerce.unsafeCoerce;
  var parentComponent = function (dictOrd) {
      return function (spec) {
          return mkComponent({
              initialState: spec.initialState,
              render: spec.render,
              "eval": spec["eval"],
              receiver: spec.receiver,
              initializer: Data_Maybe.Nothing.value,
              finalizer: Data_Maybe.Nothing.value,
              mkOrdBox: Halogen_Data_OrdBox.mkOrdBox(dictOrd)
          });
      };
  };
  var lifecycleParentComponent = function (dictOrd) {
      return function (spec) {
          return mkComponent({
              initialState: spec.initialState,
              render: spec.render,
              "eval": spec["eval"],
              receiver: spec.receiver,
              initializer: spec.initializer,
              finalizer: spec.finalizer,
              mkOrdBox: Halogen_Data_OrdBox.mkOrdBox(dictOrd)
          });
      };
  };
  var lifecycleComponent = function (dictBifunctor) {
      return function (spec) {
          return mkComponent({
              initialState: spec.initialState,
              render: spec.render,
              "eval": spec["eval"],
              receiver: spec.receiver,
              initializer: spec.initializer,
              finalizer: spec.finalizer,
              mkOrdBox: Halogen_Data_OrdBox.mkOrdBox(Data_Ord.ordVoid)
          });
      };
  }; 
  var component = function (dictBifunctor) {
      return function (spec) {
          return lifecycleComponent(dictBifunctor)({
              initialState: spec.initialState,
              render: spec.render,
              "eval": spec["eval"],
              receiver: spec.receiver,
              initializer: Data_Maybe.Nothing.value,
              finalizer: Data_Maybe.Nothing.value
          });
      };
  };
  exports["mkComponent"] = mkComponent;
  exports["unComponent"] = unComponent;
  exports["component"] = component;
  exports["lifecycleComponent"] = lifecycleComponent;
  exports["parentComponent"] = parentComponent;
  exports["lifecycleParentComponent"] = lifecycleParentComponent;
  exports["mkComponentSlot"] = mkComponentSlot;
  exports["unComponentSlot"] = unComponentSlot;
})(PS["Halogen.Component"] = PS["Halogen.Component"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Either = PS["Data.Either"];
  var Data_Either_Nested = PS["Data.Either.Nested"];
  var Data_Functor_Coproduct = PS["Data.Functor.Coproduct"];
  var Data_Functor_Coproduct_Nested = PS["Data.Functor.Coproduct.Nested"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Prism = PS["Data.Lens.Prism"];
  var Data_Maybe = PS["Data.Maybe"];
  var _Either3 = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Either_Nested.in3)(Data_Either_Nested.at3(Data_Maybe.Nothing.value)(Data_Maybe.Just.create))(dictChoice);
  };
  var _Either2 = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Either_Nested.in2)(Data_Either_Nested.at2(Data_Maybe.Nothing.value)(Data_Maybe.Just.create))(dictChoice);
  };
  var _Either1 = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Either_Nested.in1)(Data_Either_Nested.at1(Data_Maybe.Nothing.value)(Data_Maybe.Just.create))(dictChoice);
  };
  var _Coproduct3 = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Functor_Coproduct_Nested.in3)(Data_Functor_Coproduct_Nested.at3(Data_Maybe.Nothing.value)(Data_Maybe.Just.create))(dictChoice);
  };
  var _Coproduct2 = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Functor_Coproduct_Nested.in2)(Data_Functor_Coproduct_Nested.at2(Data_Maybe.Nothing.value)(Data_Maybe.Just.create))(dictChoice);
  };
  var _Coproduct1 = function (dictChoice) {
      return Data_Lens_Prism["prism'"](Data_Functor_Coproduct_Nested.in1)(Data_Functor_Coproduct_Nested.at1(Data_Maybe.Nothing.value)(Data_Maybe.Just.create))(dictChoice);
  };
  exports["_Either1"] = _Either1;
  exports["_Coproduct1"] = _Coproduct1;
  exports["_Either2"] = _Either2;
  exports["_Coproduct2"] = _Coproduct2;
  exports["_Either3"] = _Either3;
  exports["_Coproduct3"] = _Coproduct3;
})(PS["Halogen.Data.Prism"] = PS["Halogen.Data.Prism"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Lens = PS["Data.Lens"];
  var Data_Lens_Fold = PS["Data.Lens.Fold"];
  var Data_Lens_Internal_Forget = PS["Data.Lens.Internal.Forget"];
  var Data_Lens_Internal_Tagged = PS["Data.Lens.Internal.Tagged"];
  var Data_Lens_Prism = PS["Data.Lens.Prism"];
  var Data_Lens_Prism_Coproduct = PS["Data.Lens.Prism.Coproduct"];
  var Data_Lens_Prism_Either = PS["Data.Lens.Prism.Either"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Halogen_Data_Prism = PS["Halogen.Data.Prism"];
  var Prelude = PS["Prelude"];        
  var ChildPath = (function () {
      function ChildPath(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ChildPath.create = function (value0) {
          return function (value1) {
              return new ChildPath(value0, value1);
          };
      };
      return ChildPath;
  })();
  var prjQuery = function (v) {
      return Data_Lens_Fold.preview(v.value0(Data_Lens_Internal_Forget.choiceForget(Data_Maybe_First.monoidFirst)));
  };
  var injSlot = function (v) {
      return Data_Lens_Prism.review(v.value1(Data_Lens_Internal_Tagged.taggedChoice));
  };
  var injQuery = function (v) {
      return Data_Lens_Prism.review(v.value0(Data_Lens_Internal_Tagged.taggedChoice));
  }; 
  var cp3 = new ChildPath(function (dictChoice) {
      return Halogen_Data_Prism._Coproduct3(dictChoice);
  }, function (dictChoice) {
      return Halogen_Data_Prism._Either3(dictChoice);
  });
  var cp2 = new ChildPath(function (dictChoice) {
      return Halogen_Data_Prism._Coproduct2(dictChoice);
  }, function (dictChoice) {
      return Halogen_Data_Prism._Either2(dictChoice);
  });
  var cp1 = new ChildPath(function (dictChoice) {
      return Halogen_Data_Prism._Coproduct1(dictChoice);
  }, function (dictChoice) {
      return Halogen_Data_Prism._Either1(dictChoice);
  });
  exports["ChildPath"] = ChildPath;
  exports["cp1"] = cp1;
  exports["cp2"] = cp2;
  exports["cp3"] = cp3;
  exports["injQuery"] = injQuery;
  exports["injSlot"] = injSlot;
  exports["prjQuery"] = prjQuery;
})(PS["Halogen.Component.ChildPath"] = PS["Halogen.Component.ChildPath"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_HTML_Indexed = PS["DOM.HTML.Indexed"];
  var DOM_HTML_Indexed_ButtonType = PS["DOM.HTML.Indexed.ButtonType"];
  var DOM_HTML_Indexed_FormMethod = PS["DOM.HTML.Indexed.FormMethod"];
  var DOM_HTML_Indexed_InputType = PS["DOM.HTML.Indexed.InputType"];
  var DOM_HTML_Indexed_MenuType = PS["DOM.HTML.Indexed.MenuType"];
  var DOM_HTML_Indexed_MenuitemType = PS["DOM.HTML.Indexed.MenuitemType"];
  var DOM_HTML_Indexed_OnOff = PS["DOM.HTML.Indexed.OnOff"];
  var DOM_HTML_Indexed_OrderedListType = PS["DOM.HTML.Indexed.OrderedListType"];
  var DOM_HTML_Indexed_PreloadValue = PS["DOM.HTML.Indexed.PreloadValue"];
  var DOM_HTML_Indexed_StepValue = PS["DOM.HTML.Indexed.StepValue"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_String = PS["Data.String"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var ref = (function () {
      var go = function (p) {
          return function (mel) {
              return Data_Maybe.Just.create(new Halogen_Query_InputF.RefUpdate(p, Data_Functor.map(Data_Maybe.functorMaybe)(Data_Foreign.toForeign)(mel), Data_Unit.unit));
          };
      };
      return function ($6) {
          return Halogen_HTML_Core.ref(go($6));
      };
  })();
  var prop = function (dictIsProp) {
      return Halogen_HTML_Core.prop(dictIsProp);
  };                                                        
  var type_ = function (dictIsProp) {
      return prop(dictIsProp)("type");
  };
  var value = prop(Halogen_HTML_Core.stringIsProp)("value");
  var href = prop(Halogen_HTML_Core.stringIsProp)("href");           
  var disabled = prop(Halogen_HTML_Core.booleanIsProp)("disabled");
  var classes = function ($8) {
      return prop(Halogen_HTML_Core.stringIsProp)("className")(Data_String.joinWith(" ")(Data_Functor.map(Data_Functor.functorArray)(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName))($8)));
  };
  var class_ = function ($9) {
      return prop(Halogen_HTML_Core.stringIsProp)("className")(Data_Newtype.unwrap(Halogen_HTML_Core.newtypeClassName)($9));
  };
  var checked = prop(Halogen_HTML_Core.booleanIsProp)("checked");
  var attr = Halogen_HTML_Core.attr(Data_Maybe.Nothing.value);
  exports["prop"] = prop;
  exports["attr"] = attr;
  exports["ref"] = ref;
  exports["class_"] = class_;
  exports["classes"] = classes;
  exports["href"] = href;
  exports["type_"] = type_;
  exports["value"] = value;
  exports["disabled"] = disabled;
  exports["checked"] = checked;
})(PS["Halogen.HTML.Properties"] = PS["Halogen.HTML.Properties"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_HTML_Indexed = PS["DOM.HTML.Indexed"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Halogen_VDom = PS["Halogen.VDom"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var element = Halogen_HTML_Core.element(Data_Maybe.Nothing.value);
  var footer = element("footer");
  var h1 = element("h1");
  var h1_ = h1([  ]);
  var h2 = element("h2");
  var h3 = element("h3");
  var h3_ = h3([  ]);    
  var header = element("header");
  var i = element("i");
  var input = function (props) {
      return element("input")(props)([  ]);
  };                         
  var li = element("li");
  var li_ = li([  ]);      
  var nav = element("nav");  
  var p = element("p");
  var p_ = p([  ]);
  var span = element("span");
  var style = element("style");
  var ul = element("ul");
  var div = element("div");
  var button = element("button");
  var a = element("a");
  exports["element"] = element;
  exports["a"] = a;
  exports["button"] = button;
  exports["div"] = div;
  exports["footer"] = footer;
  exports["h1"] = h1;
  exports["h1_"] = h1_;
  exports["h2"] = h2;
  exports["h3"] = h3;
  exports["h3_"] = h3_;
  exports["header"] = header;
  exports["i"] = i;
  exports["input"] = input;
  exports["li"] = li;
  exports["li_"] = li_;
  exports["nav"] = nav;
  exports["p"] = p;
  exports["p_"] = p_;
  exports["span"] = span;
  exports["style"] = style;
  exports["ul"] = ul;
})(PS["Halogen.HTML.Elements"] = PS["Halogen.HTML.Elements"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Prelude = PS["Prelude"];        
  var slot$prime = function (i) {
      return function (p) {
          return function (component) {
              return function (input) {
                  return function (outputQuery) {
                      var pq = Halogen_Component_ChildPath.prjQuery(i);
                      var f = function ($2) {
                          return Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_Component_ChildPath.injQuery(i))(Halogen_Component.unComponent(function (v) {
                              return v.receiver;
                          })(component)($2));
                      };
                      return Halogen_HTML_Core.slot(Halogen_Component.mkComponentSlot(Halogen_Component_ChildPath.injSlot(i)(p))(component)(input)(f)(outputQuery)(pq));
                  };
              };
          };
      };
  };
  var slot = function (p) {
      return function (component) {
          return function (input) {
              return function (outputQuery) {
                  var f = Halogen_Component.unComponent(function (v) {
                      return v.receiver;
                  })(component);
                  return Halogen_HTML_Core.slot(Halogen_Component.mkComponentSlot(p)(component)(input)(f)(outputQuery)(Data_Maybe.Just.create));
              };
          };
      };
  };
  exports["slot"] = slot;
  exports["slot'"] = slot$prime;
})(PS["Halogen.HTML"] = PS["Halogen.HTML"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS_Property = PS["CSS.Property"];
  var CSS_Render = PS["CSS.Render"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_MediaType = PS["Data.MediaType"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_String = PS["Data.String"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Prelude = PS["Prelude"];        
  var stylesheet = function (css) {
      var content = Data_Maybe.fromMaybe("")(CSS_Render.renderedSheet(CSS_Render.render(css)));
      return Halogen_HTML_Elements.style([ Halogen_HTML_Properties.type_(Halogen_HTML_Core.mediaTypeIsProp)("text/css") ])([ Halogen_HTML_Core.text(content) ]);
  };
  var style = (function () {
      var toString = function ($4) {
          return Data_String.joinWith("; ")(Data_StrMap.foldMap(Data_Monoid.monoidArray)(function (key) {
              return function (val) {
                  return [ key + (": " + val) ];
              };
          })($4));
      };
      var rights = Data_Array.concatMap(Data_Foldable.foldMap(Data_Either.foldableEither)(Data_Monoid.monoidArray)(Data_Array.singleton));
      var property = function (v) {
          if (v instanceof CSS_Stylesheet.Property) {
              return new Data_Maybe.Just(new Data_Tuple.Tuple(v.value0, v.value1));
          };
          return Data_Maybe.Nothing.value;
      };
      var rules = function (rs) {
          var properties = Control_Bind.bind(Control_Bind.bindArray)(Data_Array.mapMaybe(property)(rs))(function ($5) {
              return rights(CSS_Render.collect($5));
          });
          return Data_StrMap.fromFoldable(Data_Foldable.foldableArray)(properties);
      };
      return function ($6) {
          return Halogen_HTML_Properties.attr("style")(toString(rules(CSS_Stylesheet.runS($6))));
      };
  })();
  exports["style"] = style;
  exports["stylesheet"] = stylesheet;
})(PS["Halogen.HTML.CSS"] = PS["Halogen.HTML.CSS"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var getHTMLElementRef = (function () {
      var go = function ($10) {
          return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(DOM_HTML_Types.readHTMLElement($10)));
      };
      return function ($11) {
          return Data_Functor.map(Halogen_Query_HalogenM.functorHalogenM)(function (v) {
              return Control_Bind.bindFlipped(Data_Maybe.bindMaybe)(go)(v);
          })(Halogen_Query_HalogenM.getRef($11));
      };
  })();
  var action = function (act) {
      return act(Data_Unit.unit);
  };
  exports["action"] = action;
  exports["getHTMLElementRef"] = getHTMLElementRef;
})(PS["Halogen.Query"] = PS["Halogen.Query"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Monad_Except_Trans = PS["Control.Monad.Except.Trans"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_Event_Event = PS["DOM.Event.Event"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var DOM_HTML_Event_EventTypes = PS["DOM.HTML.Event.EventTypes"];
  var DOM_HTML_Event_Types = PS["DOM.HTML.Event.Types"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Foreign_Index = PS["Data.Foreign.Index"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Identity = PS["Data.Identity"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];      
  var mouseHandler = Unsafe_Coerce.unsafeCoerce;
  var input_ = function (f) {
      return function (v) {
          return Data_Maybe.Just.create(Halogen_Query.action(f));
      };
  };
  var input = function (f) {
      return function (x) {
          return Data_Maybe.Just.create(Halogen_Query.action(f(x)));
      };
  };
  var handler = function (et) {
      return function ($1) {
          return Halogen_HTML_Core.handler(et)(Data_Functor.map(Data_Functor.functorFn)(Data_Functor.map(Data_Maybe.functorMaybe)(Halogen_Query_InputF.Query.create))($1));
      };
  };                                                       
  var onClick = function ($2) {
      return handler(DOM_HTML_Event_EventTypes.click)(mouseHandler($2));
  };
  exports["input"] = input;
  exports["input_"] = input_;
  exports["handler"] = handler;
  exports["onClick"] = onClick;
})(PS["Halogen.HTML.Events"] = PS["Halogen.HTML.Events"] || {});
(function(exports) {exports.upgradeElement = function(element) {
    return function() {
      try {
        console.log("MDL.upgradeElement: " + element.classList);
        componentHandler.upgradeElement(element);
      } catch (e) {
        console.error('MDL.upgradeElement: failed to upgradeElement', element, e);
      }
      return {};
    };
  };

  exports.upgradeElementsBySelector = function(selector) {
    return function() {
      try {
        console.log("MDL.upgradeElementsBySelector " + selector);
        var elements = document.querySelectorAll(selector);
        if (elements && elements.length > 0) {
          elements.forEach(function(element) {
            componentHandler.upgradeElement(element);
          });
        }
      } catch (e) {
        console.error('MDL.upgradeElementsBySelector: failed to upgradeElements by selector', selector, e);
      }
      return {};
    };
  };
})(PS["Halogen.MDL"] = PS["Halogen.MDL"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Halogen.MDL"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen = PS["Halogen"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Prelude = PS["Prelude"];        
  var upgradeElementsByClassName = function (v) {
      return $foreign.upgradeElementsBySelector("." + v);
  };
  var upgradeElementByRef = function (dictMonadEff) {
      return function (ref) {
          return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query.getHTMLElementRef(ref))(function (v) {
              if (v instanceof Data_Maybe.Just) {
                  return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(dictMonadEff))($foreign.upgradeElement(v.value0));
              };
              if (v instanceof Data_Maybe.Nothing) {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
              };
              throw new Error("Failed pattern match at Halogen.MDL line 35, column 3 - line 37, column 25: " + [ v.constructor.name ]);
          });
      };
  };
  exports["upgradeElementsByClassName"] = upgradeElementsByClassName;
  exports["upgradeElementByRef"] = upgradeElementByRef;
})(PS["Halogen.MDL"] = PS["Halogen.MDL"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];        
  var str = {
      _3dRotation: "3d_rotation",
      accessibility: "accessibility",
      accessibile: "accessibile",
      accountBalance: "accoun_balance",
      accountBalanceWallet: "accoun_balance_wallet",
      accountBox: "account_box",
      accountCircle: "account_circle",
      addShoppingCart: "add_shopping_cart",
      alarm: "alarm",
      cancel: "cancel",
      moreVert: "more_vert",
      person: "person",
      share: "share",
      star: "star"
  };
  var cl = {
      materialIcons: "material-icons"
  };
  exports["cl"] = cl;
  exports["str"] = str;
})(PS["Halogen.MDL.MaterialIcon"] = PS["Halogen.MDL.MaterialIcon"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];        
  var cl = {
      jsRippleEffect: "mdl-js-ripple-effect"
  };
  exports["cl"] = cl;
})(PS["Halogen.MDL.RippleEffect"] = PS["Halogen.MDL.RippleEffect"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff = PS["Halogen.Aff"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_MDL = PS["Halogen.MDL"];
  var Halogen_MDL_MaterialIcon = PS["Halogen.MDL.MaterialIcon"];
  var Halogen_MDL_RippleEffect = PS["Halogen.MDL.RippleEffect"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];        
  var Clicked = (function () {
      function Clicked(value0) {
          this.value0 = value0;
      };
      Clicked.create = function (value0) {
          return new Clicked(value0);
      };
      return Clicked;
  })();
  var Flat = (function () {
      function Flat() {

      };
      Flat.value = new Flat();
      return Flat;
  })();
  var Raised = (function () {
      function Raised() {

      };
      Raised.value = new Raised();
      return Raised;
  })();
  var Fab = (function () {
      function Fab() {

      };
      Fab.value = new Fab();
      return Fab;
  })();
  var MiniFab = (function () {
      function MiniFab() {

      };
      MiniFab.value = new MiniFab();
      return MiniFab;
  })();
  var Icon = (function () {
      function Icon() {

      };
      Icon.value = new Icon();
      return Icon;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var IconText = (function () {
      function IconText(value0) {
          this.value0 = value0;
      };
      IconText.create = function (value0) {
          return new IconText(value0);
      };
      return IconText;
  })();
  var Plain = (function () {
      function Plain() {

      };
      Plain.value = new Plain();
      return Plain;
  })();
  var Colored = (function () {
      function Colored() {

      };
      Colored.value = new Colored();
      return Colored;
  })();
  var Primary = (function () {
      function Primary() {

      };
      Primary.value = new Primary();
      return Primary;
  })();
  var Accent = (function () {
      function Accent() {

      };
      Accent.value = new Accent();
      return Accent;
  })();
  var Initialize = (function () {
      function Initialize(value0) {
          this.value0 = value0;
      };
      Initialize.create = function (value0) {
          return new Initialize(value0);
      };
      return Initialize;
  })();
  var InitializeComponent = (function () {
      function InitializeComponent(value0) {
          this.value0 = value0;
      };
      InitializeComponent.create = function (value0) {
          return new InitializeComponent(value0);
      };
      return InitializeComponent;
  })();
  var FinalizeComponent = (function () {
      function FinalizeComponent(value0) {
          this.value0 = value0;
      };
      FinalizeComponent.create = function (value0) {
          return new FinalizeComponent(value0);
      };
      return FinalizeComponent;
  })();
  var UpdateState = (function () {
      function UpdateState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpdateState.create = function (value0) {
          return function (value1) {
              return new UpdateState(value0, value1);
          };
      };
      return UpdateState;
  })();
  var OnClick = (function () {
      function OnClick(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OnClick.create = function (value0) {
          return function (value1) {
              return new OnClick(value0, value1);
          };
      };
      return OnClick;
  })();
  var init = function (props) {
      return Initialize.create(props);
  };
  var eqButtonType = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Flat && y instanceof Flat) {
              return true;
          };
          if (x instanceof Raised && y instanceof Raised) {
              return true;
          };
          if (x instanceof Fab && y instanceof Fab) {
              return true;
          };
          if (x instanceof MiniFab && y instanceof MiniFab) {
              return true;
          };
          if (x instanceof Icon && y instanceof Icon) {
              return true;
          };
          return false;
      };
  });
  var eqButtonContent = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Text && y instanceof Text) {
              return x.value0 === y.value0;
          };
          if (x instanceof IconText && y instanceof IconText) {
              return x.value0 === y.value0;
          };
          return false;
      };
  });
  var eqButtonColor = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof Plain && y instanceof Plain) {
              return true;
          };
          if (x instanceof Colored && y instanceof Colored) {
              return true;
          };
          if (x instanceof Primary && y instanceof Primary) {
              return true;
          };
          if (x instanceof Accent && y instanceof Accent) {
              return true;
          };
          return false;
      };
  });
  var eqState = new Data_Eq.Eq(function (x) {
      return function (y) {
          return Data_Eq.eq(eqButtonColor)(x.color)(y.color) && Data_Eq.eq(eqButtonContent)(x.content)(y.content) && x.disabled === y.disabled && x.ripple === y.ripple && Data_Eq.eq(eqButtonType)(x.type)(y.type);
      };
  });
  var cl = {
      button: "mdl-button",
      buttonRaised: "mdl-button--raised",
      buttonFab: "mdl-button--fab",
      buttonMiniFab: "mdl-button--mini-fab",
      buttonIcon: "mdl-button--icon",
      buttonColored: "mdl-button--colored",
      buttonPrimary: "mdl-button--primary",
      buttonAccent: "mdl-button--accent",
      jsButton: "mdl-js-button"
  };
  var button = (function () {
      var receiver = function (v) {
          return Data_Maybe.Just.create(Halogen_Query.action(UpdateState.create(v.value0)));
      };
      var initializer = Data_Maybe.Just.create(Halogen_Query.action(InitializeComponent.create));
      var initialState = function (v) {
          return v.value0;
      };
      var getClasses = function (props) {
          return Data_Semigroup.append(Data_Semigroup.semigroupArray)([ cl.button, cl.jsButton ])(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
              if (props.type instanceof Flat) {
                  return [  ];
              };
              if (props.type instanceof Raised) {
                  return [ cl.buttonRaised ];
              };
              if (props.type instanceof Fab) {
                  return [ cl.buttonFab ];
              };
              if (props.type instanceof MiniFab) {
                  return [ cl.buttonFab, cl.buttonMiniFab ];
              };
              if (props.type instanceof Icon) {
                  return [ cl.buttonIcon ];
              };
              throw new Error("Failed pattern match at Halogen.MDL.Button line 159, column 10 - line 164, column 32: " + [ props.type.constructor.name ]);
          })())(Data_Semigroup.append(Data_Semigroup.semigroupArray)((function () {
              if (props.color instanceof Plain) {
                  return [  ];
              };
              if (props.color instanceof Colored) {
                  return [ cl.buttonColored ];
              };
              if (props.color instanceof Primary) {
                  return [ cl.buttonPrimary ];
              };
              if (props.color instanceof Accent) {
                  return [ cl.buttonAccent ];
              };
              throw new Error("Failed pattern match at Halogen.MDL.Button line 165, column 10 - line 169, column 36: " + [ props.color.constructor.name ]);
          })())((function () {
              if (props.ripple) {
                  return [ Halogen_MDL_RippleEffect.cl.jsRippleEffect ];
              };
              return [  ];
          })())));
      };
      var finalizer = Data_Maybe.Just.create(Halogen_Query.action(FinalizeComponent.create));
      var $$eval = function (v) {
          if (v instanceof InitializeComponent) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_MDL.upgradeElementByRef(Control_Monad_Aff.monadEffAff)("mdl-button-ref"))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
              });
          };
          if (v instanceof FinalizeComponent) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
          };
          if (v instanceof UpdateState) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Applicative.when(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Eq.notEq(eqState)(v.value0)(v1))(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v.value0)))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                  });
              });
          };
          if (v instanceof OnClick) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query_HalogenM.raise(new Clicked(v.value0)))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
              });
          };
          throw new Error("Failed pattern match at Halogen.MDL.Button line 175, column 10 - line 196, column 12: " + [ v.constructor.name ]);
      };
      var render = function (v) {
          return Halogen_HTML_Elements.button([ Halogen_HTML_Properties.ref("mdl-button-ref"), Halogen_HTML_Properties.classes(getClasses(v)), Halogen_HTML_Properties.disabled(v.disabled), Halogen_HTML_Events.onClick(Halogen_HTML_Events.input(OnClick.create)) ])((function () {
              if (v.content instanceof Text) {
                  return [ Halogen_HTML_Core.text(v.content.value0) ];
              };
              if (v.content instanceof IconText) {
                  return [ Halogen_HTML_Elements.i([ Halogen_HTML_Properties.class_(Halogen_MDL_MaterialIcon.cl.materialIcons) ])([ Halogen_HTML_Core.text(v.content.value0) ]) ];
              };
              throw new Error("Failed pattern match at Halogen.MDL.Button line 142, column 7 - line 148, column 12: " + [ v.content.constructor.name ]);
          })());
      };
      return Halogen_Component.lifecycleComponent(Halogen_HTML_Core.bifunctorHTML)({
          initialState: initialState,
          initializer: initializer,
          finalizer: finalizer,
          receiver: receiver,
          render: render,
          "eval": $$eval
      });
  })();
  exports["cl"] = cl;
  exports["Flat"] = Flat;
  exports["Raised"] = Raised;
  exports["Fab"] = Fab;
  exports["MiniFab"] = MiniFab;
  exports["Icon"] = Icon;
  exports["Plain"] = Plain;
  exports["Colored"] = Colored;
  exports["Primary"] = Primary;
  exports["Accent"] = Accent;
  exports["Text"] = Text;
  exports["IconText"] = IconText;
  exports["InitializeComponent"] = InitializeComponent;
  exports["FinalizeComponent"] = FinalizeComponent;
  exports["UpdateState"] = UpdateState;
  exports["OnClick"] = OnClick;
  exports["Initialize"] = Initialize;
  exports["Clicked"] = Clicked;
  exports["init"] = init;
  exports["button"] = button;
  exports["eqButtonType"] = eqButtonType;
  exports["eqButtonColor"] = eqButtonColor;
  exports["eqButtonContent"] = eqButtonContent;
  exports["eqState"] = eqState;
})(PS["Halogen.MDL.Button"] = PS["Halogen.MDL.Button"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];        
  var cl = {
      cell: "mdl-cell",
      cell1Col: "mdl-cell--1-col",
      cell2Col: "mdl-cell--2-col",
      cell3Col: "mdl-cell--3-col",
      cell4Col: "mdl-cell--4-col",
      cell5Col: "mdl-cell--5-col",
      cell6Col: "mdl-cell--6-col",
      cell7Col: "mdl-cell--7-col",
      cell8Col: "mdl-cell--8-col",
      cell9Col: "mdl-cell--9-col",
      cell10Col: "mdl-cell--10-col",
      cell11Col: "mdl-cell--11-col",
      cell12Col: "mdl-cell--12-col",
      cell1ColDesktop: "mdl-cell--1-col-desktop",
      cell2ColDesktop: "mdl-cell--2-col-desktop",
      cell3ColDesktop: "mdl-cell--3-col-desktop",
      cell4ColDesktop: "mdl-cell--4-col-desktop",
      cell5ColDesktop: "mdl-cell--5-col-desktop",
      cell6ColDesktop: "mdl-cell--6-col-desktop",
      cell7ColDesktop: "mdl-cell--7-col-desktop",
      cell8ColDesktop: "mdl-cell--8-col-desktop",
      cell9ColDesktop: "mdl-cell--9-col-desktop",
      cell10ColDesktop: "mdl-cell--10-col-desktop",
      cell11ColDesktop: "mdl-cell--11-col-desktop",
      cell12ColDesktop: "mdl-cell--12-col-desktop",
      cell1ColTablet: "mdl-cell--1-col-tablet",
      cell2ColTablet: "mdl-cell--2-col-tablet",
      cell3ColTablet: "mdl-cell--3-col-tablet",
      cell4ColTablet: "mdl-cell--4-col-tablet",
      cell5ColTablet: "mdl-cell--5-col-tablet",
      cell6ColTablet: "mdl-cell--6-col-tablet",
      cell7ColTablet: "mdl-cell--7-col-tablet",
      cell8ColTablet: "mdl-cell--8-col-tablet",
      cell9ColTablet: "mdl-cell--9-col-tablet",
      cell10ColTablet: "mdl-cell--10-col-tablet",
      cell11ColTablet: "mdl-cell--11-col-tablet",
      cell12ColTablet: "mdl-cell--12-col-tablet",
      cell1ColPhone: "mdl-cell--1-col-phone",
      cell2ColPhone: "mdl-cell--2-col-phone",
      cell3ColPhone: "mdl-cell--3-col-phone",
      cell4ColPhone: "mdl-cell--4-col-phone",
      cell5ColPhone: "mdl-cell--5-col-phone",
      cell6ColPhone: "mdl-cell--6-col-phone",
      cell7ColPhone: "mdl-cell--7-col-phone",
      cell8ColPhone: "mdl-cell--8-col-phone",
      cell9ColPhone: "mdl-cell--9-col-phone",
      cell10ColPhone: "mdl-cell--10-col-phone",
      cell11ColPhone: "mdl-cell--11-col-phone",
      cell12ColPhone: "mdl-cell--12-col-phone",
      cell1Offset: "mdl-cell--1-offset",
      cell2Offset: "mdl-cell--2-offset",
      cell3Offset: "mdl-cell--3-offset",
      cell4Offset: "mdl-cell--4-offset",
      cell5Offset: "mdl-cell--5-offset",
      cell6Offset: "mdl-cell--6-offset",
      cell7Offset: "mdl-cell--7-offset",
      cell8Offset: "mdl-cell--8-offset",
      cell9Offset: "mdl-cell--9-offset",
      cell10Offset: "mdl-cell--10-offset",
      cell11Offset: "mdl-cell--11-offset",
      cell12Offset: "mdl-cell--12-offset",
      cell1OffsetDesktop: "mdl-cell--1-offset-desktop",
      cell2OffsetDesktop: "mdl-cell--2-offset-desktop",
      cell3OffsetDesktop: "mdl-cell--3-offset-desktop",
      cell4OffsetDesktop: "mdl-cell--4-offset-desktop",
      cell5OffsetDesktop: "mdl-cell--5-offset-desktop",
      cell6OffsetDesktop: "mdl-cell--6-offset-desktop",
      cell7OffsetDesktop: "mdl-cell--7-offset-desktop",
      cell8OffsetDesktop: "mdl-cell--8-offset-desktop",
      cell9OffsetDesktop: "mdl-cell--9-offset-desktop",
      cell10OffsetDesktop: "mdl-cell--10-offset-desktop",
      cell11OffsetDesktop: "mdl-cell--11-offset-desktop",
      cell12OffsetDesktop: "mdl-cell--12-offset-desktop",
      cell1OffsetTablet: "mdl-cell--1-offset-tablet",
      cell2OffsetTablet: "mdl-cell--2-offset-tablet",
      cell3OffsetTablet: "mdl-cell--3-offset-tablet",
      cell4OffsetTablet: "mdl-cell--4-offset-tablet",
      cell5OffsetTablet: "mdl-cell--5-offset-tablet",
      cell6OffsetTablet: "mdl-cell--6-offset-tablet",
      cell7OffsetTablet: "mdl-cell--7-offset-tablet",
      cell8OffsetTablet: "mdl-cell--8-offset-tablet",
      cell9OffsetTablet: "mdl-cell--9-offset-tablet",
      cell10OffsetTablet: "mdl-cell--10-offset-tablet",
      cell11OffsetTablet: "mdl-cell--11-offset-tablet",
      cell12OffsetTablet: "mdl-cell--12-offset-tablet",
      cell1OffsetPhone: "mdl-cell--1-offset-phone",
      cell2OffsetPhone: "mdl-cell--2-offset-phone",
      cell3OffsetPhone: "mdl-cell--3-offset-phone",
      cell4OffsetPhone: "mdl-cell--4-offset-phone",
      cell5OffsetPhone: "mdl-cell--5-offset-phone",
      cell6OffsetPhone: "mdl-cell--6-offset-phone",
      cell7OffsetPhone: "mdl-cell--7-offset-phone",
      cell8OffsetPhone: "mdl-cell--8-offset-phone",
      cell9OffsetPhone: "mdl-cell--9-offset-phone",
      cell10OffsetPhone: "mdl-cell--10-offset-phone",
      cell11OffsetPhone: "mdl-cell--11-offset-phone",
      cell12OffsetPhone: "mdl-cell--12-offset-phone",
      cellOrder1: "mdl-cell--order-1",
      cellOrder2: "mdl-cell--order-2",
      cellOrder3: "mdl-cell--order-3",
      cellOrder4: "mdl-cell--order-4",
      cellOrder5: "mdl-cell--order-5",
      cellOrder6: "mdl-cell--order-6",
      cellOrder7: "mdl-cell--order-7",
      cellOrder8: "mdl-cell--order-8",
      cellOrder9: "mdl-cell--order-9",
      cellOrder10: "mdl-cell--order-10",
      cellOrder11: "mdl-cell--order-11",
      cellOrder12: "mdl-cell--order-12",
      cellOrder1Desktop: "mdl-cell--order-1-desktop",
      cellOrder2Desktop: "mdl-cell--order-2-desktop",
      cellOrder3Desktop: "mdl-cell--order-3-desktop",
      cellOrder4Desktop: "mdl-cell--order-4-desktop",
      cellOrder5Desktop: "mdl-cell--order-5-desktop",
      cellOrder6Desktop: "mdl-cell--order-6-desktop",
      cellOrder7Desktop: "mdl-cell--order-7-desktop",
      cellOrder8Desktop: "mdl-cell--order-8-desktop",
      cellOrder9Desktop: "mdl-cell--order-9-desktop",
      cellOrder10Desktop: "mdl-cell--order-10-desktop",
      cellOrder11Desktop: "mdl-cell--order-11-desktop",
      cellOrder12Desktop: "mdl-cell--order-12-desktop",
      cellOrder1Tablet: "mdl-cell--order-1-tablet",
      cellOrder2Tablet: "mdl-cell--order-2-tablet",
      cellOrder3Tablet: "mdl-cell--order-3-tablet",
      cellOrder4Tablet: "mdl-cell--order-4-tablet",
      cellOrder5Tablet: "mdl-cell--order-5-tablet",
      cellOrder6Tablet: "mdl-cell--order-6-tablet",
      cellOrder7Tablet: "mdl-cell--order-7-tablet",
      cellOrder8Tablet: "mdl-cell--order-8-tablet",
      cellOrder9Tablet: "mdl-cell--order-9-tablet",
      cellOrder10Tablet: "mdl-cell--order-10-tablet",
      cellOrder11Tablet: "mdl-cell--order-11-tablet",
      cellOrder12Tablet: "mdl-cell--order-12-tablet",
      cellOrder1Phone: "mdl-cell--order-1-phone",
      cellOrder2Phone: "mdl-cell--order-2-phone",
      cellOrder3Phone: "mdl-cell--order-3-phone",
      cellOrder4Phone: "mdl-cell--order-4-phone",
      cellOrder5Phone: "mdl-cell--order-5-phone",
      cellOrder6Phone: "mdl-cell--order-6-phone",
      cellOrder7Phone: "mdl-cell--order-7-phone",
      cellOrder8Phone: "mdl-cell--order-8-phone",
      cellOrder9Phone: "mdl-cell--order-9-phone",
      cellOrder10Phone: "mdl-cell--order-10-phone",
      cellOrder11Phone: "mdl-cell--order-11-phone",
      cellOrder12Phone: "mdl-cell--order-12-phone",
      cellHideDesktop: "mdl-cell--hide-desktop",
      cellHideTablet: "mdl-cell--hide-tablet",
      cellHidePhone: "mdl-cell--hide-phone",
      cellStretch: "mdl-cell--stretch",
      cellTop: "mdl-cell--top",
      cellMiddle: "mdl-cell--middle",
      cellBottom: "mdl-cell--bottom"
  };
  var el = {
      cell1Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell1Col ]) ])(children);
      },
      cell2Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell2Col ]) ])(children);
      },
      cell3Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell3Col ]) ])(children);
      },
      cell4Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell4Col ]) ])(children);
      },
      cell5Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell5Col ]) ])(children);
      },
      cell6Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell6Col ]) ])(children);
      },
      cell7Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell7Col ]) ])(children);
      },
      cell8Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell8Col ]) ])(children);
      },
      cell9Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell9Col ]) ])(children);
      },
      cell10Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell10Col ]) ])(children);
      },
      cell11Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell11Col ]) ])(children);
      },
      cell12Col_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.cell, cl.cell12Col ]) ])(children);
      }
  };
  exports["cl"] = cl;
  exports["el"] = el;
})(PS["Halogen.MDL.Cell"] = PS["Halogen.MDL.Cell"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];        
  var cl = {
      grid: "mdl-grid",
      gridNoSpacing: "mdl-grid--no-spacing"
  };
  var el = {
      grid_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(cl.grid) ])(children);
      }
  };
  exports["cl"] = cl;
  exports["el"] = el;
})(PS["Halogen.MDL.Grid"] = PS["Halogen.MDL.Grid"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Halogen = PS["Halogen"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Prelude = PS["Prelude"];        
  var cl = {
      spinner: "mdl-spinner",
      spinnerSingleColor: "mdl-spinner--single-color",
      jsSpinner: "mdl-js-spinner",
      isActive: "is-active"
  };
  var el = {
      spinner_: Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ cl.spinner, cl.jsSpinner, cl.isActive ]) ])([  ])
  };
  exports["cl"] = cl;
  exports["el"] = el;
})(PS["Halogen.MDL.Spinner"] = PS["Halogen.MDL.Spinner"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS = PS["CSS"];
  var CSS_Display = PS["CSS.Display"];
  var CSS_Geometry = PS["CSS.Geometry"];
  var CSS_Size = PS["CSS.Size"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_Class = PS["Control.Monad.Aff.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var DOM_HTML_Indexed_ButtonType = PS["DOM.HTML.Indexed.ButtonType"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Show = PS["Data.Show"];
  var Data_Time_Duration = PS["Data.Time.Duration"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff = PS["Halogen.Aff"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_CSS = PS["Halogen.HTML.CSS"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_MDL = PS["Halogen.MDL"];
  var Halogen_MDL_Button = PS["Halogen.MDL.Button"];
  var Halogen_MDL_Cell = PS["Halogen.MDL.Cell"];
  var Halogen_MDL_Grid = PS["Halogen.MDL.Grid"];
  var Halogen_MDL_RippleEffect = PS["Halogen.MDL.RippleEffect"];
  var Halogen_MDL_Spinner = PS["Halogen.MDL.Spinner"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];        
  var InitializeComponent = (function () {
      function InitializeComponent(value0) {
          this.value0 = value0;
      };
      InitializeComponent.create = function (value0) {
          return new InitializeComponent(value0);
      };
      return InitializeComponent;
  })();
  var FinalizeComponent = (function () {
      function FinalizeComponent(value0) {
          this.value0 = value0;
      };
      FinalizeComponent.create = function (value0) {
          return new FinalizeComponent(value0);
      };
      return FinalizeComponent;
  })();
  var UpdateState = (function () {
      function UpdateState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpdateState.create = function (value0) {
          return function (value1) {
              return new UpdateState(value0, value1);
          };
      };
      return UpdateState;
  })();
  var OnClickDemoButtonMessage = (function () {
      function OnClickDemoButtonMessage(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OnClickDemoButtonMessage.create = function (value0) {
          return function (value1) {
              return new OnClickDemoButtonMessage(value0, value1);
          };
      };
      return OnClickDemoButtonMessage;
  })();
  var OnIgnoredButtonMessage = (function () {
      function OnIgnoredButtonMessage(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OnIgnoredButtonMessage.create = function (value0) {
          return function (value1) {
              return new OnIgnoredButtonMessage(value0, value1);
          };
      };
      return OnIgnoredButtonMessage;
  })();
  var OnNonComponentButtonClick = (function () {
      function OnNonComponentButtonClick(value0) {
          this.value0 = value0;
      };
      OnNonComponentButtonClick.create = function (value0) {
          return new OnNonComponentButtonClick(value0);
      };
      return OnNonComponentButtonClick;
  })();
  var Initialize = (function () {
      function Initialize(value0) {
          this.value0 = value0;
      };
      Initialize.create = function (value0) {
          return new Initialize(value0);
      };
      return Initialize;
  })();
  var ClickDemoSlot = (function () {
      function ClickDemoSlot() {

      };
      ClickDemoSlot.value = new ClickDemoSlot();
      return ClickDemoSlot;
  })();
  var ColoredFabSlot = (function () {
      function ColoredFabSlot() {

      };
      ColoredFabSlot.value = new ColoredFabSlot();
      return ColoredFabSlot;
  })();
  var ColoredFabRippleSlot = (function () {
      function ColoredFabRippleSlot() {

      };
      ColoredFabRippleSlot.value = new ColoredFabRippleSlot();
      return ColoredFabRippleSlot;
  })();
  var ColoredFabDisabledSlot = (function () {
      function ColoredFabDisabledSlot() {

      };
      ColoredFabDisabledSlot.value = new ColoredFabDisabledSlot();
      return ColoredFabDisabledSlot;
  })();
  var PlainFabSlot = (function () {
      function PlainFabSlot() {

      };
      PlainFabSlot.value = new PlainFabSlot();
      return PlainFabSlot;
  })();
  var PlainFabRippleSlot = (function () {
      function PlainFabRippleSlot() {

      };
      PlainFabRippleSlot.value = new PlainFabRippleSlot();
      return PlainFabRippleSlot;
  })();
  var PlainFabDisabledSlot = (function () {
      function PlainFabDisabledSlot() {

      };
      PlainFabDisabledSlot.value = new PlainFabDisabledSlot();
      return PlainFabDisabledSlot;
  })();
  var ColoredRaisedSlot = (function () {
      function ColoredRaisedSlot() {

      };
      ColoredRaisedSlot.value = new ColoredRaisedSlot();
      return ColoredRaisedSlot;
  })();
  var ColoredRaisedRippleSlot = (function () {
      function ColoredRaisedRippleSlot() {

      };
      ColoredRaisedRippleSlot.value = new ColoredRaisedRippleSlot();
      return ColoredRaisedRippleSlot;
  })();
  var ColoredRaisedDisabledSlot = (function () {
      function ColoredRaisedDisabledSlot() {

      };
      ColoredRaisedDisabledSlot.value = new ColoredRaisedDisabledSlot();
      return ColoredRaisedDisabledSlot;
  })();
  var ColoredAccentRaisedSlot = (function () {
      function ColoredAccentRaisedSlot() {

      };
      ColoredAccentRaisedSlot.value = new ColoredAccentRaisedSlot();
      return ColoredAccentRaisedSlot;
  })();
  var ColoredAccentRaisedRippleSlot = (function () {
      function ColoredAccentRaisedRippleSlot() {

      };
      ColoredAccentRaisedRippleSlot.value = new ColoredAccentRaisedRippleSlot();
      return ColoredAccentRaisedRippleSlot;
  })();
  var ColoredAccentRaisedDisabledSlot = (function () {
      function ColoredAccentRaisedDisabledSlot() {

      };
      ColoredAccentRaisedDisabledSlot.value = new ColoredAccentRaisedDisabledSlot();
      return ColoredAccentRaisedDisabledSlot;
  })();
  var PlainRaisedSlot = (function () {
      function PlainRaisedSlot() {

      };
      PlainRaisedSlot.value = new PlainRaisedSlot();
      return PlainRaisedSlot;
  })();
  var PlainRaisedRippleSlot = (function () {
      function PlainRaisedRippleSlot() {

      };
      PlainRaisedRippleSlot.value = new PlainRaisedRippleSlot();
      return PlainRaisedRippleSlot;
  })();
  var PlainRaisedDisabledSlot = (function () {
      function PlainRaisedDisabledSlot() {

      };
      PlainRaisedDisabledSlot.value = new PlainRaisedDisabledSlot();
      return PlainRaisedDisabledSlot;
  })();
  var ColoredFlatSlot = (function () {
      function ColoredFlatSlot() {

      };
      ColoredFlatSlot.value = new ColoredFlatSlot();
      return ColoredFlatSlot;
  })();
  var ColoredFlatRippleSlot = (function () {
      function ColoredFlatRippleSlot() {

      };
      ColoredFlatRippleSlot.value = new ColoredFlatRippleSlot();
      return ColoredFlatRippleSlot;
  })();
  var ColoredFlatDisabledSlot = (function () {
      function ColoredFlatDisabledSlot() {

      };
      ColoredFlatDisabledSlot.value = new ColoredFlatDisabledSlot();
      return ColoredFlatDisabledSlot;
  })();
  var ColoredAccentFlatSlot = (function () {
      function ColoredAccentFlatSlot() {

      };
      ColoredAccentFlatSlot.value = new ColoredAccentFlatSlot();
      return ColoredAccentFlatSlot;
  })();
  var ColoredAccentFlatRippleSlot = (function () {
      function ColoredAccentFlatRippleSlot() {

      };
      ColoredAccentFlatRippleSlot.value = new ColoredAccentFlatRippleSlot();
      return ColoredAccentFlatRippleSlot;
  })();
  var ColoredAccentFlatDisabledSlot = (function () {
      function ColoredAccentFlatDisabledSlot() {

      };
      ColoredAccentFlatDisabledSlot.value = new ColoredAccentFlatDisabledSlot();
      return ColoredAccentFlatDisabledSlot;
  })();
  var PlainFlatSlot = (function () {
      function PlainFlatSlot() {

      };
      PlainFlatSlot.value = new PlainFlatSlot();
      return PlainFlatSlot;
  })();
  var PlainFlatRippleSlot = (function () {
      function PlainFlatRippleSlot() {

      };
      PlainFlatRippleSlot.value = new PlainFlatRippleSlot();
      return PlainFlatRippleSlot;
  })();
  var PlainFlatDisabledSlot = (function () {
      function PlainFlatDisabledSlot() {

      };
      PlainFlatDisabledSlot.value = new PlainFlatDisabledSlot();
      return PlainFlatDisabledSlot;
  })();
  var ColoredIconSlot = (function () {
      function ColoredIconSlot() {

      };
      ColoredIconSlot.value = new ColoredIconSlot();
      return ColoredIconSlot;
  })();
  var ColoredIconRippleSlot = (function () {
      function ColoredIconRippleSlot() {

      };
      ColoredIconRippleSlot.value = new ColoredIconRippleSlot();
      return ColoredIconRippleSlot;
  })();
  var ColoredIconDisabledSlot = (function () {
      function ColoredIconDisabledSlot() {

      };
      ColoredIconDisabledSlot.value = new ColoredIconDisabledSlot();
      return ColoredIconDisabledSlot;
  })();
  var ColoredMiniFabSlot = (function () {
      function ColoredMiniFabSlot() {

      };
      ColoredMiniFabSlot.value = new ColoredMiniFabSlot();
      return ColoredMiniFabSlot;
  })();
  var ColoredMiniFabRippleSlot = (function () {
      function ColoredMiniFabRippleSlot() {

      };
      ColoredMiniFabRippleSlot.value = new ColoredMiniFabRippleSlot();
      return ColoredMiniFabRippleSlot;
  })();
  var ColoredMiniFabDisabledSlot = (function () {
      function ColoredMiniFabDisabledSlot() {

      };
      ColoredMiniFabDisabledSlot.value = new ColoredMiniFabDisabledSlot();
      return ColoredMiniFabDisabledSlot;
  })();
  var init = function (state) {
      return new Initialize(state);
  };
  var eqChildSlot = new Data_Eq.Eq(function (x) {
      return function (y) {
          if (x instanceof ClickDemoSlot && y instanceof ClickDemoSlot) {
              return true;
          };
          if (x instanceof ColoredFabSlot && y instanceof ColoredFabSlot) {
              return true;
          };
          if (x instanceof ColoredFabRippleSlot && y instanceof ColoredFabRippleSlot) {
              return true;
          };
          if (x instanceof ColoredFabDisabledSlot && y instanceof ColoredFabDisabledSlot) {
              return true;
          };
          if (x instanceof PlainFabSlot && y instanceof PlainFabSlot) {
              return true;
          };
          if (x instanceof PlainFabRippleSlot && y instanceof PlainFabRippleSlot) {
              return true;
          };
          if (x instanceof PlainFabDisabledSlot && y instanceof PlainFabDisabledSlot) {
              return true;
          };
          if (x instanceof ColoredRaisedSlot && y instanceof ColoredRaisedSlot) {
              return true;
          };
          if (x instanceof ColoredRaisedRippleSlot && y instanceof ColoredRaisedRippleSlot) {
              return true;
          };
          if (x instanceof ColoredRaisedDisabledSlot && y instanceof ColoredRaisedDisabledSlot) {
              return true;
          };
          if (x instanceof ColoredAccentRaisedSlot && y instanceof ColoredAccentRaisedSlot) {
              return true;
          };
          if (x instanceof ColoredAccentRaisedRippleSlot && y instanceof ColoredAccentRaisedRippleSlot) {
              return true;
          };
          if (x instanceof ColoredAccentRaisedDisabledSlot && y instanceof ColoredAccentRaisedDisabledSlot) {
              return true;
          };
          if (x instanceof PlainRaisedSlot && y instanceof PlainRaisedSlot) {
              return true;
          };
          if (x instanceof PlainRaisedRippleSlot && y instanceof PlainRaisedRippleSlot) {
              return true;
          };
          if (x instanceof PlainRaisedDisabledSlot && y instanceof PlainRaisedDisabledSlot) {
              return true;
          };
          if (x instanceof ColoredFlatSlot && y instanceof ColoredFlatSlot) {
              return true;
          };
          if (x instanceof ColoredFlatRippleSlot && y instanceof ColoredFlatRippleSlot) {
              return true;
          };
          if (x instanceof ColoredFlatDisabledSlot && y instanceof ColoredFlatDisabledSlot) {
              return true;
          };
          if (x instanceof ColoredAccentFlatSlot && y instanceof ColoredAccentFlatSlot) {
              return true;
          };
          if (x instanceof ColoredAccentFlatRippleSlot && y instanceof ColoredAccentFlatRippleSlot) {
              return true;
          };
          if (x instanceof ColoredAccentFlatDisabledSlot && y instanceof ColoredAccentFlatDisabledSlot) {
              return true;
          };
          if (x instanceof PlainFlatSlot && y instanceof PlainFlatSlot) {
              return true;
          };
          if (x instanceof PlainFlatRippleSlot && y instanceof PlainFlatRippleSlot) {
              return true;
          };
          if (x instanceof PlainFlatDisabledSlot && y instanceof PlainFlatDisabledSlot) {
              return true;
          };
          if (x instanceof ColoredIconSlot && y instanceof ColoredIconSlot) {
              return true;
          };
          if (x instanceof ColoredIconRippleSlot && y instanceof ColoredIconRippleSlot) {
              return true;
          };
          if (x instanceof ColoredIconDisabledSlot && y instanceof ColoredIconDisabledSlot) {
              return true;
          };
          if (x instanceof ColoredMiniFabSlot && y instanceof ColoredMiniFabSlot) {
              return true;
          };
          if (x instanceof ColoredMiniFabRippleSlot && y instanceof ColoredMiniFabRippleSlot) {
              return true;
          };
          if (x instanceof ColoredMiniFabDisabledSlot && y instanceof ColoredMiniFabDisabledSlot) {
              return true;
          };
          return false;
      };
  });
  var ordChildSlot = new Data_Ord.Ord(function () {
      return eqChildSlot;
  }, function (x) {
      return function (y) {
          if (x instanceof ClickDemoSlot && y instanceof ClickDemoSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ClickDemoSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ClickDemoSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredFabSlot && y instanceof ColoredFabSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredFabSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredFabSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredFabRippleSlot && y instanceof ColoredFabRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredFabRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredFabRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredFabDisabledSlot && y instanceof ColoredFabDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredFabDisabledSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredFabDisabledSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlainFabSlot && y instanceof PlainFabSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PlainFabSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PlainFabSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlainFabRippleSlot && y instanceof PlainFabRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PlainFabRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PlainFabRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlainFabDisabledSlot && y instanceof PlainFabDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PlainFabDisabledSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PlainFabDisabledSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredRaisedSlot && y instanceof ColoredRaisedSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredRaisedSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredRaisedSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredRaisedRippleSlot && y instanceof ColoredRaisedRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredRaisedRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredRaisedRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredRaisedDisabledSlot && y instanceof ColoredRaisedDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredRaisedDisabledSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredRaisedDisabledSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredAccentRaisedSlot && y instanceof ColoredAccentRaisedSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredAccentRaisedSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredAccentRaisedSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredAccentRaisedRippleSlot && y instanceof ColoredAccentRaisedRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredAccentRaisedRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredAccentRaisedRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredAccentRaisedDisabledSlot && y instanceof ColoredAccentRaisedDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredAccentRaisedDisabledSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredAccentRaisedDisabledSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlainRaisedSlot && y instanceof PlainRaisedSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PlainRaisedSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PlainRaisedSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlainRaisedRippleSlot && y instanceof PlainRaisedRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PlainRaisedRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PlainRaisedRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlainRaisedDisabledSlot && y instanceof PlainRaisedDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PlainRaisedDisabledSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PlainRaisedDisabledSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredFlatSlot && y instanceof ColoredFlatSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredFlatSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredFlatSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredFlatRippleSlot && y instanceof ColoredFlatRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredFlatRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredFlatRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredFlatDisabledSlot && y instanceof ColoredFlatDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredFlatDisabledSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredFlatDisabledSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredAccentFlatSlot && y instanceof ColoredAccentFlatSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredAccentFlatSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredAccentFlatSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredAccentFlatRippleSlot && y instanceof ColoredAccentFlatRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredAccentFlatRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredAccentFlatRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredAccentFlatDisabledSlot && y instanceof ColoredAccentFlatDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredAccentFlatDisabledSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredAccentFlatDisabledSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlainFlatSlot && y instanceof PlainFlatSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PlainFlatSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PlainFlatSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlainFlatRippleSlot && y instanceof PlainFlatRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PlainFlatRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PlainFlatRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof PlainFlatDisabledSlot && y instanceof PlainFlatDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof PlainFlatDisabledSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof PlainFlatDisabledSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredIconSlot && y instanceof ColoredIconSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredIconSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredIconSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredIconRippleSlot && y instanceof ColoredIconRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredIconRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredIconRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredIconDisabledSlot && y instanceof ColoredIconDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredIconDisabledSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredIconDisabledSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredMiniFabSlot && y instanceof ColoredMiniFabSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredMiniFabSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredMiniFabSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredMiniFabRippleSlot && y instanceof ColoredMiniFabRippleSlot) {
              return Data_Ordering.EQ.value;
          };
          if (x instanceof ColoredMiniFabRippleSlot) {
              return Data_Ordering.LT.value;
          };
          if (y instanceof ColoredMiniFabRippleSlot) {
              return Data_Ordering.GT.value;
          };
          if (x instanceof ColoredMiniFabDisabledSlot && y instanceof ColoredMiniFabDisabledSlot) {
              return Data_Ordering.EQ.value;
          };
          throw new Error("Failed pattern match at DemoButtons line 75, column 8 - line 75, column 46: " + [ x.constructor.name, y.constructor.name ]);
      };
  });
  var demoButtons = (function () {
      var renderMainHeader = Halogen_MDL_Cell.el.cell12Col_([ Halogen_HTML_Elements.h1_([ Halogen_HTML_Core.text("Buttons") ]) ]);
      var renderDemoSection = function (body) {
          return Halogen_MDL_Cell.el.cell4Col_(body);
      };
      var renderDemoHeader = function (name) {
          return Halogen_MDL_Cell.el.cell12Col_([ Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text(name) ]) ]);
      };
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_MDL_Grid.cl.grid) ])([ renderMainHeader, renderDemoHeader("Click demo"), renderDemoSection([ Halogen_HTML.slot(ClickDemoSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.Text("Click this"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnClickDemoButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Button has been clicked " + (Data_Show.show(Data_Show.showInt)(state.clickDemo.clickCount) + " times.")) ]) ]), renderDemoHeader("Colored fab buttons"), renderDemoSection([ Halogen_HTML.slot(ColoredFabSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Fab.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.IconText("add"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredFabRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Fab.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.IconText("add"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredFabDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Fab.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.IconText("add"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("Plain fab buttons"), renderDemoSection([ Halogen_HTML.slot(PlainFabSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Fab.value,
              color: Halogen_MDL_Button.Plain.value,
              content: new Halogen_MDL_Button.IconText("add"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(PlainFabRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Fab.value,
              color: Halogen_MDL_Button.Plain.value,
              content: new Halogen_MDL_Button.IconText("add"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(PlainFabDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Fab.value,
              color: Halogen_MDL_Button.Plain.value,
              content: new Halogen_MDL_Button.IconText("add"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("Colored raised buttons"), renderDemoSection([ Halogen_HTML.slot(ColoredRaisedSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredRaisedRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredRaisedDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("Colored accent raised buttons"), renderDemoSection([ Halogen_HTML.slot(ColoredAccentRaisedSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Accent.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredAccentRaisedRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Accent.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredAccentRaisedDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Accent.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("Plain raised buttons"), renderDemoSection([ Halogen_HTML.slot(PlainRaisedSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Plain.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(PlainRaisedRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Plain.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(PlainRaisedDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Raised.value,
              color: Halogen_MDL_Button.Plain.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("Colored flat buttons"), renderDemoSection([ Halogen_HTML.slot(ColoredFlatSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Flat.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredFlatRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Flat.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredFlatDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Flat.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("Colored accent flat buttons"), renderDemoSection([ Halogen_HTML.slot(ColoredAccentFlatSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Flat.value,
              color: Halogen_MDL_Button.Accent.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredAccentFlatRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Flat.value,
              color: Halogen_MDL_Button.Accent.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredAccentFlatDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Flat.value,
              color: Halogen_MDL_Button.Accent.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("Plain flat buttons"), renderDemoSection([ Halogen_HTML.slot(PlainFlatSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Flat.value,
              color: Halogen_MDL_Button.Plain.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(PlainFlatRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Flat.value,
              color: Halogen_MDL_Button.Plain.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(PlainFlatDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Flat.value,
              color: Halogen_MDL_Button.Plain.value,
              content: new Halogen_MDL_Button.Text("Click me"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("Colored icon buttons"), renderDemoSection([ Halogen_HTML.slot(ColoredIconSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Icon.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.IconText("mood"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredIconRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Icon.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.IconText("mood"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredIconDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.Icon.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.IconText("mood"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("Colored mini-fab buttons"), renderDemoSection([ Halogen_HTML.slot(ColoredMiniFabSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.MiniFab.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.IconText("add"),
              disabled: false,
              ripple: false
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Normal") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredMiniFabRippleSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.MiniFab.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.IconText("add"),
              disabled: false,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Ripple") ]) ]), renderDemoSection([ Halogen_HTML.slot(ColoredMiniFabDisabledSlot.value)(Halogen_MDL_Button.button)(Halogen_MDL_Button.init({
              type: Halogen_MDL_Button.MiniFab.value,
              color: Halogen_MDL_Button.Colored.value,
              content: new Halogen_MDL_Button.IconText("add"),
              disabled: true,
              ripple: true
          }))(Halogen_HTML_Events.input(OnIgnoredButtonMessage.create)), Halogen_HTML_Elements.p_([ Halogen_HTML_Core.text("Disabled") ]) ]), renderDemoHeader("DIY (non-component) button"), renderDemoSection(Data_Semigroup.append(Data_Semigroup.semigroupArray)([ Halogen_HTML_Elements.button([ Halogen_HTML_Properties.classes([ Halogen_MDL_Button.cl.button, Halogen_MDL_Button.cl.jsButton, Halogen_MDL_Button.cl.buttonRaised, Halogen_MDL_Button.cl.buttonColored, Halogen_MDL_RippleEffect.cl.jsRippleEffect ]), Halogen_HTML_Properties.type_(Halogen_HTML_Core.buttonTypeIsProp)(DOM_HTML_Indexed_ButtonType.ButtonButton.value), Halogen_HTML_Properties.ref("non-component-button"), Halogen_HTML_Events.onClick(Halogen_HTML_Events.input_(OnNonComponentButtonClick.create)), Halogen_HTML_Properties.disabled(state.nonComponentDemo.isLoading) ])((function () {
              if (state.nonComponentDemo.isLoading) {
                  return [ Halogen_HTML_Core.text("Loading") ];
              };
              return [ Halogen_HTML_Core.text("Click for async action") ];
          })()) ])((function () {
              if (state.nonComponentDemo.isLoading) {
                  return [ Halogen_HTML_Elements.div([ Halogen_HTML_CSS.style(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Display.display(CSS_Display.inlineBlock))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Display.position(CSS_Display.relative))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.left(CSS_Size.px(10.0)))(function () {
                              return CSS_Geometry.top(CSS_Size.px(8.0));
                          });
                      });
                  })) ])([ Halogen_MDL_Spinner.el.spinner_ ]) ];
              };
              return [  ];
          })())) ]);
      };
      var receiver = function (v) {
          return Data_Maybe.Just.create(Halogen_Query.action(UpdateState.create(v.value0)));
      };
      var initializer = Data_Maybe.Just.create(Halogen_Query.action(InitializeComponent.create));
      var initialState = function (v) {
          return v.value0;
      };
      var finalizer = Data_Maybe.Just.create(Halogen_Query.action(FinalizeComponent.create));
      var $$eval = function (v) {
          if (v instanceof InitializeComponent) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_MDL.upgradeElementByRef(Control_Monad_Aff.monadEffAff)("non-component-button"))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
              });
          };
          if (v instanceof FinalizeComponent) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
          };
          if (v instanceof UpdateState) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v.value0))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
              });
          };
          if (v instanceof OnClickDemoButtonMessage) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state1) {
                      var $31 = {};
                      for (var $32 in state1) {
                          if ({}.hasOwnProperty.call(state1, $32)) {
                              $31[$32] = state1[$32];
                          };
                      };
                      $31.clickDemo = (function () {
                          var $28 = {};
                          for (var $29 in state1.clickDemo) {
                              if ({}.hasOwnProperty.call(state1.clickDemo, $29)) {
                                  $28[$29] = state1["clickDemo"][$29];
                              };
                          };
                          $28.clickCount = state1.clickDemo.clickCount + 1 | 0;
                          return $28;
                      })();
                      return $31;
                  }))(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
                  });
              });
          };
          if (v instanceof OnIgnoredButtonMessage) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
          };
          if (v instanceof OnNonComponentButtonClick) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.get(Halogen_Query_HalogenM.monadStateHalogenM))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state1) {
                      var $43 = {};
                      for (var $44 in state1) {
                          if ({}.hasOwnProperty.call(state1, $44)) {
                              $43[$44] = state1[$44];
                          };
                      };
                      $43.nonComponentDemo = (function () {
                          var $40 = {};
                          for (var $41 in state1.nonComponentDemo) {
                              if ({}.hasOwnProperty.call(state1.nonComponentDemo, $41)) {
                                  $40[$41] = state1["nonComponentDemo"][$41];
                              };
                          };
                          $40.isLoading = true;
                          return $40;
                      })();
                      return $43;
                  }))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Halogen_MDL.upgradeElementsByClassName(Halogen_MDL_Spinner.cl.jsSpinner)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Aff_Class.liftAff(Halogen_Query_HalogenM.monadAffHalogenM(Control_Monad_Aff_Class.monadAffAff))(Control_Monad_Aff.delay(2000.0)))(function () {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state1) {
                                  var $49 = {};
                                  for (var $50 in state1) {
                                      if ({}.hasOwnProperty.call(state1, $50)) {
                                          $49[$50] = state1[$50];
                                      };
                                  };
                                  $49.nonComponentDemo = (function () {
                                      var $46 = {};
                                      for (var $47 in state1.nonComponentDemo) {
                                          if ({}.hasOwnProperty.call(state1.nonComponentDemo, $47)) {
                                              $46[$47] = state1["nonComponentDemo"][$47];
                                          };
                                      };
                                      $46.isLoading = false;
                                      return $46;
                                  })();
                                  return $49;
                              }))(function () {
                                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
                              });
                          });
                      });
                  });
              });
          };
          throw new Error("Failed pattern match at DemoButtons line 425, column 10 - line 453, column 12: " + [ v.constructor.name ]);
      };
      return Halogen_Component.lifecycleParentComponent(ordChildSlot)({
          initialState: initialState,
          initializer: initializer,
          finalizer: finalizer,
          receiver: receiver,
          render: render,
          "eval": $$eval
      });
  })();
  exports["InitializeComponent"] = InitializeComponent;
  exports["FinalizeComponent"] = FinalizeComponent;
  exports["UpdateState"] = UpdateState;
  exports["OnClickDemoButtonMessage"] = OnClickDemoButtonMessage;
  exports["OnIgnoredButtonMessage"] = OnIgnoredButtonMessage;
  exports["OnNonComponentButtonClick"] = OnNonComponentButtonClick;
  exports["Initialize"] = Initialize;
  exports["ClickDemoSlot"] = ClickDemoSlot;
  exports["ColoredFabSlot"] = ColoredFabSlot;
  exports["ColoredFabRippleSlot"] = ColoredFabRippleSlot;
  exports["ColoredFabDisabledSlot"] = ColoredFabDisabledSlot;
  exports["PlainFabSlot"] = PlainFabSlot;
  exports["PlainFabRippleSlot"] = PlainFabRippleSlot;
  exports["PlainFabDisabledSlot"] = PlainFabDisabledSlot;
  exports["ColoredRaisedSlot"] = ColoredRaisedSlot;
  exports["ColoredRaisedRippleSlot"] = ColoredRaisedRippleSlot;
  exports["ColoredRaisedDisabledSlot"] = ColoredRaisedDisabledSlot;
  exports["ColoredAccentRaisedSlot"] = ColoredAccentRaisedSlot;
  exports["ColoredAccentRaisedRippleSlot"] = ColoredAccentRaisedRippleSlot;
  exports["ColoredAccentRaisedDisabledSlot"] = ColoredAccentRaisedDisabledSlot;
  exports["PlainRaisedSlot"] = PlainRaisedSlot;
  exports["PlainRaisedRippleSlot"] = PlainRaisedRippleSlot;
  exports["PlainRaisedDisabledSlot"] = PlainRaisedDisabledSlot;
  exports["ColoredFlatSlot"] = ColoredFlatSlot;
  exports["ColoredFlatRippleSlot"] = ColoredFlatRippleSlot;
  exports["ColoredFlatDisabledSlot"] = ColoredFlatDisabledSlot;
  exports["ColoredAccentFlatSlot"] = ColoredAccentFlatSlot;
  exports["ColoredAccentFlatRippleSlot"] = ColoredAccentFlatRippleSlot;
  exports["ColoredAccentFlatDisabledSlot"] = ColoredAccentFlatDisabledSlot;
  exports["PlainFlatSlot"] = PlainFlatSlot;
  exports["PlainFlatRippleSlot"] = PlainFlatRippleSlot;
  exports["PlainFlatDisabledSlot"] = PlainFlatDisabledSlot;
  exports["ColoredIconSlot"] = ColoredIconSlot;
  exports["ColoredIconRippleSlot"] = ColoredIconRippleSlot;
  exports["ColoredIconDisabledSlot"] = ColoredIconDisabledSlot;
  exports["ColoredMiniFabSlot"] = ColoredMiniFabSlot;
  exports["ColoredMiniFabRippleSlot"] = ColoredMiniFabRippleSlot;
  exports["ColoredMiniFabDisabledSlot"] = ColoredMiniFabDisabledSlot;
  exports["init"] = init;
  exports["demoButtons"] = demoButtons;
  exports["eqChildSlot"] = eqChildSlot;
  exports["ordChildSlot"] = ordChildSlot;
})(PS["DemoButtons"] = PS["DemoButtons"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];        
  var cl = {
      card: "mdl-card",
      cardExpand: "mdl-card--expand",
      cardBorder: "mdl-card--border",
      cardTitle: "mdl-card__title",
      cardTitleText: "mdl-card__title-text",
      cardSubtitleText: "mdl-card__subtitle-text",
      cardMedia: "mdl-card__media",
      cardSupportingText: "mdl-card__supporting-text",
      cardActions: "mdl-card__actions",
      cardMenu: "mdl-card__menu"
  };
  exports["cl"] = cl;
})(PS["Halogen.MDL.Card"] = PS["Halogen.MDL.Card"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];        
  var cl = {
      shadow2dp: "mdl-shadow--2dp",
      shadow3dp: "mdl-shadow--3dp",
      shadow4dp: "mdl-shadow--4dp",
      shadow6dp: "mdl-shadow--6dp",
      shadow8dp: "mdl-shadow--8dp",
      shadow16dp: "mdl-shadow--16dp"
  };
  exports["cl"] = cl;
})(PS["Halogen.MDL.Shadow"] = PS["Halogen.MDL.Shadow"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var CSS = PS["CSS"];
  var CSS_Background = PS["CSS.Background"];
  var CSS_Font = PS["CSS.Font"];
  var CSS_Geometry = PS["CSS.Geometry"];
  var CSS_Selector = PS["CSS.Selector"];
  var CSS_Size = PS["CSS.Size"];
  var CSS_Stylesheet = PS["CSS.Stylesheet"];
  var Color = PS["Color"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff = PS["Halogen.Aff"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_CSS = PS["Halogen.HTML.CSS"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_MDL = PS["Halogen.MDL"];
  var Halogen_MDL_Button = PS["Halogen.MDL.Button"];
  var Halogen_MDL_Card = PS["Halogen.MDL.Card"];
  var Halogen_MDL_Cell = PS["Halogen.MDL.Cell"];
  var Halogen_MDL_Grid = PS["Halogen.MDL.Grid"];
  var Halogen_MDL_MaterialIcon = PS["Halogen.MDL.MaterialIcon"];
  var Halogen_MDL_RippleEffect = PS["Halogen.MDL.RippleEffect"];
  var Halogen_MDL_Shadow = PS["Halogen.MDL.Shadow"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Prelude = PS["Prelude"];        
  var InitializeComponent = (function () {
      function InitializeComponent(value0) {
          this.value0 = value0;
      };
      InitializeComponent.create = function (value0) {
          return new InitializeComponent(value0);
      };
      return InitializeComponent;
  })();
  var FinalizeComponent = (function () {
      function FinalizeComponent(value0) {
          this.value0 = value0;
      };
      FinalizeComponent.create = function (value0) {
          return new FinalizeComponent(value0);
      };
      return FinalizeComponent;
  })();
  var UpdateState = (function () {
      function UpdateState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpdateState.create = function (value0) {
          return function (value1) {
              return new UpdateState(value0, value1);
          };
      };
      return UpdateState;
  })();
  var Initialize = (function () {
      function Initialize(value0) {
          this.value0 = value0;
      };
      Initialize.create = function (value0) {
          return new Initialize(value0);
      };
      return Initialize;
  })();
  var init = function (state) {
      return new Initialize(state);
  };
  var demoCards = (function () {
      var renderWelcomeCard = [ Halogen_HTML_CSS.stylesheet(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.select(CSS_Selector.element(".demo-card-wide.mdl-card"))(CSS_Geometry.width(CSS_Size.px(512.0))))(function () {
          return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.select(CSS_Selector.child(CSS_Selector.element(".demo-card-wide"))(CSS_Selector.element(".mdl-card__title")))(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Font.color(Color.white))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.px(176.0)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Background.background(CSS_Background.backgroundBackgroundImage)(CSS_Background.url("https://getmdl.io/assets/demos/welcome_card.jpg")))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundSize(CSS_Background.cover))(function () {
                          return CSS_Background.backgroundPosition(CSS_Background.placed(CSS_Background.sideCenter)(CSS_Background.sideCenter));
                      });
                  });
              });
          })))(function () {
              return CSS_Stylesheet.select(CSS_Selector.child(CSS_Selector.element(".demo-card-wide"))(CSS_Selector.element(".mdl-card__menu")))(CSS_Font.color(Color.white));
          });
      })), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "demo-card-wide", Halogen_MDL_Card.cl.card, Halogen_MDL_Shadow.cl.shadow2dp ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_MDL_Card.cl.cardTitle) ])([ Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_(Halogen_MDL_Card.cl.cardTitleText) ])([ Halogen_HTML_Core.text("Welcome") ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_MDL_Card.cl.cardSupportingText) ])([ Halogen_HTML_Core.text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sagittis pellentesque lacus eleifend lacinia...") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Card.cl.cardActions, Halogen_MDL_Card.cl.cardBorder ]) ])([ Halogen_HTML_Elements.a([ Halogen_HTML_Properties.classes([ Halogen_MDL_Button.cl.button, Halogen_MDL_Button.cl.buttonColored, Halogen_MDL_Button.cl.jsButton, Halogen_MDL_RippleEffect.cl.jsRippleEffect ]) ])([ Halogen_HTML_Core.text("Get started") ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Card.cl.cardMenu ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Button.cl.button, Halogen_MDL_Button.cl.buttonIcon, Halogen_MDL_Button.cl.jsButton, Halogen_MDL_RippleEffect.cl.jsRippleEffect ]) ])([ Halogen_HTML_Elements.i([ Halogen_HTML_Properties.class_(Halogen_MDL_MaterialIcon.cl.materialIcons) ])([ Halogen_HTML_Core.text(Halogen_MDL_MaterialIcon.str.share) ]) ]) ]) ]) ];
      var renderSquareCard = [ Halogen_HTML_CSS.stylesheet(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Stylesheet.select(CSS_Selector.element(".demo-card-square.mdl-card"))(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.width(CSS_Size.px(320.0)))(function () {
          return CSS_Geometry.height(CSS_Size.px(320.0));
      })))(function () {
          return CSS_Stylesheet.select(CSS_Selector.child(CSS_Selector.element(".demo-card-square"))(CSS_Selector.element(".mdl-card__title")))(Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Font.color(Color.white))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Geometry.height(CSS_Size.px(176.0)))(function () {
                  return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Background.background(CSS_Background.backgroundBackgroundImage)(CSS_Background.url("https://getmdl.io/assets/demos/dog.png")))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundColor(Data_Maybe.fromMaybe(Color.white)(Color.fromHexString("#46B6AC"))))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(CSS_Stylesheet.bindStyleM)(CSS_Background.backgroundRepeat(CSS_Background.noRepeat))(function () {
                              return CSS_Background.backgroundPosition(CSS_Background.placed(CSS_Background.sideRight)(CSS_Background.sideBottom));
                          });
                      });
                  });
              });
          }));
      })), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "demo-card-square", Halogen_MDL_Card.cl.card, Halogen_MDL_Shadow.cl.shadow2dp ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Card.cl.cardTitle, Halogen_MDL_Card.cl.cardExpand ]) ])([ Halogen_HTML_Elements.h2([ Halogen_HTML_Properties.class_(Halogen_MDL_Card.cl.cardTitleText) ])([ Halogen_HTML_Core.text("Update") ]) ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Card.cl.cardSupportingText ]) ])([ Halogen_HTML_Core.text("Lorem ipsum dolor sit amet, consectetur adipiscing elit. Mauris sagittis pellentesque lacus eleifend lacinia...") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Card.cl.cardActions, Halogen_MDL_Card.cl.cardBorder ]) ])([ Halogen_HTML_Elements.a([ Halogen_HTML_Properties.classes([ Halogen_MDL_Button.cl.button, Halogen_MDL_Button.cl.buttonColored, Halogen_MDL_Button.cl.jsButton, Halogen_MDL_RippleEffect.cl.jsRippleEffect ]) ])([ Halogen_HTML_Core.text("View updates") ]) ]) ]) ];
      var renderDemoSection = function (body) {
          return Halogen_MDL_Cell.el.cell12Col_(body);
      };
      var renderDemoHeader = function (name) {
          return Halogen_MDL_Cell.el.cell12Col_([ Halogen_HTML_Elements.h3_([ Halogen_HTML_Core.text(name) ]) ]);
      };
      var renderCardsHeader = Halogen_MDL_Cell.el.cell12Col_([ Halogen_HTML_Elements.h1_([ Halogen_HTML_Core.text("Cards") ]) ]);
      var render = function (state) {
          return Halogen_MDL_Grid.el.grid_([ renderCardsHeader, renderDemoHeader("Welcome card"), renderDemoSection(renderWelcomeCard), renderDemoHeader("Square card"), renderDemoSection(renderSquareCard) ]);
      };
      var receiver = function (v) {
          return Data_Maybe.Just.create(Halogen_Query.action(UpdateState.create(v.value0)));
      };
      var initializer = Data_Maybe.Just.create(Halogen_Query.action(InitializeComponent.create));
      var initialState = function (v) {
          return v.value0;
      };
      var finalizer = Data_Maybe.Just.create(Halogen_Query.action(FinalizeComponent.create));
      var $$eval = function (v) {
          if (v instanceof InitializeComponent) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Halogen_MDL.upgradeElementsByClassName(Halogen_MDL_Button.cl.jsButton)))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
              });
          };
          if (v instanceof FinalizeComponent) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
          };
          if (v instanceof UpdateState) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v.value0))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
              });
          };
          throw new Error("Failed pattern match at DemoCards line 162, column 10 - line 169, column 12: " + [ v.constructor.name ]);
      };
      return Halogen_Component.lifecycleComponent(Halogen_HTML_Core.bifunctorHTML)({
          initialState: initialState,
          initializer: initializer,
          finalizer: finalizer,
          receiver: receiver,
          render: render,
          "eval": $$eval
      });
  })();
  exports["InitializeComponent"] = InitializeComponent;
  exports["FinalizeComponent"] = FinalizeComponent;
  exports["UpdateState"] = UpdateState;
  exports["Initialize"] = Initialize;
  exports["init"] = init;
  exports["demoCards"] = demoCards;
})(PS["DemoCards"] = PS["DemoCards"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff = PS["Halogen.Aff"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_MDL_Cell = PS["Halogen.MDL.Cell"];
  var Halogen_MDL_Grid = PS["Halogen.MDL.Grid"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Prelude = PS["Prelude"];
  var Initialize = (function () {
      function Initialize(value0) {
          this.value0 = value0;
      };
      Initialize.create = function (value0) {
          return new Initialize(value0);
      };
      return Initialize;
  })();
  var init = function (v) {
      return new Initialize(Data_Unit.unit);
  };
  var demoHome = (function () {
      var renderHomeHeader = Halogen_MDL_Cell.el.cell12Col_([ Halogen_HTML_Elements.h1_([ Halogen_HTML_Core.text("Halogen MDL") ]) ]);
      var render = function (state) {
          return Halogen_MDL_Grid.el.grid_([ renderHomeHeader ]);
      };
      var receiver = function (v) {
          return Data_Maybe.Nothing.value;
      };
      var initialState = function (v) {
          return Data_Unit.unit;
      };
      var $$eval = function (v) {
          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
      };
      return Halogen_Component.component(Halogen_HTML_Core.bifunctorHTML)({
          initialState: initialState,
          receiver: receiver,
          render: render,
          "eval": $$eval
      });
  })();
  exports["Initialize"] = Initialize;
  exports["init"] = init;
  exports["demoHome"] = demoHome;
})(PS["DemoHome"] = PS["DemoHome"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];        
  var el = {
      link_: function (v) {
          return Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href(v.href) ])([ Halogen_HTML_Core.text(v.text) ]);
      }
  };
  exports["el"] = el;
})(PS["Halogen.MDL.Basic"] = PS["Halogen.MDL.Basic"] || {});
(function(exports) {// Hack to hide the layout drawer (it does not automatically hide on a drawer link click)
  // https://stackoverflow.com/questions/31536467/how-to-hide-drawer-upon-user-click/37625650#37625650
  exports.toggleDrawer = function() {
    var layout = document.querySelector('.mdl-layout');
    if (layout && layout.MaterialLayout && layout.MaterialLayout.toggleDrawer) {
      layout.MaterialLayout.toggleDrawer();
    }
    return {};
  };
})(PS["Halogen.MDL.Layout"] = PS["Halogen.MDL.Layout"] || {});
(function(exports) {
    "use strict";
  var $foreign = PS["Halogen.MDL.Layout"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Prelude = PS["Prelude"];        
  var cl = {
      layout: "mdl-layout",
      layoutFixedTabs: "mdl-layout--fixed-tabs",
      layoutLargeScreenOnly: "mdl-layout--large-screen-only",
      layoutSmallScreenOnly: "mdl-layout--small-screen-only",
      layoutNoDrawerButton: "mdl-layout--no-drawer-button",
      layoutNoDesktopDrawerButton: "mdl-layout--no-desktop-drawer-button",
      layoutContainer: "mdl-layout__container",
      layoutContent: "mdl-layout__content",
      layoutDrawer: "mdl-layout__drawer",
      layoutFixedDrawer: "mdl-layout--fixed-drawer",
      layoutFixedHeader: "mdl-layout--fixed-header",
      layoutHeader: "mdl-layout__header",
      layoutHeaderScroll: "mdl-layout__header--scroll",
      layoutHeaderSeamed: "mdl-layout__header--seamed",
      layoutHeaderTransparent: "mdl-layout__header--transparent",
      layoutHeaderWaterfall: "mdl-layout__header--waterfall",
      layoutHeaderWaterfallHideTop: "mdl-layout__header--waterfall-hide-top",
      layoutHeaderRow: "mdl-layout__header-row",
      layoutTab: "mdl-layout__tab",
      isActive: "is-active",
      layoutTabBar: "mdl-layout__tab-bar",
      layoutTabManualSwitch: "mdl-layout__tab-manual-switch",
      layoutTabPanel: "mdl-layout__tab-panel",
      layoutTitle: "mdl-layout__title",
      layoutIcon: "mdl-layout-icon",
      layoutSpacer: "mdl-layout-spacer",
      jsLayout: "mdl-js-layout"
  };
  exports["cl"] = cl;
  exports["toggleDrawer"] = $foreign.toggleDrawer;
})(PS["Halogen.MDL.Layout"] = PS["Halogen.MDL.Layout"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Function = PS["Data.Function"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Prelude = PS["Prelude"];        
  var cl = {
      logo: "mdl-logo"
  };
  var el = {
      logo_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(cl.logo) ])(children);
      },
      logoText_: function (text) {
          return el.logo_([ Halogen_HTML_Core.text(text) ]);
      }
  };
  exports["cl"] = cl;
  exports["el"] = el;
})(PS["Halogen.MDL.Logo"] = PS["Halogen.MDL.Logo"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM_HTML_Indexed_InputType = PS["DOM.HTML.Indexed.InputType"];
  var Data_Functor = PS["Data.Functor"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_MDL_Basic = PS["Halogen.MDL.Basic"];
  var Halogen_MDL_Logo = PS["Halogen.MDL.Logo"];
  var Prelude = PS["Prelude"];        
  var cl = {
      megaFooter: "mdl-mega-footer",
      megaFooterHeading: "mdl-mega-footer__heading",
      megaFooterHeadingCheckbox: "mdl-mega-footer__heading-checkbox",
      megaFooterTopSection: "mdl-mega-footer__top-section",
      megaFooterBottomSection: "mdl-mega-footer__bottom-section",
      megaFooterLeftSection: "mdl-mega-footer__left-section",
      megaFooterMiddleSection: "mdl-mega-footer__middle-section",
      megaFooterRightSection: "mdl-mega-footer__right-section",
      megaFooterDropDownSection: "mdl-mega-footer__drop-down-section",
      megaFooterLinkList: "mdl-mega-footer__link-list",
      megaFooterSocialBtn: "mdl-mega-footer__social-btn"
  };
  var el = {
      megaFooter_: function (children) {
          return Halogen_HTML_Elements.footer([ Halogen_HTML_Properties.class_(cl.megaFooter) ])(children);
      },
      middleSection_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(cl.megaFooterMiddleSection) ])(children);
      },
      bottomSection_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(cl.megaFooterBottomSection) ])(children);
      },
      dropDownSection_: function (children) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(cl.megaFooterDropDownSection) ])(children);
      },
      linkList_: function (children) {
          return Halogen_HTML_Elements.ul([ Halogen_HTML_Properties.class_(cl.megaFooterLinkList) ])(children);
      },
      linkListItem_: function (children) {
          return Halogen_HTML_Elements.li_([ children ]);
      }
  };
  var bl = {
      megaFooter: function (block) {
          return el.megaFooter_([ bl.middleSection(block.middleSection), bl.bottomSection(block.bottomSection) ]);
      },
      middleSection: function (block) {
          return el.middleSection_(Data_Functor.map(Data_Functor.functorArray)(bl.dropDownSection)(block.dropDownSections));
      },
      bottomSection: function (block) {
          return el.bottomSection_([ Halogen_MDL_Logo.el.logoText_(block.title), bl.linkList(block.linkList) ]);
      },
      dropDownSection: function (block) {
          return el.dropDownSection_([ Halogen_HTML_Elements.input([ Halogen_HTML_Properties.class_(cl.megaFooterHeadingCheckbox), Halogen_HTML_Properties.type_(Halogen_HTML_Core.inputTypeIsProp)(DOM_HTML_Indexed_InputType.InputCheckbox.value), Halogen_HTML_Properties.checked(true) ]), Halogen_HTML_Elements.h1([ Halogen_HTML_Properties.class_(cl.megaFooterHeading) ])([ Halogen_HTML_Core.text(block.title) ]), bl.linkList(block.linkList) ]);
      },
      linkList: function (block) {
          return el.linkList_(Data_Functor.map(Data_Functor.functorArray)(function ($0) {
              return el.linkListItem_(Halogen_MDL_Basic.el.link_($0));
          })(block.links));
      }
  };
  exports["cl"] = cl;
  exports["el"] = el;
  exports["bl"] = bl;
})(PS["Halogen.MDL.MegaFooter"] = PS["Halogen.MDL.MegaFooter"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];        
  var cl = {
      navigation: "mdl-navigation",
      navigationLink: "mdl-navigation__link"
  };
  exports["cl"] = cl;
})(PS["Halogen.MDL.Navigation"] = PS["Halogen.MDL.Navigation"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Prelude = PS["Prelude"];        
  var Home = (function () {
      function Home() {

      };
      Home.value = new Home();
      return Home;
  })();
  var Buttons = (function () {
      function Buttons() {

      };
      Buttons.value = new Buttons();
      return Buttons;
  })();
  var Cards = (function () {
      function Cards() {

      };
      Cards.value = new Cards();
      return Cards;
  })();
  var urlSegment = function (v) {
      if (v instanceof Home) {
          return "home";
      };
      if (v instanceof Buttons) {
          return "buttons";
      };
      if (v instanceof Cards) {
          return "cards";
      };
      throw new Error("Failed pattern match at Route line 10, column 1 - line 10, column 30: " + [ v.constructor.name ]);
  };
  var showRoute = new Data_Show.Show(function (v) {
      if (v instanceof Home) {
          return "Home";
      };
      if (v instanceof Buttons) {
          return "Buttons";
      };
      if (v instanceof Cards) {
          return "Cards";
      };
      throw new Error("Failed pattern match at Route line 21, column 1 - line 21, column 33: " + [ v.constructor.name ]);
  });
  var label = Data_Show.show(showRoute);
  var href = function (route) {
      return "#/" + urlSegment(route);
  };
  exports["Home"] = Home;
  exports["Buttons"] = Buttons;
  exports["Cards"] = Cards;
  exports["urlSegment"] = urlSegment;
  exports["href"] = href;
  exports["label"] = label;
  exports["showRoute"] = showRoute;
})(PS["Route"] = PS["Route"] || {});
(function(exports) {
    "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Array = PS["Data.Array"];
  var Data_Const = PS["Data.Const"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Functor_Coproduct_Nested = PS["Data.Functor.Coproduct.Nested"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var DemoButtons = PS["DemoButtons"];
  var DemoCards = PS["DemoCards"];
  var DemoHome = PS["DemoHome"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff = PS["Halogen.Aff"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Component_ChildPath = PS["Halogen.Component.ChildPath"];
  var Halogen_Data_Prism = PS["Halogen.Data.Prism"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_MDL = PS["Halogen.MDL"];
  var Halogen_MDL_Basic = PS["Halogen.MDL.Basic"];
  var Halogen_MDL_Layout = PS["Halogen.MDL.Layout"];
  var Halogen_MDL_MegaFooter = PS["Halogen.MDL.MegaFooter"];
  var Halogen_MDL_Navigation = PS["Halogen.MDL.Navigation"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var Route = PS["Route"];        
  var InitializeComponent = (function () {
      function InitializeComponent(value0) {
          this.value0 = value0;
      };
      InitializeComponent.create = function (value0) {
          return new InitializeComponent(value0);
      };
      return InitializeComponent;
  })();
  var FinalizeComponent = (function () {
      function FinalizeComponent(value0) {
          this.value0 = value0;
      };
      FinalizeComponent.create = function (value0) {
          return new FinalizeComponent(value0);
      };
      return FinalizeComponent;
  })();
  var UpdateState = (function () {
      function UpdateState(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpdateState.create = function (value0) {
          return function (value1) {
              return new UpdateState(value0, value1);
          };
      };
      return UpdateState;
  })();
  var UpdateRoute = (function () {
      function UpdateRoute(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      UpdateRoute.create = function (value0) {
          return function (value1) {
              return new UpdateRoute(value0, value1);
          };
      };
      return UpdateRoute;
  })();
  var OnNavClick = (function () {
      function OnNavClick(value0) {
          this.value0 = value0;
      };
      OnNavClick.create = function (value0) {
          return new OnNavClick(value0);
      };
      return OnNavClick;
  })();
  var OnDemoHomeMessage = (function () {
      function OnDemoHomeMessage(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OnDemoHomeMessage.create = function (value0) {
          return function (value1) {
              return new OnDemoHomeMessage(value0, value1);
          };
      };
      return OnDemoHomeMessage;
  })();
  var OnDemoButtonsMessage = (function () {
      function OnDemoButtonsMessage(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OnDemoButtonsMessage.create = function (value0) {
          return function (value1) {
              return new OnDemoButtonsMessage(value0, value1);
          };
      };
      return OnDemoButtonsMessage;
  })();
  var OnDemoCardsMessage = (function () {
      function OnDemoCardsMessage(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OnDemoCardsMessage.create = function (value0) {
          return function (value1) {
              return new OnDemoCardsMessage(value0, value1);
          };
      };
      return OnDemoCardsMessage;
  })();
  var Initialize = (function () {
      function Initialize(value0) {
          this.value0 = value0;
      };
      Initialize.create = function (value0) {
          return new Initialize(value0);
      };
      return Initialize;
  })();

  // Slots
  var DemoHomeSlot = (function () {
      function DemoHomeSlot() {

      };
      DemoHomeSlot.value = new DemoHomeSlot();
      return DemoHomeSlot;
  })();
  var DemoCardsSlot = (function () {
      function DemoCardsSlot() {

      };
      DemoCardsSlot.value = new DemoCardsSlot();
      return DemoCardsSlot;
  })();
  var DemoButtonsSlot = (function () {
      function DemoButtonsSlot() {

      };
      DemoButtonsSlot.value = new DemoButtonsSlot();
      return DemoButtonsSlot;
  })();
  var init = function (state) {
      return new Initialize(state);
  };
  var eqDemoHomeSlot = new Data_Eq.Eq(function (x) {
      return function (y) {
          return true;
      };
  });
  var ordDemoHomeSlot = new Data_Ord.Ord(function () {
      return eqDemoHomeSlot;
  }, function (x) {
      return function (y) {
          return Data_Ordering.EQ.value;
      };
  });
  var eqDemoCardsSlot = new Data_Eq.Eq(function (x) {
      return function (y) {
          return true;
      };
  });
  var ordDemoCardsSlot = new Data_Ord.Ord(function () {
      return eqDemoCardsSlot;
  }, function (x) {
      return function (y) {
          return Data_Ordering.EQ.value;
      };
  });
  var eqDemoButtonsSlot = new Data_Eq.Eq(function (x) {
      return function (y) {
          return true;
      };
  });
  var ordDemoButtonsSlot = new Data_Ord.Ord(function () {
      return eqDemoButtonsSlot;
  }, function (x) {
      return function (y) {
          return Data_Ordering.EQ.value;
      };
  });
  var cpDemoHome = Halogen_Component_ChildPath.cp1;
  var cpDemoCards = Halogen_Component_ChildPath.cp3;
  var cpDemoButtons = Halogen_Component_ChildPath.cp2;
  var demoContainer = (function () {
      var renderSpacer = Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_MDL_Layout.cl.layoutSpacer) ])([  ]);
      var renderPageContent = function (state) {
          if (state.currentRoute instanceof Route.Home) {
              return Halogen_HTML["slot'"](cpDemoHome)(DemoHomeSlot.value)(DemoHome.demoHome)(DemoHome.init(Data_Unit.unit))(Halogen_HTML_Events.input(OnDemoHomeMessage.create));
          };
          if (state.currentRoute instanceof Route.Buttons) {
              return Halogen_HTML["slot'"](cpDemoButtons)(DemoButtonsSlot.value)(DemoButtons.demoButtons)(DemoButtons.init({
                  clickDemo: {
                      clickCount: 0
                  },
                  nonComponentDemo: {
                      isLoading: false
                  }
              }))(Halogen_HTML_Events.input(OnDemoButtonsMessage.create));
          };
          if (state.currentRoute instanceof Route.Cards) {
              return Halogen_HTML["slot'"](cpDemoCards)(DemoCardsSlot.value)(DemoCards.demoCards)(DemoCards.init(Data_Unit.unit))(Halogen_HTML_Events.input(OnDemoCardsMessage.create));
          };
          throw new Error("Failed pattern match at DemoContainer line 197, column 29 - line 219, column 38: " + [ state.currentRoute.constructor.name ]);
      };
      var renderLayoutHeaderLink = function (link) {
          return Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href(link.href), Halogen_HTML_Properties.classes([ Halogen_MDL_Navigation.cl.navigationLink ]) ])([ Halogen_HTML_Core.text(link.text) ]);
      };
      var renderLayoutHeader = Halogen_HTML_Elements.header([ Halogen_HTML_Properties.classes([ Halogen_MDL_Layout.cl.layoutHeader ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Layout.cl.layoutHeaderRow ]) ])([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes([ Halogen_MDL_Layout.cl.layoutTitle ]) ])([ Halogen_HTML_Core.text("Halogen MDL") ]), Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Layout.cl.layoutSpacer ]) ])([  ]), Halogen_HTML_Elements.nav([ Halogen_HTML_Properties.classes([ Halogen_MDL_Navigation.cl.navigation, Halogen_MDL_Layout.cl.layoutLargeScreenOnly ]) ])([ renderLayoutHeaderLink({
          href: "#",
          text: "HeaderLink 1"
      }), renderLayoutHeaderLink({
          href: "#",
          text: "HeaderLink 2"
      }), renderLayoutHeaderLink({
          href: "#",
          text: "HeaderLink 3"
      }), renderLayoutHeaderLink({
          href: "#",
          text: "HeaderLink 4"
      }) ]) ]) ]);
      var renderLayoutDrawerLink = function (route) {
          return Halogen_HTML_Elements.a([ Halogen_HTML_Properties.href(Route.href(route)), Halogen_HTML_Properties.classes([ Halogen_MDL_Navigation.cl.navigationLink ]), Halogen_HTML_Events.onClick(Halogen_HTML_Events.input_(OnNavClick.create)) ])([ Halogen_HTML_Core.text(Route.label(route)) ]);
      };
      var renderLayoutContent = function (state) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Layout.cl.layoutContent ]) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ "page-content" ]) ])([ renderPageContent(state) ]) ]);
      };
      var receiver = function (v) {
          return Data_Maybe.Just.create(Halogen_Query.action(UpdateState.create(v.value0)));
      };
      var initializer = Data_Maybe.Just.create(Halogen_Query.action(InitializeComponent.create));
      var initialState = function (v) {
          return v.value0;
      };
      var finalizer = Data_Maybe.Just.create(Halogen_Query.action(FinalizeComponent.create));
      var dummyLinkList = {
          links: [ {
              href: "#",
              text: "Link 1"
          }, {
              href: "#",
              text: "Link 2"
          }, {
              href: "#",
              text: "Link 3"
          }, {
              href: "#",
              text: "Link 4"
          } ]
      };
      var dummyDropDownSection = function (i) {
          return {
              title: "Drop down section " + Data_Show.show(Data_Show.showInt)(i),
              linkList: dummyLinkList
          };
      };
      var renderMegaFooter = Halogen_MDL_MegaFooter.bl.megaFooter({
          middleSection: {
              dropDownSections: Data_Functor.map(Data_Functor.functorArray)(dummyDropDownSection)(Data_Array.range(1)(4))
          },
          bottomSection: {
              title: "Bottom title",
              linkList: dummyLinkList
          }
      });
      var $$eval = function (v) {
          if (v instanceof InitializeComponent) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Halogen_MDL.upgradeElementByRef(Control_Monad_Aff.monadEffAff)("mdl-layout-ref"))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
              });
          };
          if (v instanceof FinalizeComponent) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
          };
          if (v instanceof UpdateState) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.put(Halogen_Query_HalogenM.monadStateHalogenM)(v.value0))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
              });
          };
          if (v instanceof UpdateRoute) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (state) {
                  var $39 = {};
                  for (var $40 in state) {
                      if ({}.hasOwnProperty.call(state, $40)) {
                          $39[$40] = state[$40];
                      };
                  };
                  $39.currentRoute = v.value0;
                  return $39;
              }))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
              });
          };
          if (v instanceof OnNavClick) {
              return Control_Bind.bind(Halogen_Query_HalogenM.bindHalogenM)(Halogen_Query.getHTMLElementRef("mdl-layout-drawer"))(function (v1) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)((function () {
                      if (v1 instanceof Data_Maybe.Just) {
                          return Control_Monad_Eff_Class.liftEff(Halogen_Query_HalogenM.monadEffHalogenM(Control_Monad_Aff.monadEffAff))(Halogen_MDL_Layout.toggleDrawer);
                      };
                      if (v1 instanceof Data_Maybe.Nothing) {
                          return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(Data_Unit.unit);
                      };
                      throw new Error("Failed pattern match at DemoContainer line 270, column 7 - line 272, column 29: " + [ v1.constructor.name ]);
                  })())(function () {
                      return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value0);
                  });
              });
          };
          if (v instanceof OnDemoHomeMessage) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
          };
          if (v instanceof OnDemoButtonsMessage) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
          };
          if (v instanceof OnDemoCardsMessage) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
          };
          throw new Error("Failed pattern match at DemoContainer line 256, column 10 - line 279, column 12: " + [ v.constructor.name ]);
      };
      var renderLayoutDrawer = Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Layout.cl.layoutDrawer ]), Halogen_HTML_Properties.ref("mdl-layout-drawer") ])([ Halogen_HTML_Elements.span([ Halogen_HTML_Properties.classes([ Halogen_MDL_Layout.cl.layoutTitle ]) ])([ Halogen_HTML_Core.text("Halogen MDL") ]), Halogen_HTML_Elements.nav([ Halogen_HTML_Properties.classes([ Halogen_MDL_Navigation.cl.navigation ]) ])([ renderLayoutDrawerLink(Route.Home.value), renderLayoutDrawerLink(Route.Buttons.value), renderLayoutDrawerLink(Route.Cards.value) ]) ]);
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_(Halogen_MDL_Layout.cl.layoutContainer) ])([ Halogen_HTML_Elements.div([ Halogen_HTML_Properties.classes([ Halogen_MDL_Layout.cl.layout, Halogen_MDL_Layout.cl.jsLayout, Halogen_MDL_Layout.cl.layoutFixedHeader ]), Halogen_HTML_Properties.ref("mdl-layout-ref") ])([ renderLayoutHeader, renderLayoutDrawer, renderLayoutContent(state), renderSpacer, renderMegaFooter ]) ]);
      };
      return Halogen_Component.lifecycleParentComponent(Data_Either.ordEither(ordDemoHomeSlot)(Data_Either.ordEither(ordDemoButtonsSlot)(Data_Either.ordEither(ordDemoCardsSlot)(Data_Ord.ordVoid))))({
          initialState: initialState,
          initializer: initializer,
          finalizer: finalizer,
          receiver: receiver,
          render: render,
          "eval": $$eval
      });
  })();
  exports["InitializeComponent"] = InitializeComponent;
  exports["FinalizeComponent"] = FinalizeComponent;
  exports["UpdateState"] = UpdateState;
  exports["UpdateRoute"] = UpdateRoute;
  exports["OnNavClick"] = OnNavClick;
  exports["OnDemoHomeMessage"] = OnDemoHomeMessage;
  exports["OnDemoButtonsMessage"] = OnDemoButtonsMessage;
  exports["OnDemoCardsMessage"] = OnDemoCardsMessage;
  exports["Initialize"] = Initialize;
  exports["DemoHomeSlot"] = DemoHomeSlot;
  exports["cpDemoHome"] = cpDemoHome;
  exports["DemoButtonsSlot"] = DemoButtonsSlot;
  exports["cpDemoButtons"] = cpDemoButtons;
  exports["DemoCardsSlot"] = DemoCardsSlot;
  exports["cpDemoCards"] = cpDemoCards;
  exports["init"] = init;
  exports["demoContainer"] = demoContainer;
  exports["eqDemoHomeSlot"] = eqDemoHomeSlot;
  exports["ordDemoHomeSlot"] = ordDemoHomeSlot;
  exports["eqDemoButtonsSlot"] = eqDemoButtonsSlot;
  exports["ordDemoButtonsSlot"] = ordDemoButtonsSlot;
  exports["eqDemoCardsSlot"] = eqDemoCardsSlot;
  exports["ordDemoCardsSlot"] = ordDemoCardsSlot;
})(PS["DemoContainer"] = PS["DemoContainer"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Traversable = PS["Data.Traversable"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Prelude = PS["Prelude"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var unRenderStateX = Unsafe_Coerce.unsafeCoerce;
  var unDriverStateX = Unsafe_Coerce.unsafeCoerce;
  var renderStateX_ = function (dictApplicative) {
      return function (f) {
          return unDriverStateX(function (st) {
              return Data_Foldable.traverse_(dictApplicative)(Data_Foldable.foldableMaybe)(f)(st.rendering);
          });
      };
  };
  var mkRenderStateX = function (v) {
      return Unsafe_Coerce.unsafeCoerce;
  };
  var renderStateX = function (dictFunctor) {
      return function (f) {
          return unDriverStateX(function (st) {
              return mkRenderStateX(st.prjQuery)(f(st.rendering));
          });
      };
  };
  var mkDriverStateXRef = Unsafe_Coerce.unsafeCoerce;
  var initDriverState = function (component) {
      return function (input) {
          return function (handler) {
              return function (prjQuery) {
                  return function (lchs) {
                      return function __do() {
                          var v = Control_Monad_Eff_Ref.newRef({})();
                          var v1 = Control_Monad_Eff_Ref.newRef(Data_Map.empty)();
                          var v2 = Control_Monad_Eff_Ref.newRef(Data_Map.empty)();
                          var v3 = Control_Monad_Eff_Ref.newRef(Data_Functor.voidLeft(Data_Maybe.functorMaybe)(component.initializer)(Data_List_Types.Nil.value))();
                          var v4 = Control_Monad_Eff_Ref.newRef(new Data_Maybe.Just(Data_List_Types.Nil.value))();
                          var v5 = Control_Monad_Eff_Ref.newRef(Data_Maybe.Nothing.value)();
                          var v6 = Control_Monad_Eff_Ref.newRef(0)();
                          var v7 = Control_Monad_Eff_Ref.newRef(new Data_Maybe.Just(Data_Map.empty))();
                          var ds = {
                              component: component,
                              state: component.initialState(input),
                              refs: Data_StrMap.empty,
                              children: Data_Map.empty,
                              childrenIn: v1,
                              childrenOut: v2,
                              selfRef: v,
                              handler: handler,
                              pendingQueries: v3,
                              pendingOuts: v4,
                              pendingHandlers: v5,
                              rendering: Data_Maybe.Nothing.value,
                              prjQuery: prjQuery,
                              fresh: v6,
                              subscriptions: v7,
                              lifecycleHandlers: lchs
                          };
                          Control_Monad_Eff_Ref.writeRef(v)(ds)();
                          return mkDriverStateXRef(v);
                      };
                  };
              };
          };
      };
  };
  exports["unDriverStateX"] = unDriverStateX;
  exports["mkDriverStateXRef"] = mkDriverStateXRef;
  exports["renderStateX"] = renderStateX;
  exports["renderStateX_"] = renderStateX_;
  exports["unRenderStateX"] = unRenderStateX;
  exports["initDriverState"] = initDriverState;
})(PS["Halogen.Aff.Driver.State"] = PS["Halogen.Aff.Driver.State"] || {});
(function(exports) {
    "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Applicative_Free = PS["Control.Applicative.Free"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Aff_Unsafe = PS["Control.Monad.Aff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Fork = PS["Control.Monad.Fork"];
  var Control_Monad_Fork_Class = PS["Control.Monad.Fork.Class"];
  var Control_Monad_Free = PS["Control.Monad.Free"];
  var Control_Monad_Free_Trans = PS["Control.Monad.Free.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Parallel = PS["Control.Parallel"];
  var Control_Parallel_Class = PS["Control.Parallel.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Coyoneda = PS["Data.Coyoneda"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_StrMap = PS["Data.StrMap"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Aff_Driver_State = PS["Halogen.Aff.Driver.State"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Halogen_Query_EventSource = PS["Halogen.Query.EventSource"];
  var Halogen_Query_ForkF = PS["Halogen.Query.ForkF"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];
  var Unsafe_Reference = PS["Unsafe.Reference"];        
  var queuingHandler = function (handler) {
      return function (ref) {
          return function (message) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
                  if (v instanceof Data_Maybe.Nothing) {
                      return handler(message);
                  };
                  if (v instanceof Data_Maybe.Just) {
                      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.writeRef(ref)(new Data_Maybe.Just(new Data_List_Types.Cons(handler(message), v.value0))));
                  };
                  throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 201, column 3 - line 205, column 57: " + [ v.constructor.name ]);
              });
          };
      };
  };
  var parSequenceAff_ = function (v) {
      if (v instanceof Data_List_Types.Nil) {
          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
      };
      if (v instanceof Data_List_Types.Cons && v.value1 instanceof Data_List_Types.Nil) {
          return Data_Functor["void"](Control_Monad_Aff.functorAff)(v.value0);
      };
      if (v instanceof Data_List_Types.Cons) {
          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v1) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(v.value1)))(function (v2) {
                  var run = function (a) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.attempt(a))(function (v3) {
                          if (v3 instanceof Data_Either.Left) {
                              return Control_Monad_Aff_AVar.putVar(v1)(new Data_Maybe.Just(v3.value0));
                          };
                          if (v3 instanceof Data_Either.Right) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v2)))(function (v4) {
                                  if (v4 instanceof Data_List_Types.Nil) {
                                      return Control_Monad_Aff_AVar.putVar(v1)(Data_Maybe.Nothing.value);
                                  };
                                  if (v4 instanceof Data_List_Types.Cons) {
                                      return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.writeRef(v2)(v4.value1));
                                  };
                                  throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 55, column 15 - line 57, column 57: " + [ v4.constructor.name ]);
                              });
                          };
                          throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 51, column 23 - line 57, column 57: " + [ v3.constructor.name ]);
                      });
                  };
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff.forkAll(Data_List_Types.foldableList)(Data_Functor.map(Data_List_Types.functorList)(run)(v)))(function (v3) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.peekVar(v1))(function (v4) {
                          if (v4 instanceof Data_Maybe.Nothing) {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit);
                          };
                          if (v4 instanceof Data_Maybe.Just) {
                              return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(v4.value0);
                          };
                          throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 59, column 24 - line 61, column 33: " + [ v4.constructor.name ]);
                      });
                  });
              });
          });
      };
      throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 43, column 19 - line 61, column 33: " + [ v.constructor.name ]);
  };
  var handleLifecycle = function (lchs) {
      return function (f) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.writeRef(lchs)({
              initializers: Data_List_Types.Nil.value,
              finalizers: Data_List_Types.Nil.value
          })))(function () {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(f))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(lchs)))(function (v1) {
                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Data_Functor["void"](Control_Monad_Aff.functorAff)(Control_Monad_Aff.forkAll(Data_List_Types.foldableList)(v1.finalizers)))(function () {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(parSequenceAff_(v1.initializers))(function () {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v);
                          });
                      });
                  });
              });
          });
      };
  };
  var $$eval = function (render) {
      return function (r) {
          var go = function (ref) {
              return function (v) {
                  if (v instanceof Halogen_Query_HalogenM.State) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          var v2 = v.value0(v1.state);
                          if (Unsafe_Reference.unsafeRefEq(v1.state)(v2.value1)) {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v2.value0);
                          };
                          if (Data_Boolean.otherwise) {
                              return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.writeRef(ref)((function () {
                                  var $61 = {};
                                  for (var $62 in v1) {
                                      if ({}.hasOwnProperty.call(v1, $62)) {
                                          $61[$62] = v1[$62];
                                      };
                                  };
                                  $61.state = v2.value1;
                                  return $61;
                              })())))(function () {
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(handleLifecycle(v1.lifecycleHandlers)(render(v1.lifecycleHandlers)(ref)))(function () {
                                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v2.value0);
                                  });
                              });
                          };
                          throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 106, column 7 - line 112, column 21: " + [ v2.constructor.name ]);
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.Subscribe) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Data_Functor["void"](Control_Monad_Aff.functorAff)(Control_Monad_Aff.forkAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_Query_EventSource.unEventSource(v.value0))(function (v2) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref["modifyRef'"](v1.fresh)(function (i) {
                                  return {
                                      state: i + 1 | 0,
                                      value: i
                                  };
                              })))(function (v3) {
                                  var done$prime = Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v1.subscriptions)))(function (v4) {
                                      return Control_Applicative.when(Control_Monad_Aff.applicativeAff)(Data_Maybe.maybe(false)(Data_Map.member(Data_Ord.ordInt)(v3))(v4))(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(v2.done)(function () {
                                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(v1.subscriptions)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map["delete"](Data_Ord.ordInt)(v3))));
                                      }));
                                  });
                                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(v1.subscriptions)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Map.insert(Data_Ord.ordInt)(v3)(done$prime)))))(function () {
                                      var consumer = Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Control_Coroutine["await"](Control_Monad_Aff.monadAff))(function (v4) {
                                          return Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Control_Monad_Aff.monadAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v1.subscriptions))))(function (v5) {
                                              return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Data_Maybe.isJust(v5))(Control_Bind.bind(Control_Monad_Free_Trans.bindFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Control_Monad_Trans_Class.lift(Control_Monad_Free_Trans.monadTransFreeT(Control_Coroutine.functorAwait))(Control_Monad_Aff.monadAff)(evalF(ref)(v4)))(function (v6) {
                                                  return Control_Applicative.when(Control_Monad_Free_Trans.applicativeFreeT(Control_Coroutine.functorAwait)(Control_Monad_Aff.monadAff))(Data_Eq.eq(Halogen_Query_EventSource.eqSubscribeStatus)(v6)(Halogen_Query_EventSource.Listening.value))(consumer);
                                              }));
                                          });
                                      });
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Coroutine.runProcess(Control_Monad_Aff.monadRecAff)(Control_Coroutine.pullFrom(Control_Monad_Aff.monadRecAff)(consumer)(v2.producer)))(function () {
                                          return done$prime;
                                      });
                                  });
                              });
                          }))))(function () {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1);
                          });
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.Lift) {
                      return v.value0;
                  };
                  if (v instanceof Halogen_Query_HalogenM.Halt) {
                      return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error(v.value0));
                  };
                  if (v instanceof Halogen_Query_HalogenM.GetSlots) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value0(Data_Functor.map(Data_List_Types.functorList)(Halogen_Data_OrdBox.unOrdBox)(Data_Map.keys(v1.children))));
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.CheckSlot) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1(Data_Map.member(Halogen_Data_OrdBox.ordOrdBox)(v1.component.mkOrdBox(v.value0))(v1.children)));
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.ChildQuery) {
                      return evalChildQuery(ref)(v.value0)(v.value1);
                  };
                  if (v instanceof Halogen_Query_HalogenM.Raise) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(queuingHandler(v1.handler)(v1.pendingOuts)(v.value0))(function () {
                              return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1);
                          });
                      });
                  };
                  if (v instanceof Halogen_Query_HalogenM.Par) {
                      return Control_Parallel_Class.sequential(Control_Monad_Aff.parallelParAff)(Control_Applicative_Free.retractFreeAp(Control_Monad_Aff.applicativeParAff)(Control_Applicative_Free.hoistFreeAp(function ($128) {
                          return Control_Parallel_Class.parallel(Control_Monad_Aff.parallelParAff)(evalM(ref)($128));
                      })(v.value0)));
                  };
                  if (v instanceof Halogen_Query_HalogenM.Fork) {
                      return Halogen_Query_ForkF.unFork(function (v1) {
                          return Data_Functor.map(Control_Monad_Aff.functorAff)(function ($129) {
                              return v1.value1(Data_Functor.map(Data_Functor.functorFn)(Control_Monad_Aff_Unsafe.unsafeCoerceAff)($129));
                          })(Control_Monad_Fork_Class.fork(Control_Monad_Fork_Class.monadForkAff)(evalM(ref)(v1.value0)));
                      })(v.value0);
                  };
                  if (v instanceof Halogen_Query_HalogenM.GetRef) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v1) {
                          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value1(Data_StrMap.lookup(v.value0)(v1.refs)));
                      });
                  };
                  throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 103, column 12 - line 158, column 34: " + [ v.constructor.name ]);
              };
          };
          var evalM = function (ref) {
              return function (v) {
                  return Control_Monad_Free.foldFree(Control_Monad_Aff.monadRecAff)(go(ref))(v);
              };
          };
          var evalF = function (ref) {
              return function (q) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
                      var v1 = v["component"]["eval"](q);
                      return Control_Monad_Free.foldFree(Control_Monad_Aff.monadRecAff)(go(ref))(v1);
                  });
              };
          };
          var evalChildQuery = function (ref) {
              return function (p) {
                  return Data_Coyoneda.unCoyoneda(function (k) {
                      return function (q) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
                              var v1 = Data_Map.lookup(Halogen_Data_OrdBox.ordOrdBox)(v.component.mkOrdBox(p))(v.children);
                              if (v1 instanceof Data_Maybe.Just) {
                                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(v1.value0)))(function (v2) {
                                      return Halogen_Aff_Driver_State.unDriverStateX(function (ds) {
                                          var v3 = ds.prjQuery(q);
                                          if (v3 instanceof Data_Maybe.Just) {
                                              return Data_Functor.map(Control_Monad_Aff.functorAff)(k)(evalF(ds.selfRef)(v3.value0));
                                          };
                                          if (v3 instanceof Data_Maybe.Nothing) {
                                              return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Query projection failed for child query"));
                                          };
                                          throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 171, column 32 - line 173, column 82: " + [ v3.constructor.name ]);
                                      })(v2);
                                  });
                              };
                              if (v1 instanceof Data_Maybe.Nothing) {
                                  return Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Slot lookup failed for child query"));
                              };
                              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 168, column 5 - line 174, column 73: " + [ v1.constructor.name ]);
                          });
                      };
                  });
              };
          };
          return function (v) {
              if (v instanceof Halogen_Query_InputF.RefUpdate) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(r)(function (v1) {
                      var $121 = {};
                      for (var $122 in v1) {
                          if ({}.hasOwnProperty.call(v1, $122)) {
                              $121[$122] = v1[$122];
                          };
                      };
                      $121.refs = Data_StrMap.alter(Data_Function["const"](v.value1))(v.value0)(v1.refs);
                      return $121;
                  })))(function () {
                      return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(v.value2);
                  });
              };
              if (v instanceof Halogen_Query_InputF.Query) {
                  return evalF(r)(v.value0);
              };
              throw new Error("Failed pattern match at Halogen.Aff.Driver.Eval line 89, column 3 - line 94, column 25: " + [ v.constructor.name ]);
          };
      };
  };
  exports["parSequenceAff_"] = parSequenceAff_;
  exports["handleLifecycle"] = handleLifecycle;
  exports["eval"] = $$eval;
  exports["queuingHandler"] = queuingHandler;
})(PS["Halogen.Aff.Driver.Eval"] = PS["Halogen.Aff.Driver.Eval"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Coroutine = PS["Control.Coroutine"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Aff_AVar = PS["Control.Monad.Aff.AVar"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff_Driver_Eval = PS["Halogen.Aff.Driver.Eval"];
  var Halogen_Aff_Driver_State = PS["Halogen.Aff.Driver.State"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_Data_OrdBox = PS["Halogen.Data.OrdBox"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Prelude = PS["Prelude"];        
  var newLifecycleHandlers = Control_Monad_Eff_Ref.newRef({
      initializers: Data_List_Types.Nil.value,
      finalizers: Data_List_Types.Nil.value
  });
  var handleAff = function ($63) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($63));
  };
  var runUI = function (renderSpec) {
      return function (component) {
          return function (i) {
              var subscribe = function (fresh) {
                  return function (ref) {
                      return function (consumer) {
                          return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Aff_AVar.makeVar)(function (v) {
                              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                  var v1 = Control_Monad_Eff_Ref.readRef(fresh)();
                                  Control_Monad_Eff_Ref.modifyRef(fresh)(function (v2) {
                                      return v2 + 1 | 0;
                                  })();
                                  Control_Monad_Eff_Ref.modifyRef(ref)(Data_Map.insert(Data_Ord.ordInt)(v1)(v))();
                                  return v1;
                              }))(function (v1) {
                                  var producer = Control_Coroutine.producer(Control_Monad_Aff.monadAff)(Data_Functor.map(Control_Monad_Aff.functorAff)(Data_Either.Left.create)(Control_Monad_Aff_AVar.takeVar(v)));
                                  return Data_Functor["void"](Control_Monad_Aff.functorAff)(Control_Monad_Aff.forkAff(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Coroutine.runProcess(Control_Monad_Aff.monadRecAff)(Control_Coroutine.connect(Control_Monad_Aff.monadRecAff)(Control_Monad_Aff.parallelParAff)(producer)(consumer)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.modifyRef(ref)(Data_Map["delete"](Data_Ord.ordInt)(v1))))(function () {
                                          return Control_Monad_Aff_AVar.killVar(v)(Control_Monad_Eff_Exception.error("ended"));
                                      });
                                  })));
                              });
                          });
                      };
                  };
              };
              var rootHandler = function (ref) {
                  return function (message) {
                      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.readRef(ref)))(function (v) {
                          return Data_Functor["void"](Control_Monad_Aff.functorAff)(Control_Monad_Aff.forkAll(Data_Map.foldableMap)(Data_Functor.map(Data_Map.functorMap)(function ($$var) {
                              return Control_Monad_Aff_AVar.putVar($$var)(message);
                          })(v)));
                      });
                  };
              };
              var handlePending = function (ref) {
                  return function __do() {
                      var v = Control_Monad_Eff_Ref.readRef(ref)();
                      Control_Monad_Eff_Ref.writeRef(ref)(Data_Maybe.Nothing.value)();
                      return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(v)(function ($64) {
                          return handleAff(Control_Monad_Aff.forkAll(Data_List_Types.foldableList)(Data_List.reverse($64)));
                      })();
                  };
              };
              var cleanupSubscriptions = function (v) {
                  return function __do() {
                      Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(function ($65) {
                          return handleAff(Control_Monad_Aff.forkAll(Data_Map.foldableMap)($65));
                      }))(Control_Monad_Eff_Ref.readRef(v.subscriptions))();
                      return Control_Monad_Eff_Ref.writeRef(v.subscriptions)(Data_Maybe.Nothing.value)();
                  };
              };
              var squashChildInitializers = function (lchs) {
                  return function (preInits) {
                      return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                          var parentInitializer = Data_Functor.map(Data_Maybe.functorMaybe)(function ($66) {
                              return evalF(st.selfRef)(Halogen_Query_InputF.Query.create($66));
                          })(st.component.initializer);
                          return Control_Monad_Eff_Ref.modifyRef(lchs)(function (handlers) {
                              return {
                                  initializers: new Data_List_Types.Cons(Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Halogen_Aff_Driver_Eval.parSequenceAff_(Data_List.reverse(handlers.initializers)))(function () {
                                      return Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(Data_Foldable.sequence_(Control_Monad_Aff.applicativeAff)(Data_Foldable.foldableMaybe)(parentInitializer))(function () {
                                          return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(function __do() {
                                              handlePending(st.pendingQueries)();
                                              return handlePending(st.pendingOuts)();
                                          });
                                      });
                                  }), preInits),
                                  finalizers: handlers.finalizers
                              };
                          });
                      });
                  };
              };
              var runComponent = function (lchs) {
                  return function (handler) {
                      return function (j) {
                          return function (prjQuery) {
                              return Halogen_Component.unComponent(function (c) {
                                  return function __do() {
                                      var v = newLifecycleHandlers();
                                      var v1 = Halogen_Aff_Driver_State.initDriverState(c)(j)(handler)(prjQuery)(v)();
                                      var v2 = Control_Monad_Eff_Ref.readRef(lchs)();
                                      Control_Monad_Eff_Ref.writeRef(lchs)({
                                          initializers: Data_List_Types.Nil.value,
                                          finalizers: v2.finalizers
                                      })();
                                      Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Halogen_Aff_Driver_State.unDriverStateX(function ($67) {
                                          return render(lchs)((function (v3) {
                                              return v3.selfRef;
                                          })($67));
                                      }))(Control_Monad_Eff_Ref.readRef(v1))();
                                      Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(squashChildInitializers(lchs)(v2.initializers))(Control_Monad_Eff_Ref.readRef(v1))();
                                      return v1;
                                  };
                              });
                          };
                      };
                  };
              };
              var renderChild = function (lchs) {
                  return function (handler) {
                      return function (mkOrdBox) {
                          return function (childrenInRef) {
                              return function (childrenOutRef) {
                                  return Halogen_Component.unComponentSlot(function (p) {
                                      return function (ctor) {
                                          return function (input) {
                                              return function (inputQuery) {
                                                  return function (outputQuery) {
                                                      return function (prjQuery) {
                                                          var ordP = mkOrdBox(p);
                                                          return function __do() {
                                                              var v = Control_Monad_Eff_Ref.readRef(childrenInRef)();
                                                              var v1 = (function () {
                                                                  var v1 = Data_Map.pop(Halogen_Data_OrdBox.ordOrdBox)(ordP)(v);
                                                                  if (v1 instanceof Data_Maybe.Just) {
                                                                      return function __do() {
                                                                          Control_Monad_Eff_Ref.writeRef(childrenInRef)(v1.value0.value1)();
                                                                          Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(inputQuery(input))(function (q) {
                                                                              return function __do() {
                                                                                  var v2 = Control_Monad_Eff_Ref.readRef(v1.value0.value0)();
                                                                                  return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                                                                                      return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(st.prjQuery(q))(function ($68) {
                                                                                          return handleAff(evalF(st.selfRef)(Halogen_Query_InputF.Query.create($68)));
                                                                                      });
                                                                                  })(v2)();
                                                                              };
                                                                          })();
                                                                          return v1.value0.value0;
                                                                      };
                                                                  };
                                                                  if (v1 instanceof Data_Maybe.Nothing) {
                                                                      return runComponent(lchs)(function ($69) {
                                                                          return Data_Maybe.maybe(Control_Applicative.pure(Control_Monad_Aff.applicativeAff)(Data_Unit.unit))(handler)(outputQuery($69));
                                                                      })(input)(prjQuery)(ctor);
                                                                  };
                                                                  throw new Error("Failed pattern match at Halogen.Aff.Driver line 260, column 14 - line 268, column 92: " + [ v1.constructor.name ]);
                                                              })()();
                                                              var v2 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Map.member(Halogen_Data_OrdBox.ordOrdBox)(ordP))(Control_Monad_Eff_Ref.readRef(childrenOutRef))();
                                                              Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v2)(Control_Monad_Eff_Unsafe.unsafeCoerceEff(Control_Monad_Eff_Console.warn("Halogen: Duplicate slot address was detected during rendering, unexpected results may occur")))();
                                                              Control_Monad_Eff_Ref.modifyRef(childrenOutRef)(Data_Map.insert(Halogen_Data_OrdBox.ordOrdBox)(ordP)(v1))();
                                                              return Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_Ref.readRef(v1))(Halogen_Aff_Driver_State.renderStateX(Control_Monad_Eff.functorEff)(function (v3) {
                                                                  if (v3 instanceof Data_Maybe.Nothing) {
                                                                      return Control_Monad_Eff_Exception["throw"]("Halogen internal error: child was not initialized in renderChild");
                                                                  };
                                                                  if (v3 instanceof Data_Maybe.Just) {
                                                                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(renderSpec.renderChild(v3.value0));
                                                                  };
                                                                  throw new Error("Failed pattern match at Halogen.Aff.Driver line 274, column 36 - line 276, column 50: " + [ v3.constructor.name ]);
                                                              }))();
                                                          };
                                                      };
                                                  };
                                              };
                                          };
                                      };
                                  });
                              };
                          };
                      };
                  };
              };
              var render = function (lchs) {
                  return function ($$var) {
                      return function __do() {
                          var v = Control_Monad_Eff_Ref.readRef($$var)();
                          var v1 = Data_Functor.map(Control_Monad_Eff.functorEff)(Data_Maybe.isNothing)(Control_Monad_Eff_Ref.readRef(v.pendingHandlers))();
                          Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v1)(Control_Monad_Eff_Ref.writeRef(v.pendingHandlers)(new Data_Maybe.Just(Data_List_Types.Nil.value)))();
                          Control_Monad_Eff_Ref.writeRef(v.childrenOut)(Data_Map.empty)();
                          Control_Monad_Eff_Ref.writeRef(v.childrenIn)(v.children)();
                          var handler = Halogen_Aff_Driver_Eval.queuingHandler(function ($70) {
                              return Data_Functor["void"](Control_Monad_Aff.functorAff)(evalF(v.selfRef)($70));
                          })(v.pendingHandlers);
                          var childHandler = Halogen_Aff_Driver_Eval.queuingHandler(function ($71) {
                              return handler(Halogen_Query_InputF.Query.create($71));
                          })(v.pendingQueries);
                          var v2 = renderSpec.render(function ($72) {
                              return handleAff(handler($72));
                          })(renderChild(lchs)(childHandler)(v.component.mkOrdBox)(v.childrenIn)(v.childrenOut))(v.component.render(v.state))(v.rendering)();
                          var v3 = Control_Monad_Eff_Ref.readRef(v.childrenOut)();
                          Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Monad_Eff_Ref.readRef(v.childrenIn))(Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Map.foldableMap)(function (childVar) {
                              return function __do() {
                                  var v4 = Control_Monad_Eff_Ref.readRef(childVar)();
                                  Halogen_Aff_Driver_State.renderStateX_(Control_Monad_Eff.applicativeEff)(renderSpec.removeChild)(v4)();
                                  return finalize(lchs)(v4)();
                              };
                          }))();
                          Control_Monad_Eff_Ref.modifyRef(v.selfRef)(function (v4) {
                              return {
                                  rendering: new Data_Maybe.Just(v2),
                                  children: v3,
                                  component: v4.component,
                                  state: v4.state,
                                  refs: v4.refs,
                                  childrenIn: v4.childrenIn,
                                  childrenOut: v4.childrenOut,
                                  selfRef: v4.selfRef,
                                  handler: v4.handler,
                                  pendingQueries: v4.pendingQueries,
                                  pendingOuts: v4.pendingOuts,
                                  pendingHandlers: v4.pendingHandlers,
                                  prjQuery: v4.prjQuery,
                                  fresh: v4.fresh,
                                  subscriptions: v4.subscriptions,
                                  lifecycleHandlers: v4.lifecycleHandlers
                              };
                          })();
                          return Control_Applicative.when(Control_Monad_Eff.applicativeEff)(v1)(Data_Function.flip(Control_Monad_Rec_Class.tailRecM(Control_Monad_Rec_Class.monadRecEff))(Data_Unit.unit)(function (v4) {
                              return function __do() {
                                  var v5 = Control_Monad_Eff_Ref.readRef(v.pendingHandlers)();
                                  Control_Monad_Eff_Ref.writeRef(v.pendingHandlers)(new Data_Maybe.Just(Data_List_Types.Nil.value))();
                                  Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(function ($73) {
                                      return handleAff(Control_Monad_Aff.forkAll(Data_List_Types.foldableList)(Data_List.reverse($73)));
                                  })(v5)();
                                  var v6 = Control_Monad_Eff_Ref.readRef(v.pendingHandlers)();
                                  var $57 = Data_Maybe.maybe(false)(Data_List["null"])(v6);
                                  if ($57) {
                                      return Data_Functor.voidLeft(Control_Monad_Eff.functorEff)(Control_Monad_Eff_Ref.writeRef(v.pendingHandlers)(Data_Maybe.Nothing.value))(new Control_Monad_Rec_Class.Done(Data_Unit.unit))();
                                  };
                                  return new Control_Monad_Rec_Class.Loop(Data_Unit.unit);
                              };
                          }))();
                      };
                  };
              };
              var finalize = function (lchs) {
                  return Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                      return function __do() {
                          cleanupSubscriptions(st)();
                          Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($74) {
                              return evalF(st.selfRef)(Halogen_Query_InputF.Query.create($74));
                          })(st.component.finalizer))(function (f) {
                              return Control_Monad_Eff_Ref.modifyRef(lchs)(function (handlers) {
                                  return {
                                      initializers: handlers.initializers,
                                      finalizers: new Data_List_Types.Cons(f, handlers.finalizers)
                                  };
                              });
                          })();
                          return Data_Foldable.for_(Control_Monad_Eff.applicativeEff)(Data_Map.foldableMap)(st.children)(Control_Bind.composeKleisliFlipped(Control_Monad_Eff.bindEff)(finalize(lchs))(Control_Monad_Eff_Ref.readRef))();
                      };
                  });
              };
              var evalF = function (ref) {
                  return Halogen_Aff_Driver_Eval["eval"](render)(ref);
              };
              var evalDriver = function (ref) {
                  return function (prjQuery) {
                      return function (q) {
                          var v = prjQuery(q);
                          if (v instanceof Data_Maybe.Just) {
                              return evalF(ref)(new Halogen_Query_InputF.Query(v.value0));
                          };
                          if (v instanceof Data_Maybe.Nothing) {
                              return Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Exception.throwException(Control_Monad_Eff_Exception.error("Halogen internal error: query projection failed in runUI'")));
                          };
                          throw new Error("Failed pattern match at Halogen.Aff.Driver line 138, column 5 - line 140, column 110: " + [ v.constructor.name ]);
                      };
                  };
              };
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(newLifecycleHandlers))(function (v) {
                  return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Monad_Eff_Ref.newRef(0)))(function (v1) {
                      return Halogen_Aff_Driver_Eval.handleLifecycle(v)(function __do() {
                          var v2 = Control_Monad_Eff_Ref.newRef(Data_Map.empty)();
                          return Control_Bind.bind(Control_Monad_Eff.bindEff)(Control_Bind.bind(Control_Monad_Eff.bindEff)(runComponent(v)(rootHandler(v2))(i)(Data_Maybe.Just.create)(component))(Control_Monad_Eff_Ref.readRef))(Halogen_Aff_Driver_State.unDriverStateX(function (st) {
                              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)({
                                  query: evalDriver(st.selfRef)(st.prjQuery),
                                  subscribe: subscribe(v1)(v2)
                              });
                          }))();
                      });
                  });
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS["Halogen.Aff.Driver"] = PS["Halogen.Aff.Driver"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Except = PS["Control.Monad.Except"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var DOM = PS["DOM"];
  var DOM_Event_EventTarget = PS["DOM.Event.EventTarget"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Event_EventTypes = PS["DOM.HTML.Event.EventTypes"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_ParentNode = PS["DOM.Node.ParentNode"];
  var Data_Either = PS["Data.Either"];
  var Data_Foreign = PS["Data.Foreign"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Prelude = PS["Prelude"];        
  var selectElement = function (query) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(Control_Bind.composeKleisliFlipped(Control_Monad_Eff.bindEff)(function ($8) {
          return DOM_Node_ParentNode.querySelector(query)(DOM_HTML_Types.htmlDocumentToParentNode($8));
      })(DOM_HTML_Window.document))(DOM_HTML.window)))(function (v) {
          return Control_Applicative.pure(Control_Monad_Aff.applicativeAff)((function () {
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Maybe.Nothing.value;
              };
              if (v instanceof Data_Maybe.Just) {
                  return Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(Control_Monad_Except.runExcept(DOM_HTML_Types.readHTMLElement(Data_Foreign.toForeign(v.value0))));
              };
              throw new Error("Failed pattern match at Halogen.Aff.Util line 53, column 8 - line 55, column 88: " + [ v.constructor.name ]);
          })());
      });
  };
  var runHalogenAff = function ($9) {
      return Data_Functor["void"](Control_Monad_Eff.functorEff)(Control_Monad_Aff.runAff(Control_Monad_Eff_Exception.throwException)(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))($9));
  };
  var awaitLoad = Control_Monad_Aff.makeAff(function (v) {
      return function (callback) {
          return Control_Monad_Eff_Class.liftEff(Control_Monad_Eff_Class.monadEffEff)(function __do() {
              var $10 = DOM_HTML.window();
              return DOM_Event_EventTarget.addEventListener(DOM_HTML_Event_EventTypes.load)(DOM_Event_EventTarget.eventListener(function (v1) {
                  return callback(Data_Unit.unit);
              }))(false)(DOM_HTML_Types.windowToEventTarget($10))();
          });
      };
  });
  var awaitBody = Control_Bind.discard(Control_Bind.discardUnit)(Control_Monad_Aff.bindAff)(awaitLoad)(function () {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(selectElement("body"))(function (v) {
          return Data_Maybe.maybe(Control_Monad_Error_Class.throwError(Control_Monad_Aff.monadThrowAff)(Control_Monad_Eff_Exception.error("Could not find body")))(Control_Applicative.pure(Control_Monad_Aff.applicativeAff))(v);
      });
  });
  exports["awaitLoad"] = awaitLoad;
  exports["awaitBody"] = awaitBody;
  exports["selectElement"] = selectElement;
  exports["runHalogenAff"] = runHalogenAff;
})(PS["Halogen.Aff.Util"] = PS["Halogen.Aff.Util"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function_Uncurried = PS["Data.Function.Uncurried"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Halogen_VDom_Machine = PS["Halogen.VDom.Machine"];
  var Halogen_VDom_Types = PS["Halogen.VDom.Types"];
  var Halogen_VDom_Util = PS["Halogen.VDom.Util"];
  var Prelude = PS["Prelude"];
  var eqElemSpec = function (a, b) {
      if (Data_Eq.eq(Halogen_VDom_Types.eqElemName)(a.value1)(b.value1)) {
          if (a.value0 instanceof Data_Maybe.Just && (b.value0 instanceof Data_Maybe.Just && a.value0.value0 === b.value0.value0)) {
              return true;
          };
          if (a.value0 instanceof Data_Maybe.Nothing && b.value0 instanceof Data_Maybe.Nothing) {
              return true;
          };
          return false;
      };
      return false;
  };
  var buildWidget = function (v) {
      var patch = function (v1) {
          return function (v2) {
              if (v2 instanceof Halogen_VDom_Types.Grafted) {
                  return patch(v1)(Halogen_VDom_Types.runGraft(v2.value0));
              };
              if (v2 instanceof Halogen_VDom_Types.Widget) {
                  return function __do() {
                      var v3 = v1.value1(v2.value0)();
                      return new Halogen_VDom_Machine.Step(v3.value0, patch(v3), v3.value2);
                  };
              };
              return function __do() {
                  v1.value2();
                  return buildVDom(v)(v2)();
              };
          };
      };
      var render = function (w) {
          return function __do() {
              var v1 = v.buildWidget(v)(w)();
              return new Halogen_VDom_Machine.Step(v1.value0, patch(v1), v1.value2);
          };
      };
      return render;
  };
  var buildVDom = function (spec) {
      var render = function (v) {
          if (v instanceof Halogen_VDom_Types.Text) {
              return buildText(spec)(v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Elem) {
              return buildElem(spec)(v.value0)(v.value1);
          };
          if (v instanceof Halogen_VDom_Types.Keyed) {
              return buildKeyed(spec)(v.value0)(v.value1);
          };
          if (v instanceof Halogen_VDom_Types.Widget) {
              return buildWidget(spec)(v.value0);
          };
          if (v instanceof Halogen_VDom_Types.Grafted) {
              return buildVDom(spec)(Halogen_VDom_Types.runGraft(v.value0));
          };
          throw new Error("Failed pattern match at Halogen.VDom.DOM line 58, column 12 - line 63, column 44: " + [ v.constructor.name ]);
      };
      return render;
  };
  var buildText = function (v) {
      var done = function (node) {
          return function __do() {
              var v1 = Halogen_VDom_Util.unsafeParent(node);
              return Halogen_VDom_Util.removeChild(node, v1)();
          };
      };
      var patch = function (node, s1) {
          return function (v1) {
              if (v1 instanceof Halogen_VDom_Types.Grafted) {
                  return patch(node, s1)(Halogen_VDom_Types.runGraft(v1.value0));
              };
              if (v1 instanceof Halogen_VDom_Types.Text) {
                  var res = new Halogen_VDom_Machine.Step(node, patch(node, v1.value0), done(node));
                  var v2 = s1 === v1.value0;
                  if (v2) {
                      return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(res);
                  };
                  return function __do() {
                      Halogen_VDom_Util.setTextContent(v1.value0, node)();
                      return res;
                  };
              };
              return function __do() {
                  done(node)();
                  return buildVDom(v)(v1)();
              };
          };
      };
      var render = function (s) {
          return function __do() {
              var v1 = Halogen_VDom_Util.createTextNode(s, v.document)();
              return new Halogen_VDom_Machine.Step(v1, patch(v1, s), done(v1));
          };
      };
      return render;
  };
  var buildKeyed = function (v) {
      var done = function (node, attrs, steps) {
          return function __do() {
              var v1 = Halogen_VDom_Util.unsafeParent(node);
              Halogen_VDom_Util.removeChild(node, v1)();
              Halogen_VDom_Util.forInE(steps, function (v2, v3) {
                  return v3.value2;
              })();
              return Halogen_VDom_Machine.halt(attrs)();
          };
      };
      var patch = function (node, attrs, v1, ch1, len1) {
          return function (v2) {
              if (v2 instanceof Halogen_VDom_Types.Grafted) {
                  return patch(node, attrs, v1, ch1, len1)(Halogen_VDom_Types.runGraft(v2.value0));
              };
              if (v2 instanceof Halogen_VDom_Types.Keyed && eqElemSpec(v1, v2.value0)) {
                  var v3 = Data_Array.length(v2.value1);
                  if (len1 === 0 && v3 === 0) {
                      return function __do() {
                          var v5 = Halogen_VDom_Machine.step(attrs)(v2.value0.value2)();
                          return new Halogen_VDom_Machine.Step(node, patch(node, v5, v2.value0, ch1, 0), done(node, v5, ch1));
                      };
                  };
                  var onThis = function (k, v5) {
                      return v5.value2;
                  };
                  var onThese = function (k, ix$prime, v5, v6) {
                      return function __do() {
                          var v7 = v5.value1(v6.value1)();
                          Halogen_VDom_Util.insertChildIx(ix$prime, v7.value0, node)();
                          return v7;
                      };
                  };
                  var onThat = function (k, ix, v5) {
                      return function __do() {
                          var v6 = buildVDom(v)(v5.value1)();
                          Halogen_VDom_Util.insertChildIx(ix, v6.value0, node)();
                          return v6;
                      };
                  };
                  return function __do() {
                      var v5 = Halogen_VDom_Util.diffWithKeyAndIxE(ch1, v2.value1, Data_Tuple.fst, onThese, onThis, onThat)();
                      var v6 = Halogen_VDom_Machine.step(attrs)(v2.value0.value2)();
                      return new Halogen_VDom_Machine.Step(node, patch(node, v6, v2.value0, v5, v3), done(node, v6, v5));
                  };
              };
              return function __do() {
                  done(node, attrs, ch1)();
                  return buildVDom(v)(v2)();
              };
          };
      };
      var render = function (v1) {
          return function (ch1) {
              return function __do() {
                  var v2 = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(v1.value0), v1.value1, v.document)();
                  var node = DOM_Node_Types.elementToNode(v2);
                  var onChild = function (k, ix, v3) {
                      return function __do() {
                          var v4 = buildVDom(v)(v3.value1)();
                          Halogen_VDom_Util.insertChildIx(ix, v4.value0, node)();
                          return v4;
                      };
                  };
                  var v3 = Halogen_VDom_Util.strMapWithIxE(ch1, Data_Tuple.fst, onChild)();
                  var v4 = v.buildAttributes(v2)(v1.value2)();
                  return new Halogen_VDom_Machine.Step(node, patch(node, v4, v1, v3, Data_Array.length(ch1)), done(node, v4, v3));
              };
          };
      };
      return render;
  };
  var buildElem = function (v) {
      var done = function (node, attrs, steps) {
          return function __do() {
              var v1 = Halogen_VDom_Util.unsafeParent(node);
              Halogen_VDom_Util.removeChild(node, v1)();
              Control_Monad_Eff.foreachE(steps)(Halogen_VDom_Machine.halt)();
              return Halogen_VDom_Machine.halt(attrs)();
          };
      };
      var patch = function (node, attrs, v1, ch1) {
          return function (v2) {
              if (v2 instanceof Halogen_VDom_Types.Grafted) {
                  return patch(node, attrs, v1, ch1)(Halogen_VDom_Types.runGraft(v2.value0));
              };
              if (v2 instanceof Halogen_VDom_Types.Elem && eqElemSpec(v1, v2.value0)) {
                  var v3 = Data_Array.length(v2.value1);
                  var v4 = Data_Array.length(ch1);
                  if (v4 === 0 && v3 === 0) {
                      return function __do() {
                          var v5 = Halogen_VDom_Machine.step(attrs)(v2.value0.value2)();
                          return new Halogen_VDom_Machine.Step(node, patch(node, v5, v2.value0, ch1), done(node, v5, ch1));
                      };
                  };
                  var onThis = function (ix, v5) {
                      return v5.value2;
                  };
                  var onThese = function (ix, v5, vdom) {
                      return function __do() {
                          var v6 = v5.value1(vdom)();
                          Halogen_VDom_Util.insertChildIx(ix, v6.value0, node)();
                          return v6;
                      };
                  };
                  var onThat = function (ix, vdom) {
                      return function __do() {
                          var v5 = buildVDom(v)(vdom)();
                          Halogen_VDom_Util.insertChildIx(ix, v5.value0, node)();
                          return v5;
                      };
                  };
                  return function __do() {
                      var v5 = Halogen_VDom_Util.diffWithIxE(ch1, v2.value1, onThese, onThis, onThat)();
                      var v6 = Halogen_VDom_Machine.step(attrs)(v2.value0.value2)();
                      return new Halogen_VDom_Machine.Step(node, patch(node, v6, v2.value0, v5), done(node, v6, v5));
                  };
              };
              return function __do() {
                  done(node, attrs, ch1)();
                  return buildVDom(v)(v2)();
              };
          };
      };
      var render = function (v1) {
          return function (ch1) {
              return function __do() {
                  var v2 = Halogen_VDom_Util.createElement(Data_Nullable.toNullable(v1.value0), v1.value1, v.document)();
                  var node = DOM_Node_Types.elementToNode(v2);
                  var onChild = function (ix, child) {
                      return function __do() {
                          var v3 = buildVDom(v)(child)();
                          Halogen_VDom_Util.insertChildIx(ix, v3.value0, node)();
                          return v3;
                      };
                  };
                  var v3 = Halogen_VDom_Util.forE(ch1, onChild)();
                  var v4 = v.buildAttributes(v2)(v1.value2)();
                  return new Halogen_VDom_Machine.Step(node, patch(node, v4, v1, v3), done(node, v4, v3));
              };
          };
      };
      return render;
  };
  exports["buildVDom"] = buildVDom;
  exports["buildText"] = buildText;
  exports["buildElem"] = buildElem;
  exports["buildKeyed"] = buildKeyed;
  exports["buildWidget"] = buildWidget;
})(PS["Halogen.VDom.DOM"] = PS["Halogen.VDom.DOM"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Ref = PS["Control.Monad.Eff.Ref"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];
  var DOM_Node_Node = PS["DOM.Node.Node"];
  var DOM_Node_Types = PS["DOM.Node.Types"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Aff_Driver = PS["Halogen.Aff.Driver"];
  var Halogen_Aff_Driver_State = PS["Halogen.Aff.Driver.State"];
  var Halogen_Aff_Effects = PS["Halogen.Aff.Effects"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_Query_InputF = PS["Halogen.Query.InputF"];
  var Halogen_VDom = PS["Halogen.VDom"];
  var Halogen_VDom_DOM = PS["Halogen.VDom.DOM"];
  var Halogen_VDom_DOM_Prop = PS["Halogen.VDom.DOM.Prop"];
  var Halogen_VDom_Machine = PS["Halogen.VDom.Machine"];
  var Prelude = PS["Prelude"];
  var Unsafe_Reference = PS["Unsafe.Reference"];
  var substInParent = function (v) {
      return function (v1) {
          return function (v2) {
              if (v1 instanceof Data_Maybe.Just && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_Node_Node.insertBefore(v)(v1.value0)(v2.value0));
              };
              if (v1 instanceof Data_Maybe.Nothing && v2 instanceof Data_Maybe.Just) {
                  return Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_Node_Node.appendChild(v)(v2.value0));
              };
              return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
          };
      };
  };
  var removeChild = function (v) {
      return function __do() {
          var v1 = DOM_Node_Node.parentNode(v.node)();
          return Data_Foldable.traverse_(Control_Monad_Eff.applicativeEff)(Data_Foldable.foldableMaybe)(function (pn) {
              return DOM_Node_Node.removeChild(v.node)(pn);
          })(v1)();
      };
  };
  var mkSpec = function (handler) {
      return function (renderChildRef) {
          return function (document) {
              var getNode = Halogen_Aff_Driver_State.unRenderStateX(function (v) {
                  return v.node;
              });
              var done = Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
              var patch = function (slot) {
                  return function __do() {
                      var v = Control_Monad_Eff_Ref.readRef(renderChildRef)();
                      var v1 = v(slot)();
                      var node = getNode(v1);
                      return new Halogen_VDom_Machine.Step(node, patch, done);
                  };
              };
              var buildWidget = function (spec) {
                  return function (slot) {
                      return function __do() {
                          var v = Control_Monad_Eff_Ref.readRef(renderChildRef)();
                          var v1 = v(slot)();
                          var node = getNode(v1);
                          return new Halogen_VDom_Machine.Step(node, patch, done);
                      };
                  };
              };
              var buildAttributes = Halogen_VDom_DOM_Prop.buildProp(handler);
              return {
                  buildWidget: buildWidget,
                  buildAttributes: buildAttributes,
                  document: document
              };
          };
      };
  };
  var renderSpec = function (document) {
      return function (container) {
          var render = function (handler) {
              return function (child) {
                  return function (v) {
                      return function (v1) {
                          if (v1 instanceof Data_Maybe.Nothing) {
                              return function __do() {
                                  var v2 = Control_Monad_Eff_Ref.newRef(child)();
                                  var spec = mkSpec(handler)(v2)(document);
                                  var v3 = Halogen_VDom_DOM.buildVDom(spec)(v)();
                                  var node = Halogen_VDom_Machine.extract(v3);
                                  Data_Functor["void"](Control_Monad_Eff.functorEff)(DOM_Node_Node.appendChild(node)(DOM_HTML_Types.htmlElementToNode(container)))();
                                  return {
                                      machine: v3,
                                      node: node,
                                      renderChildRef: v2
                                  };
                              };
                          };
                          if (v1 instanceof Data_Maybe.Just) {
                              return function __do() {
                                  Control_Monad_Eff_Ref.writeRef(v1.value0.renderChildRef)(child)();
                                  var v2 = DOM_Node_Node.parentNode(v1.value0.node)();
                                  var v3 = DOM_Node_Node.nextSibling(v1.value0.node)();
                                  var v4 = Halogen_VDom_Machine.step(v1.value0.machine)(v)();
                                  var newNode = Halogen_VDom_Machine.extract(v4);
                                  Control_Applicative.when(Control_Monad_Eff.applicativeEff)(Data_HeytingAlgebra.not(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraFunction(Data_HeytingAlgebra.heytingAlgebraBoolean)))(Unsafe_Reference.unsafeRefEq)(v1.value0.node)(newNode))(substInParent(newNode)(v3)(v2))();
                                  return {
                                      machine: v4,
                                      node: newNode,
                                      renderChildRef: v1.value0.renderChildRef
                                  };
                              };
                          };
                          throw new Error("Failed pattern match at Halogen.VDom.Driver line 121, column 5 - line 137, column 80: " + [ v1.constructor.name ]);
                      };
                  };
              };
          };
          return {
              render: render,
              renderChild: Control_Category.id(Control_Category.categoryFn),
              removeChild: removeChild
          };
      };
  };
  var runUI = function (component) {
      return function (i) {
          return function (element) {
              return Control_Bind.bind(Control_Monad_Aff.bindAff)(Control_Monad_Eff_Class.liftEff(Control_Monad_Aff.monadEffAff)(Data_Functor.map(Control_Monad_Eff.functorEff)(DOM_HTML_Types.htmlDocumentToDocument)(Control_Bind.bindFlipped(Control_Monad_Eff.bindEff)(DOM_HTML_Window.document)(DOM_HTML.window))))(function (v) {
                  return Halogen_Aff_Driver.runUI(renderSpec(v)(element))(component)(i);
              });
          };
      };
  };
  exports["runUI"] = runUI;
})(PS["Halogen.VDom.Driver"] = PS["Halogen.VDom.Driver"] || {});
(function(exports) {// module Routing

  exports.hashChanged = function(handler) {
      return function() {
          var getHash = function() {
              return document.location.href.split('#').splice(1).join('#');
          };
          var oldHash = '';
          handler('')(getHash())();
          window.addEventListener('hashchange', function(ev) {
              var newHash = getHash();
              handler(oldHash)(newHash)();
              oldHash = newHash;
          });
      };
  };

  exports.decodeURIComponent = function(str) {
      if (typeof window !== "undefined") {
          return window.decodeURIComponent(str);
      } else {
          return global.decodeURIComponent(str);
      }
  };
})(PS["Routing"] = PS["Routing"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alternative = PS["Control.Alternative"];
  var Data_Map = PS["Data.Map"];
  var Prelude = PS["Prelude"];        
  var MatchClass = function (Alternative0, bool, end, fail, $$int, lit, num, param, params, str) {
      this.Alternative0 = Alternative0;
      this.bool = bool;
      this.end = end;
      this.fail = fail;
      this["int"] = $$int;
      this.lit = lit;
      this.num = num;
      this.param = param;
      this.params = params;
      this.str = str;
  };
  var str = function (dict) {
      return dict.str;
  };
  var params = function (dict) {
      return dict.params;
  };
  var param = function (dict) {
      return dict.param;
  };
  var num = function (dict) {
      return dict.num;
  };
  var lit = function (dict) {
      return dict.lit;
  };
  var $$int = function (dict) {
      return dict["int"];
  };
  var fail = function (dict) {
      return dict.fail;
  };
  var end = function (dict) {
      return dict.end;
  };
  var bool = function (dict) {
      return dict.bool;
  };
  exports["bool"] = bool;
  exports["end"] = end;
  exports["fail"] = fail;
  exports["lit"] = lit;
  exports["num"] = num;
  exports["param"] = param;
  exports["params"] = params;
  exports["str"] = str;
  exports["MatchClass"] = MatchClass;
})(PS["Routing.Match.Class"] = PS["Routing.Match.Class"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_Semigroup = PS["Data.Semigroup"];
  var Prelude = PS["Prelude"];        
  var UnexpectedPath = (function () {
      function UnexpectedPath(value0) {
          this.value0 = value0;
      };
      UnexpectedPath.create = function (value0) {
          return new UnexpectedPath(value0);
      };
      return UnexpectedPath;
  })();
  var ExpectedBoolean = (function () {
      function ExpectedBoolean() {

      };
      ExpectedBoolean.value = new ExpectedBoolean();
      return ExpectedBoolean;
  })();
  var ExpectedEnd = (function () {
      function ExpectedEnd() {

      };
      ExpectedEnd.value = new ExpectedEnd();
      return ExpectedEnd;
  })();
  var ExpectedNumber = (function () {
      function ExpectedNumber() {

      };
      ExpectedNumber.value = new ExpectedNumber();
      return ExpectedNumber;
  })();
  var ExpectedInt = (function () {
      function ExpectedInt() {

      };
      ExpectedInt.value = new ExpectedInt();
      return ExpectedInt;
  })();
  var ExpectedString = (function () {
      function ExpectedString() {

      };
      ExpectedString.value = new ExpectedString();
      return ExpectedString;
  })();
  var ExpectedQuery = (function () {
      function ExpectedQuery() {

      };
      ExpectedQuery.value = new ExpectedQuery();
      return ExpectedQuery;
  })();
  var ExpectedPathPart = (function () {
      function ExpectedPathPart() {

      };
      ExpectedPathPart.value = new ExpectedPathPart();
      return ExpectedPathPart;
  })();
  var KeyNotFound = (function () {
      function KeyNotFound(value0) {
          this.value0 = value0;
      };
      KeyNotFound.create = function (value0) {
          return new KeyNotFound(value0);
      };
      return KeyNotFound;
  })();
  var Fail = (function () {
      function Fail(value0) {
          this.value0 = value0;
      };
      Fail.create = function (value0) {
          return new Fail(value0);
      };
      return Fail;
  })();
  var showMatchError = function (err) {
      if (err instanceof UnexpectedPath) {
          return "expected path part: " + err.value0;
      };
      if (err instanceof KeyNotFound) {
          return "key: " + (err.value0 + " has not found in query part");
      };
      if (err instanceof ExpectedQuery) {
          return "expected query - found path";
      };
      if (err instanceof ExpectedNumber) {
          return "expected number";
      };
      if (err instanceof ExpectedInt) {
          return "expected int";
      };
      if (err instanceof ExpectedBoolean) {
          return "expected boolean";
      };
      if (err instanceof ExpectedEnd) {
          return "expected end";
      };
      if (err instanceof ExpectedString) {
          return "expected string var";
      };
      if (err instanceof ExpectedPathPart) {
          return "expected path part, found query";
      };
      if (err instanceof Fail) {
          return "match error: " + err.value0;
      };
      throw new Error("Failed pattern match at Routing.Match.Error line 29, column 3 - line 39, column 36: " + [ err.constructor.name ]);
  };
  exports["UnexpectedPath"] = UnexpectedPath;
  exports["ExpectedBoolean"] = ExpectedBoolean;
  exports["ExpectedEnd"] = ExpectedEnd;
  exports["ExpectedNumber"] = ExpectedNumber;
  exports["ExpectedInt"] = ExpectedInt;
  exports["ExpectedString"] = ExpectedString;
  exports["ExpectedQuery"] = ExpectedQuery;
  exports["ExpectedPathPart"] = ExpectedPathPart;
  exports["KeyNotFound"] = KeyNotFound;
  exports["Fail"] = Fail;
  exports["showMatchError"] = showMatchError;
})(PS["Routing.Match.Error"] = PS["Routing.Match.Error"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Data_List = PS["Data.List"];
  var Data_Map = PS["Data.Map"];        
  var Path = (function () {
      function Path(value0) {
          this.value0 = value0;
      };
      Path.create = function (value0) {
          return new Path(value0);
      };
      return Path;
  })();
  var Query = (function () {
      function Query(value0) {
          this.value0 = value0;
      };
      Query.create = function (value0) {
          return new Query(value0);
      };
      return Query;
  })();
  exports["Path"] = Path;
  exports["Query"] = Query;
})(PS["Routing.Types"] = PS["Routing.Types"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Category = PS["Control.Category"];
  var Control_Plus = PS["Control.Plus"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Either = PS["Data.Either"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Int = PS["Data.Int"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Semiring_Free = PS["Data.Semiring.Free"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Validation_Semiring = PS["Data.Validation.Semiring"];
  var Global = PS["Global"];
  var Prelude = PS["Prelude"];
  var Routing_Match_Class = PS["Routing.Match.Class"];
  var Routing_Match_Error = PS["Routing.Match.Error"];
  var Routing_Types = PS["Routing.Types"];        
  var Match = function (x) {
      return x;
  };
  var runMatch = function (v) {
      return function (route) {
          var foldErrors = function (errs) {
              return Data_Either.Left.create(Data_Foldable.foldl(Data_List_Types.foldableList)(function (b) {
                  return function (a) {
                      return a + ("\x0a" + b);
                  };
              })("")(Control_Bind.bind(Data_List_Types.bindList)(Data_Functor.map(Data_List_Types.functorList)(Data_List.reverse)(Data_Newtype.unwrap(Data_Semiring_Free.newtypeFree)(errs)))(function (v1) {
                  return Control_Applicative.pure(Data_List_Types.applicativeList)(Data_Foldable.foldl(Data_List_Types.foldableList)(function (b) {
                      return function (a) {
                          return a + (";" + b);
                      };
                  })("")(Data_Functor.map(Data_List_Types.functorList)(Routing_Match_Error.showMatchError)(v1)));
              })));
          };
          return Data_Validation_Semiring.unV(foldErrors)(function ($90) {
              return Data_Either.Right.create(Data_Tuple.snd($90));
          })(v(route));
      };
  };        
  var matchFunctor = new Data_Functor.Functor(function (fn) {
      return function (v) {
          return Match(function (r) {
              return Data_Validation_Semiring.unV(Data_Validation_Semiring.invalid)(function (v1) {
                  return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(v1.value0, fn(v1.value1)));
              })(v(r));
          });
      };
  });
  var matchApply = new Control_Apply.Apply(function () {
      return matchFunctor;
  }, function (v) {
      return function (v1) {
          var processFnRes = function (v2) {
              return Data_Validation_Semiring.unV(Data_Validation_Semiring.invalid)(function (v3) {
                  return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(v3.value0, v2.value1(v3.value1)));
              })(v1(v2.value0));
          };
          var processFnErr = function (r) {
              return function (err) {
                  return Data_Validation_Semiring.invalid(Data_Semiring.mul(Data_Semiring_Free.semiringFree)(err)(Data_Validation_Semiring.unV(Control_Category.id(Control_Category.categoryFn))(Data_Function["const"](Data_Semiring.one(Data_Semiring_Free.semiringFree)))(v1(r))));
              };
          };
          return Match(function (r) {
              return Data_Validation_Semiring.unV(processFnErr(r))(processFnRes)(v(r));
          });
      };
  });
  var matchApplicative = new Control_Applicative.Applicative(function () {
      return matchApply;
  }, function (a) {
      return function (r) {
          return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(r, a));
      };
  });
  var matchAlt = new Control_Alt.Alt(function () {
      return matchFunctor;
  }, function (v) {
      return function (v1) {
          return Match(function (r) {
              return Control_Alt.alt(Data_Validation_Semiring.altV(Data_Semiring_Free.semiringFree))(v(r))(v1(r));
          });
      };
  });
  var matchPlus = new Control_Plus.Plus(function () {
      return matchAlt;
  }, Match(Data_Function["const"](Data_Validation_Semiring.invalid(Data_Semiring.one(Data_Semiring_Free.semiringFree)))));
  var matchAlternative = new Control_Alternative.Alternative(function () {
      return matchApplicative;
  }, function () {
      return matchPlus;
  });
  var matchMatchClass = new Routing_Match_Class.MatchClass(function () {
      return matchAlternative;
  }, function (route) {
      if (route instanceof Data_List_Types.Cons && (route.value0 instanceof Routing_Types.Path && route.value0.value0 === "true")) {
          return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, true));
      };
      if (route instanceof Data_List_Types.Cons && (route.value0 instanceof Routing_Types.Path && route.value0.value0 === "false")) {
          return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, false));
      };
      return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedBoolean.value));
  }, function (route) {
      if (route instanceof Data_List_Types.Nil) {
          return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(Data_List_Types.Nil.value, Data_Unit.unit));
      };
      return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedEnd.value));
  }, function (msg) {
      return function (v) {
          return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.Fail(msg)));
      };
  }, function (route) {
      if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Path) {
          var v = Data_Int.fromString(route.value0.value0);
          if (v instanceof Data_Maybe.Nothing) {
              return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedInt.value));
          };
          if (v instanceof Data_Maybe.Just) {
              return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, v.value0));
          };
          throw new Error("Failed pattern match at Routing.Match line 56, column 31 - line 58, column 40: " + [ v.constructor.name ]);
      };
      return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedInt.value));
  }, function (input) {
      return function (route) {
          if (route instanceof Data_List_Types.Cons && (route.value0 instanceof Routing_Types.Path && route.value0.value0 === input)) {
              return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, Data_Unit.unit));
          };
          if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Path) {
              return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.UnexpectedPath(input)));
          };
          return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedPathPart.value));
      };
  }, function (route) {
      if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Path) {
          var res = Global.readFloat(route.value0.value0);
          var $61 = Global["isNaN"](res);
          if ($61) {
              return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedNumber.value));
          };
          return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, res));
      };
      return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedNumber.value));
  }, function (key) {
      return function (route) {
          if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Query) {
              var v = Data_Map.lookup(Data_Ord.ordString)(key)(route.value0.value0);
              if (v instanceof Data_Maybe.Nothing) {
                  return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(new Routing_Match_Error.KeyNotFound(key)));
              };
              if (v instanceof Data_Maybe.Just) {
                  return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(new Data_List_Types.Cons(Routing_Types.Query.create(Data_Map["delete"](Data_Ord.ordString)(key)(route.value0.value0)), route.value1), v.value0));
              };
              throw new Error("Failed pattern match at Routing.Match line 81, column 9 - line 85, column 69: " + [ v.constructor.name ]);
          };
          return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedQuery.value));
      };
  }, function (route) {
      if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Query) {
          return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, route.value0.value0));
      };
      return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedQuery.value));
  }, function (route) {
      if (route instanceof Data_List_Types.Cons && route.value0 instanceof Routing_Types.Path) {
          return Control_Applicative.pure(Data_Validation_Semiring.applicativeV(Data_Semiring_Free.semiringFree))(new Data_Tuple.Tuple(route.value1, route.value0.value0));
      };
      return Data_Validation_Semiring.invalid(Data_Semiring_Free.free(Routing_Match_Error.ExpectedString.value));
  });
  exports["Match"] = Match;
  exports["runMatch"] = runMatch;
  exports["matchMatchClass"] = matchMatchClass;
  exports["matchFunctor"] = matchFunctor;
  exports["matchAlt"] = matchAlt;
  exports["matchPlus"] = matchPlus;
  exports["matchAlternative"] = matchAlternative;
  exports["matchApply"] = matchApply;
  exports["matchApplicative"] = matchApplicative;
})(PS["Routing.Match"] = PS["Routing.Match"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Array = PS["Data.Array"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List = PS["Data.List"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Map = PS["Data.Map"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_String = PS["Data.String"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var Routing_Types = PS["Routing.Types"];        
  var parsePart = function (str) {
      var parts = Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String.split("&")(Data_String.drop(1)(str)));
      var part2tuple = function (input) {
          var keyVal = Data_String.split("=")(input);
          return Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_Array.length(keyVal) <= 2))(function () {
              return Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(Data_Tuple.Tuple.create)(Data_Array.head(keyVal)))(Data_Array.index(keyVal)(1));
          });
      };
      return Data_Maybe.fromMaybe(new Routing_Types.Path(str))(Control_Bind.discard(Control_Bind.discardUnit)(Data_Maybe.bindMaybe)(Control_MonadZero.guard(Data_Maybe.monadZeroMaybe)(Data_String.take(1)(str) === "?"))(function () {
          return Data_Functor.map(Data_Maybe.functorMaybe)(function ($0) {
              return Routing_Types.Query.create(Data_Map.fromFoldable(Data_Ord.ordString)(Data_List_Types.foldableList)($0));
          })(Data_Traversable.traverse(Data_List_Types.traversableList)(Data_Maybe.applicativeMaybe)(part2tuple)(parts));
      }));
  };
  var parse = function (decoder) {
      return function (hash) {
          return Data_Functor.map(Data_List_Types.functorList)(function ($1) {
              return parsePart(decoder($1));
          })(Data_List.fromFoldable(Data_Foldable.foldableArray)(Data_String.split("/")(hash)));
      };
  };
  exports["parse"] = parse;
})(PS["Routing.Parser"] = PS["Routing.Parser"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var $foreign = PS["Routing"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Either = PS["Data.Either"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var Data_String_Regex_Flags = PS["Data.String.Regex.Flags"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var Prelude = PS["Prelude"];
  var Routing_Match = PS["Routing.Match"];
  var Routing_Parser = PS["Routing.Parser"];        
  var matchWith = function (decoder) {
      return function (matcher) {
          return function (hash) {
              return Routing_Match.runMatch(matcher)(Routing_Parser.parse(decoder)(hash));
          };
      };
  };                                                    
  var hashes = function (cb) {
      var dropHash = function (h) {
          var v = Data_String_Regex.regex("^[^#]*#")(Data_String_Regex_Flags.noFlags);
          if (v instanceof Data_Either.Right) {
              return Data_String_Regex.replace(v.value0)("")(h);
          };
          if (v instanceof Data_Either.Left) {
              return h;
          };
          throw new Error("Failed pattern match at Routing line 35, column 11 - line 37, column 28: " + [ v.constructor.name ]);
      };
      return $foreign.hashChanged(function (old) {
          return function ($$new) {
              return cb(dropHash(old))(dropHash($$new));
          };
      });
  };
  var matches$prime = function (decoder) {
      return function (routing) {
          return function (cb) {
              return hashes(function (old) {
                  return function ($$new) {
                      var mr = matchWith(decoder)(routing);
                      var fst = Data_Either.either(Data_Function["const"](Data_Maybe.Nothing.value))(Data_Maybe.Just.create)(mr(old));
                      return Data_Either.either(Data_Function["const"](Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit)))(cb(fst))(mr($$new));
                  };
              });
          };
      };
  };                                                          
  var matchesAff$prime = function (decoder) {
      return function (routing) {
          return Control_Monad_Aff.makeAff(function (v) {
              return function (k) {
                  return matches$prime(decoder)(routing)(function (old) {
                      return function ($$new) {
                          return k(new Data_Tuple.Tuple(old, $$new));
                      };
                  });
              };
          });
      };
  };
  var matchesAff = matchesAff$prime($foreign["decodeURIComponent"]);
  exports["hashes"] = hashes;
  exports["matchWith"] = matchWith;
  exports["matchesAff"] = matchesAff;
})(PS["Routing"] = PS["Routing"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Alt = PS["Control.Alt"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Tuple = PS["Data.Tuple"];
  var DemoContainer = PS["DemoContainer"];
  var Halogen = PS["Halogen"];
  var Halogen_Aff = PS["Halogen.Aff"];
  var Halogen_Component = PS["Halogen.Component"];
  var Halogen_HTML = PS["Halogen.HTML"];
  var Halogen_HTML_Core = PS["Halogen.HTML.Core"];
  var Halogen_HTML_Elements = PS["Halogen.HTML.Elements"];
  var Halogen_HTML_Events = PS["Halogen.HTML.Events"];
  var Halogen_HTML_Properties = PS["Halogen.HTML.Properties"];
  var Halogen_Query = PS["Halogen.Query"];
  var Halogen_Query_HalogenM = PS["Halogen.Query.HalogenM"];
  var Prelude = PS["Prelude"];
  var Route = PS["Route"];
  var Routing = PS["Routing"];
  var Routing_Match = PS["Routing.Match"];
  var Routing_Match_Class = PS["Routing.Match.Class"];        
  var DemoContainerSlot = (function () {
      function DemoContainerSlot() {

      };
      DemoContainerSlot.value = new DemoContainerSlot();
      return DemoContainerSlot;
  })();
  var OnDemoContainerMessage = (function () {
      function OnDemoContainerMessage(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      OnDemoContainerMessage.create = function (value0) {
          return function (value1) {
              return new OnDemoContainerMessage(value0, value1);
          };
      };
      return OnDemoContainerMessage;
  })();
  var GoTo = (function () {
      function GoTo(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      GoTo.create = function (value0) {
          return function (value1) {
              return new GoTo(value0, value1);
          };
      };
      return GoTo;
  })();
  var matchRoute = (function () {
      var route = function (str) {
          return Control_Apply.applySecond(Routing_Match.matchApply)(Routing_Match_Class.lit(Routing_Match.matchMatchClass)(""))(Routing_Match_Class.lit(Routing_Match.matchMatchClass)(str));
      };
      var home = Data_Functor.voidRight(Routing_Match.matchFunctor)(Route.Home.value)(Routing_Match_Class.lit(Routing_Match.matchMatchClass)(""));
      var cards = Data_Functor.voidRight(Routing_Match.matchFunctor)(Route.Cards.value)(route(Route.urlSegment(Route.Cards.value)));
      var buttons = Data_Functor.voidRight(Routing_Match.matchFunctor)(Route.Buttons.value)(route(Route.urlSegment(Route.Buttons.value)));
      return Control_Alt.alt(Routing_Match.matchAlt)(Control_Alt.alt(Routing_Match.matchAlt)(buttons)(cards))(home);
  })();
  var goToRoute = function (driver) {
      return function (v) {
          return function ($25) {
              return driver.query(Halogen_Query.action(GoTo.create($25)));
          };
      };
  };
  var routeSignal = function (driver) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Routing.matchesAff(matchRoute))(function (v) {
          return goToRoute(driver)(v.value0)(v.value1);
      });
  };
  var eqSlot = new Data_Eq.Eq(function (x) {
      return function (y) {
          return true;
      };
  });
  var ordSlot = new Data_Ord.Ord(function () {
      return eqSlot;
  }, function (x) {
      return function (y) {
          return Data_Ordering.EQ.value;
      };
  });
  var component = (function () {
      var render = function (state) {
          return Halogen_HTML_Elements.div([ Halogen_HTML_Properties.class_("root") ])([ Halogen_HTML.slot(DemoContainerSlot.value)(DemoContainer.demoContainer)(DemoContainer.init({
              currentRoute: state.currentRoute
          }))(Halogen_HTML_Events.input(OnDemoContainerMessage.create)) ]);
      };
      var receiver = function (v) {
          return Data_Maybe.Nothing.value;
      };
      var initialState = function (v) {
          return {
              currentRoute: Route.Home.value
          };
      };
      var $$eval = function (v) {
          if (v instanceof GoTo) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Halogen_Query_HalogenM.bindHalogenM)(Control_Monad_State_Class.modify(Halogen_Query_HalogenM.monadStateHalogenM)(function (v1) {
                  var $18 = {};
                  for (var $19 in v1) {
                      if ({}.hasOwnProperty.call(v1, $19)) {
                          $18[$19] = v1[$19];
                      };
                  };
                  $18.currentRoute = v.value0;
                  return $18;
              }))(function () {
                  return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
              });
          };
          if (v instanceof OnDemoContainerMessage) {
              return Control_Applicative.pure(Halogen_Query_HalogenM.applicativeHalogenM)(v.value1);
          };
          throw new Error("Failed pattern match at Router line 92, column 12 - line 98, column 14: " + [ v.constructor.name ]);
      };
      return Halogen_Component.parentComponent(ordSlot)({
          initialState: initialState,
          receiver: receiver,
          render: render,
          "eval": $$eval
      });
  })();
  exports["routeSignal"] = routeSignal;
  exports["matchRoute"] = matchRoute;
  exports["goToRoute"] = goToRoute;
  exports["OnDemoContainerMessage"] = OnDemoContainerMessage;
  exports["GoTo"] = GoTo;
  exports["DemoContainerSlot"] = DemoContainerSlot;
  exports["component"] = component;
  exports["eqSlot"] = eqSlot;
  exports["ordSlot"] = ordSlot;
})(PS["Router"] = PS["Router"] || {});
(function(exports) {
  // Generated by purs version 0.11.7
  "use strict";
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad_Aff = PS["Control.Monad.Aff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Halogen_Aff = PS["Halogen.Aff"];
  var Halogen_Aff_Util = PS["Halogen.Aff.Util"];
  var Halogen_VDom_Driver = PS["Halogen.VDom.Driver"];
  var Prelude = PS["Prelude"];
  var Router = PS["Router"];        
  var main = Halogen_Aff_Util.runHalogenAff(Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_Aff_Util.awaitBody)(function (v) {
      return Control_Bind.bind(Control_Monad_Aff.bindAff)(Halogen_VDom_Driver.runUI(Router.component)(Data_Unit.unit)(v))(function (v1) {
          return Control_Monad_Aff.forkAff(Router.routeSignal(v1));
      });
  }));
  exports["main"] = main;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
